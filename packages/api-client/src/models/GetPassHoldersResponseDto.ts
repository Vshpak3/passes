/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PassHolderDto } from './PassHolderDto';
import {
    PassHolderDtoFromJSON,
    PassHolderDtoFromJSONTyped,
    PassHolderDtoToJSON,
} from './PassHolderDto';

/**
 * 
 * @export
 * @interface GetPassHoldersResponseDto
 */
export interface GetPassHoldersResponseDto {
    /**
     * 
     * @type {string}
     * @memberof GetPassHoldersResponseDto
     */
    lastId: string;
    /**
     * 
     * @type {Date}
     * @memberof GetPassHoldersResponseDto
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GetPassHoldersResponseDto
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Array<PassHolderDto>}
     * @memberof GetPassHoldersResponseDto
     */
    passHolders: Array<PassHolderDto>;
    /**
     * 
     * @type {string}
     * @memberof GetPassHoldersResponseDto
     */
    orderType: GetPassHoldersResponseDtoOrderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GetPassHoldersResponseDto
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassHoldersResponseDto
     */
    displayName?: string;
}


/**
 * @export
 */
export const GetPassHoldersResponseDtoOrderTypeEnum = {
    Username: 'username',
    DisplayName: 'display name',
    CreatedAt: 'created at'
} as const;
export type GetPassHoldersResponseDtoOrderTypeEnum = typeof GetPassHoldersResponseDtoOrderTypeEnum[keyof typeof GetPassHoldersResponseDtoOrderTypeEnum];


/**
 * Check if a given object implements the GetPassHoldersResponseDto interface.
 */
export function instanceOfGetPassHoldersResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "lastId" in value;
    isInstance = isInstance && "passHolders" in value;
    isInstance = isInstance && "orderType" in value;

    return isInstance;
}

export function GetPassHoldersResponseDtoFromJSON(json: any): GetPassHoldersResponseDto {
    return GetPassHoldersResponseDtoFromJSONTyped(json, false);
}

export function GetPassHoldersResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetPassHoldersResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'lastId': json['lastId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'passHolders': ((json['passHolders'] as Array<any>).map(PassHolderDtoFromJSON)),
        'orderType': json['orderType'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
    };
}

export function GetPassHoldersResponseDtoToJSON(value?: GetPassHoldersResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'lastId': value.lastId,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'passHolders': ((value.passHolders as Array<any>).map(PassHolderDtoToJSON)),
        'orderType': value.orderType,
        'username': value.username,
        'displayName': value.displayName,
    };
}

