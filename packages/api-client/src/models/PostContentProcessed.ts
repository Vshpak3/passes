/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentDto } from './ContentDto';
import {
    ContentDtoFromJSON,
    ContentDtoFromJSONTyped,
    ContentDtoToJSON,
} from './ContentDto';

/**
 * 
 * @export
 * @interface PostContentProcessed
 */
export interface PostContentProcessed {
    /**
     * 
     * @type {string}
     * @memberof PostContentProcessed
     */
    postId: string;
    /**
     * 
     * @type {Array<ContentDto>}
     * @memberof PostContentProcessed
     */
    contents?: Array<ContentDto>;
    /**
     * 
     * @type {boolean}
     * @memberof PostContentProcessed
     */
    contentProcessed: boolean;
}

/**
 * Check if a given object implements the PostContentProcessed interface.
 */
export function instanceOfPostContentProcessed(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "postId" in value;
    isInstance = isInstance && "contentProcessed" in value;

    return isInstance;
}

export function PostContentProcessedFromJSON(json: any): PostContentProcessed {
    return PostContentProcessedFromJSONTyped(json, false);
}

export function PostContentProcessedFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostContentProcessed {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'postId': json['postId'],
        'contents': !exists(json, 'contents') ? undefined : ((json['contents'] as Array<any>).map(ContentDtoFromJSON)),
        'contentProcessed': json['contentProcessed'],
    };
}

export function PostContentProcessedToJSON(value?: PostContentProcessed | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'postId': value.postId,
        'contents': value.contents === undefined ? undefined : ((value.contents as Array<any>).map(ContentDtoToJSON)),
        'contentProcessed': value.contentProcessed,
    };
}

