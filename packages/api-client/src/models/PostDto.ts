/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GetContentResponseDto,
    GetContentResponseDtoFromJSON,
    GetContentResponseDtoFromJSONTyped,
    GetContentResponseDtoToJSON,
} from './GetContentResponseDto';

/**
 * 
 * @export
 * @interface PostDto
 */
export interface PostDto {
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    text: string;
    /**
     * 
     * @type {Array<GetContentResponseDto>}
     * @memberof PostDto
     */
    content?: Array<GetContentResponseDto>;
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    numLikes: number;
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    numComments: number;
    /**
     * 
     * @type {boolean}
     * @memberof PostDto
     */
    isLiked: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PostDto
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof PostDto
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof PostDto
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    price?: string;
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    totalTipAmount: number;
}

export function PostDtoFromJSON(json: any): PostDto {
    return PostDtoFromJSONTyped(json, false);
}

export function PostDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'text': json['text'],
        'content': !exists(json, 'content') ? undefined : ((json['content'] as Array<any>).map(GetContentResponseDtoFromJSON)),
        'numLikes': json['numLikes'],
        'numComments': json['numComments'],
        'isLiked': json['isLiked'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'price': !exists(json, 'price') ? undefined : json['price'],
        'totalTipAmount': json['totalTipAmount'],
    };
}

export function PostDtoToJSON(value?: PostDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'text': value.text,
        'content': value.content === undefined ? undefined : ((value.content as Array<any>).map(GetContentResponseDtoToJSON)),
        'numLikes': value.numLikes,
        'numComments': value.numComments,
        'isLiked': value.isLiked,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'price': value.price,
        'totalTipAmount': value.totalTipAmount,
    };
}

