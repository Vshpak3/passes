/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GetContentResponseDto
 */
export interface GetContentResponseDto {
    /**
     * 
     * @type {string}
     * @memberof GetContentResponseDto
     */
    contentId: string;
    /**
     * 
     * @type {string}
     * @memberof GetContentResponseDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof GetContentResponseDto
     */
    signedUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GetContentResponseDto
     */
    contentType: GetContentResponseDtoContentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof GetContentResponseDto
     */
    order: number;
    /**
     * 
     * @type {Date}
     * @memberof GetContentResponseDto
     */
    createdAt: Date;
}


/**
 * @export
 */
export const GetContentResponseDtoContentTypeEnum = {
    Image: 'image',
    Video: 'video',
    Gif: 'gif',
    Audio: 'audio'
} as const;
export type GetContentResponseDtoContentTypeEnum = typeof GetContentResponseDtoContentTypeEnum[keyof typeof GetContentResponseDtoContentTypeEnum];


/**
 * Check if a given object implements the GetContentResponseDto interface.
 */
export function instanceOfGetContentResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contentId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "signedUrl" in value;
    isInstance = isInstance && "contentType" in value;
    isInstance = isInstance && "order" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function GetContentResponseDtoFromJSON(json: any): GetContentResponseDto {
    return GetContentResponseDtoFromJSONTyped(json, false);
}

export function GetContentResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetContentResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contentId': json['contentId'],
        'userId': json['userId'],
        'signedUrl': json['signedUrl'],
        'contentType': json['contentType'],
        'order': json['order'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function GetContentResponseDtoToJSON(value?: GetContentResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contentId': value.contentId,
        'userId': value.userId,
        'signedUrl': value.signedUrl,
        'contentType': value.contentType,
        'order': value.order,
        'createdAt': (value.createdAt.toISOString()),
    };
}

