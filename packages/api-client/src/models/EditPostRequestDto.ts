/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TagDto } from './TagDto';
import {
    TagDtoFromJSON,
    TagDtoFromJSONTyped,
    TagDtoToJSON,
} from './TagDto';

/**
 * 
 * @export
 * @interface EditPostRequestDto
 */
export interface EditPostRequestDto {
    /**
     * 
     * @type {string}
     * @memberof EditPostRequestDto
     */
    text: string;
    /**
     * 
     * @type {Array<TagDto>}
     * @memberof EditPostRequestDto
     */
    tags: Array<TagDto>;
    /**
     * 
     * @type {number}
     * @memberof EditPostRequestDto
     */
    previewIndex: number;
    /**
     * 
     * @type {Date}
     * @memberof EditPostRequestDto
     */
    expiresAt?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof EditPostRequestDto
     */
    price?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof EditPostRequestDto
     */
    contentIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EditPostRequestDto
     */
    postId: string;
}

/**
 * Check if a given object implements the EditPostRequestDto interface.
 */
export function instanceOfEditPostRequestDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "previewIndex" in value;
    isInstance = isInstance && "contentIds" in value;
    isInstance = isInstance && "postId" in value;

    return isInstance;
}

export function EditPostRequestDtoFromJSON(json: any): EditPostRequestDto {
    return EditPostRequestDtoFromJSONTyped(json, false);
}

export function EditPostRequestDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EditPostRequestDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': json['text'],
        'tags': ((json['tags'] as Array<any>).map(TagDtoFromJSON)),
        'previewIndex': json['previewIndex'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (json['expiresAt'] === null ? null : new Date(json['expiresAt'])),
        'price': !exists(json, 'price') ? undefined : json['price'],
        'contentIds': json['contentIds'],
        'postId': json['postId'],
    };
}

export function EditPostRequestDtoToJSON(value?: EditPostRequestDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'tags': ((value.tags as Array<any>).map(TagDtoToJSON)),
        'previewIndex': value.previewIndex,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt === null ? null : value.expiresAt.toISOString()),
        'price': value.price,
        'contentIds': value.contentIds,
        'postId': value.postId,
    };
}

