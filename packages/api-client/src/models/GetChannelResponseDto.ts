/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MessageDto } from './MessageDto';
import {
    MessageDtoFromJSON,
    MessageDtoFromJSONTyped,
    MessageDtoToJSON,
} from './MessageDto';

/**
 * 
 * @export
 * @interface GetChannelResponseDto
 */
export interface GetChannelResponseDto {
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    channelId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    streamChannelId: string;
    /**
     * 
     * @type {Date}
     * @memberof GetChannelResponseDto
     */
    recent: Date;
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    channelMemberId: string;
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    otherUserId: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetChannelResponseDto
     */
    unlimitedMessages: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetChannelResponseDto
     */
    tipSent: number;
    /**
     * 
     * @type {number}
     * @memberof GetChannelResponseDto
     */
    tipRecieved: number;
    /**
     * 
     * @type {number}
     * @memberof GetChannelResponseDto
     */
    unreadTip: number;
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    otherUserUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof GetChannelResponseDto
     */
    otherUserDisplayName?: string;
    /**
     * 
     * @type {MessageDto}
     * @memberof GetChannelResponseDto
     */
    mostRecentMessage?: MessageDto;
}

/**
 * Check if a given object implements the GetChannelResponseDto interface.
 */
export function instanceOfGetChannelResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "streamChannelId" in value;
    isInstance = isInstance && "recent" in value;
    isInstance = isInstance && "channelMemberId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "otherUserId" in value;
    isInstance = isInstance && "unlimitedMessages" in value;
    isInstance = isInstance && "tipSent" in value;
    isInstance = isInstance && "tipRecieved" in value;
    isInstance = isInstance && "unreadTip" in value;

    return isInstance;
}

export function GetChannelResponseDtoFromJSON(json: any): GetChannelResponseDto {
    return GetChannelResponseDtoFromJSONTyped(json, false);
}

export function GetChannelResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetChannelResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelId': !exists(json, 'channelId') ? undefined : json['channelId'],
        'streamChannelId': json['streamChannelId'],
        'recent': (new Date(json['recent'])),
        'channelMemberId': json['channelMemberId'],
        'userId': json['userId'],
        'otherUserId': json['otherUserId'],
        'unlimitedMessages': json['unlimitedMessages'],
        'tipSent': json['tipSent'],
        'tipRecieved': json['tipRecieved'],
        'unreadTip': json['unreadTip'],
        'otherUserUsername': !exists(json, 'otherUserUsername') ? undefined : json['otherUserUsername'],
        'otherUserDisplayName': !exists(json, 'otherUserDisplayName') ? undefined : json['otherUserDisplayName'],
        'mostRecentMessage': !exists(json, 'mostRecentMessage') ? undefined : MessageDtoFromJSON(json['mostRecentMessage']),
    };
}

export function GetChannelResponseDtoToJSON(value?: GetChannelResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channelId': value.channelId,
        'streamChannelId': value.streamChannelId,
        'recent': (value.recent.toISOString()),
        'channelMemberId': value.channelMemberId,
        'userId': value.userId,
        'otherUserId': value.otherUserId,
        'unlimitedMessages': value.unlimitedMessages,
        'tipSent': value.tipSent,
        'tipRecieved': value.tipRecieved,
        'unreadTip': value.unreadTip,
        'otherUserUsername': value.otherUserUsername,
        'otherUserDisplayName': value.otherUserDisplayName,
        'mostRecentMessage': MessageDtoToJSON(value.mostRecentMessage),
    };
}

