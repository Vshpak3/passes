/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CircleCardDto,
    CircleCardDtoFromJSON,
    CircleCardDtoFromJSONTyped,
    CircleCardDtoToJSON,
} from './CircleCardDto';
import {
    PayinMethodDto,
    PayinMethodDtoFromJSON,
    PayinMethodDtoFromJSONTyped,
    PayinMethodDtoToJSON,
} from './PayinMethodDto';

/**
 * 
 * @export
 * @interface PayinDto
 */
export interface PayinDto {
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    userId: string;
    /**
     * 
     * @type {PayinMethodDto}
     * @memberof PayinDto
     */
    payinMethod: PayinMethodDto;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    payinStatus: PayinDtoPayinStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PayinDto
     */
    amount: number;
    /**
     * 
     * @type {Date}
     * @memberof PayinDto
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    callback: PayinDtoCallbackEnum;
    /**
     * 
     * @type {CircleCardDto}
     * @memberof PayinDto
     */
    card?: CircleCardDto;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    transactionHash?: string;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    callbackOutputJSON: string;
    /**
     * 
     * @type {string}
     * @memberof PayinDto
     */
    target: string;
}


/**
 * @export
 */
export const PayinDtoPayinStatusEnum = {
    Registered: 'registered',
    Created: 'created',
    Pending: 'pending',
    Successful: 'successful',
    Failed: 'failed',
    Unregistered: 'unregistered',
    ActionRequired: 'action_required',
    Reverted: 'reverted',
    FailCallbackFailed: 'fail_callback_failed',
    SuccessCallbackFailed: 'success_callback_failed',
    CreateCallbackFailed: 'create_callback_failed'
} as const;
export type PayinDtoPayinStatusEnum = typeof PayinDtoPayinStatusEnum[keyof typeof PayinDtoPayinStatusEnum];

/**
 * @export
 */
export const PayinDtoCallbackEnum = {
    Message: 'message',
    CreateNftPass: 'create_nft_pass',
    RewnewNftPass: 'rewnew_nft_pass',
    Example: 'example'
} as const;
export type PayinDtoCallbackEnum = typeof PayinDtoCallbackEnum[keyof typeof PayinDtoCallbackEnum];


export function PayinDtoFromJSON(json: any): PayinDto {
    return PayinDtoFromJSONTyped(json, false);
}

export function PayinDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayinDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'payinMethod': PayinMethodDtoFromJSON(json['payinMethod']),
        'payinStatus': json['payinStatus'],
        'amount': json['amount'],
        'createdAt': (new Date(json['createdAt'])),
        'callback': json['callback'],
        'card': !exists(json, 'card') ? undefined : CircleCardDtoFromJSON(json['card']),
        'transactionHash': !exists(json, 'transactionHash') ? undefined : json['transactionHash'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'callbackOutputJSON': json['callbackOutputJSON'],
        'target': json['target'],
    };
}

export function PayinDtoToJSON(value?: PayinDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'payinMethod': PayinMethodDtoToJSON(value.payinMethod),
        'payinStatus': value.payinStatus,
        'amount': value.amount,
        'createdAt': (value.createdAt.toISOString()),
        'callback': value.callback,
        'card': CircleCardDtoToJSON(value.card),
        'transactionHash': value.transactionHash,
        'address': value.address,
        'callbackOutputJSON': value.callbackOutputJSON,
        'target': value.target,
    };
}

