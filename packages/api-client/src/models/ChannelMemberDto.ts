/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChannelMemberDto
 */
export interface ChannelMemberDto {
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    channelId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ChannelMemberDto
     */
    recent: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    previewText: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    channelMemberId: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    otherUserId: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelMemberDto
     */
    unlimitedMessages: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChannelMemberDto
     */
    tipSent: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelMemberDto
     */
    tipReceived: number;
    /**
     * 
     * @type {Date}
     * @memberof ChannelMemberDto
     */
    readAt: Date | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelMemberDto
     */
    unreadTip: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelMemberDto
     */
    unread: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    otherUserUsername: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelMemberDto
     */
    otherUserDisplayName: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelMemberDto
     */
    otherUserIsCreator: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChannelMemberDto
     */
    spent?: number | null;
}

/**
 * Check if a given object implements the ChannelMemberDto interface.
 */
export function instanceOfChannelMemberDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "recent" in value;
    isInstance = isInstance && "previewText" in value;
    isInstance = isInstance && "channelMemberId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "otherUserId" in value;
    isInstance = isInstance && "unlimitedMessages" in value;
    isInstance = isInstance && "tipSent" in value;
    isInstance = isInstance && "tipReceived" in value;
    isInstance = isInstance && "readAt" in value;
    isInstance = isInstance && "unreadTip" in value;
    isInstance = isInstance && "unread" in value;
    isInstance = isInstance && "otherUserUsername" in value;
    isInstance = isInstance && "otherUserDisplayName" in value;
    isInstance = isInstance && "otherUserIsCreator" in value;

    return isInstance;
}

export function ChannelMemberDtoFromJSON(json: any): ChannelMemberDto {
    return ChannelMemberDtoFromJSONTyped(json, false);
}

export function ChannelMemberDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelMemberDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelId': !exists(json, 'channelId') ? undefined : json['channelId'],
        'recent': (json['recent'] === null ? null : new Date(json['recent'])),
        'previewText': json['previewText'],
        'channelMemberId': json['channelMemberId'],
        'userId': json['userId'],
        'otherUserId': json['otherUserId'],
        'unlimitedMessages': json['unlimitedMessages'],
        'tipSent': json['tipSent'],
        'tipReceived': json['tipReceived'],
        'readAt': (json['readAt'] === null ? null : new Date(json['readAt'])),
        'unreadTip': json['unreadTip'],
        'unread': json['unread'],
        'otherUserUsername': json['otherUserUsername'],
        'otherUserDisplayName': json['otherUserDisplayName'],
        'otherUserIsCreator': json['otherUserIsCreator'],
        'spent': !exists(json, 'spent') ? undefined : json['spent'],
    };
}

export function ChannelMemberDtoToJSON(value?: ChannelMemberDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channelId': value.channelId,
        'recent': (value.recent === null ? null : value.recent.toISOString()),
        'previewText': value.previewText,
        'channelMemberId': value.channelMemberId,
        'userId': value.userId,
        'otherUserId': value.otherUserId,
        'unlimitedMessages': value.unlimitedMessages,
        'tipSent': value.tipSent,
        'tipReceived': value.tipReceived,
        'readAt': (value.readAt === null ? null : value.readAt.toISOString()),
        'unreadTip': value.unreadTip,
        'unread': value.unread,
        'otherUserUsername': value.otherUserUsername,
        'otherUserDisplayName': value.otherUserDisplayName,
        'otherUserIsCreator': value.otherUserIsCreator,
        'spent': value.spent,
    };
}

