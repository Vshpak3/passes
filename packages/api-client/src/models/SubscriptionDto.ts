/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CircleCardDto } from './CircleCardDto';
import {
    CircleCardDtoFromJSON,
    CircleCardDtoFromJSONTyped,
    CircleCardDtoToJSON,
} from './CircleCardDto';
import type { PassDto } from './PassDto';
import {
    PassDtoFromJSON,
    PassDtoFromJSONTyped,
    PassDtoToJSON,
} from './PassDto';
import type { PassHolderDto } from './PassHolderDto';
import {
    PassHolderDtoFromJSON,
    PassHolderDtoFromJSONTyped,
    PassHolderDtoToJSON,
} from './PassHolderDto';
import type { PayinMethodDto } from './PayinMethodDto';
import {
    PayinMethodDtoFromJSON,
    PayinMethodDtoFromJSONTyped,
    PayinMethodDtoToJSON,
} from './PayinMethodDto';

/**
 * 
 * @export
 * @interface SubscriptionDto
 */
export interface SubscriptionDto {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    userId: string;
    /**
     * 
     * @type {PayinMethodDto}
     * @memberof SubscriptionDto
     */
    payinMethod: PayinMethodDto;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    subscriptionStatus: SubscriptionDtoSubscriptionStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionDto
     */
    amount: number;
    /**
     * 
     * @type {CircleCardDto}
     * @memberof SubscriptionDto
     */
    card?: CircleCardDto;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    passHolderId?: string;
    /**
     * 
     * @type {PassHolderDto}
     * @memberof SubscriptionDto
     */
    passHolder?: PassHolderDto;
    /**
     * 
     * @type {PassDto}
     * @memberof SubscriptionDto
     */
    pass?: PassDto;
}


/**
 * @export
 */
export const SubscriptionDtoSubscriptionStatusEnum = {
    Active: 'active',
    Expiring: 'expiring',
    Disabled: 'disabled',
    Cancelled: 'cancelled'
} as const;
export type SubscriptionDtoSubscriptionStatusEnum = typeof SubscriptionDtoSubscriptionStatusEnum[keyof typeof SubscriptionDtoSubscriptionStatusEnum];


/**
 * Check if a given object implements the SubscriptionDto interface.
 */
export function instanceOfSubscriptionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "payinMethod" in value;
    isInstance = isInstance && "subscriptionStatus" in value;
    isInstance = isInstance && "amount" in value;

    return isInstance;
}

export function SubscriptionDtoFromJSON(json: any): SubscriptionDto {
    return SubscriptionDtoFromJSONTyped(json, false);
}

export function SubscriptionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriptionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'payinMethod': PayinMethodDtoFromJSON(json['payinMethod']),
        'subscriptionStatus': json['subscriptionStatus'],
        'amount': json['amount'],
        'card': !exists(json, 'card') ? undefined : CircleCardDtoFromJSON(json['card']),
        'passHolderId': !exists(json, 'passHolderId') ? undefined : json['passHolderId'],
        'passHolder': !exists(json, 'passHolder') ? undefined : PassHolderDtoFromJSON(json['passHolder']),
        'pass': !exists(json, 'pass') ? undefined : PassDtoFromJSON(json['pass']),
    };
}

export function SubscriptionDtoToJSON(value?: SubscriptionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'payinMethod': PayinMethodDtoToJSON(value.payinMethod),
        'subscriptionStatus': value.subscriptionStatus,
        'amount': value.amount,
        'card': CircleCardDtoToJSON(value.card),
        'passHolderId': value.passHolderId,
        'passHolder': PassHolderDtoToJSON(value.passHolder),
        'pass': PassDtoToJSON(value.pass),
    };
}

