/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateBatchMessageRequestDto
 */
export interface CreateBatchMessageRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBatchMessageRequestDto
     */
    text: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBatchMessageRequestDto
     */
    contentIds: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CreateBatchMessageRequestDto
     */
    price?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBatchMessageRequestDto
     */
    includeListIds: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBatchMessageRequestDto
     */
    exlcudeListIds: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBatchMessageRequestDto
     */
    passIds: Array<string>;
}

/**
 * Check if a given object implements the CreateBatchMessageRequestDto interface.
 */
export function instanceOfCreateBatchMessageRequestDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "contentIds" in value;
    isInstance = isInstance && "includeListIds" in value;
    isInstance = isInstance && "exlcudeListIds" in value;
    isInstance = isInstance && "passIds" in value;

    return isInstance;
}

export function CreateBatchMessageRequestDtoFromJSON(json: any): CreateBatchMessageRequestDto {
    return CreateBatchMessageRequestDtoFromJSONTyped(json, false);
}

export function CreateBatchMessageRequestDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateBatchMessageRequestDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': json['text'],
        'contentIds': json['contentIds'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'includeListIds': json['includeListIds'],
        'exlcudeListIds': json['exlcudeListIds'],
        'passIds': json['passIds'],
    };
}

export function CreateBatchMessageRequestDtoToJSON(value?: CreateBatchMessageRequestDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'contentIds': value.contentIds,
        'price': value.price,
        'includeListIds': value.includeListIds,
        'exlcudeListIds': value.exlcudeListIds,
        'passIds': value.passIds,
    };
}

