/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateContentRequestDto,
    CreateContentRequestDtoFromJSON,
    CreateContentRequestDtoToJSON,
    GetContentResponseDto,
    GetContentResponseDtoFromJSON,
    GetContentResponseDtoToJSON,
    GetContentsResponseDto,
    GetContentsResponseDtoFromJSON,
    GetContentsResponseDtoToJSON,
    GetSignedUrlResponseDto,
    GetSignedUrlResponseDtoFromJSON,
    GetSignedUrlResponseDtoToJSON,
} from '../models';

export interface CreateContentRequest {
    createContentRequestDto: CreateContentRequestDto;
}

export interface GetVaultContentRequest {
    category?: GetVaultContentCategoryEnum;
    type?: GetVaultContentTypeEnum;
}

export interface PreSignUrlRequest {
    path: string;
}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI {

    /**
     * Create content
     */
    async createContentRaw(requestParameters: CreateContentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetContentResponseDto>> {
        if (requestParameters.createContentRequestDto === null || requestParameters.createContentRequestDto === undefined) {
            throw new runtime.RequiredError('createContentRequestDto','Required parameter requestParameters.createContentRequestDto was null or undefined when calling createContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContentRequestDtoToJSON(requestParameters.createContentRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContentResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create content
     */
    async createContent(requestParameters: CreateContentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetContentResponseDto> {
        const response = await this.createContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all content associated with the current authenticated user
     */
    async getVaultContentRaw(requestParameters: GetVaultContentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetContentsResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/content/vault`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContentsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets all content associated with the current authenticated user
     */
    async getVaultContent(requestParameters: GetVaultContentRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetContentsResponseDto> {
        const response = await this.getVaultContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get signed url for specified path
     */
    async preSignUrlRaw(requestParameters: PreSignUrlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetSignedUrlResponseDto>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling preSignUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/content/sign/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSignedUrlResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get signed url for specified path
     */
    async preSignUrl(requestParameters: PreSignUrlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetSignedUrlResponseDto> {
        const response = await this.preSignUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetVaultContentCategoryEnum = {
    Posts: 'posts',
    Messages: 'messages',
    Uploads: 'uploads'
} as const;
export type GetVaultContentCategoryEnum = typeof GetVaultContentCategoryEnum[keyof typeof GetVaultContentCategoryEnum];
/**
 * @export
 */
export const GetVaultContentTypeEnum = {
    Image: 'image',
    Video: 'video',
    Gif: 'gif',
    Audio: 'audio'
} as const;
export type GetVaultContentTypeEnum = typeof GetVaultContentTypeEnum[keyof typeof GetVaultContentTypeEnum];
