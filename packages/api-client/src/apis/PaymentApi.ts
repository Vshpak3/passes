/* tslint:disable */
/* eslint-disable */
/**
 * Moment Backend
 * Be in the moment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CircleNotificationDto,
    CircleNotificationDtoFromJSON,
    CircleNotificationDtoToJSON,
    CreateAddressDto,
    CreateAddressDtoFromJSON,
    CreateAddressDtoToJSON,
    CreateBankDto,
    CreateBankDtoFromJSON,
    CreateBankDtoToJSON,
    CreateCardAndExtraDto,
    CreateCardAndExtraDtoFromJSON,
    CreateCardAndExtraDtoToJSON,
    CreateCardPaymentDto,
    CreateCardPaymentDtoFromJSON,
    CreateCardPaymentDtoToJSON,
    StatusDto,
    StatusDtoFromJSON,
    StatusDtoToJSON,
} from '../models';

export interface PaymentCheckCardStatusRequest {
    id: string;
}

export interface PaymentCheckWireBankStatusRequest {
    id: string;
}

export interface PaymentCreateCardRequest {
    createCardAndExtraDto: CreateCardAndExtraDto;
}

export interface PaymentCreateWireBankAccountRequest {
    createBankDto: CreateBankDto;
}

export interface PaymentDeleteCardRequest {
    circleCardId: string;
}

export interface PaymentGetAddressRequest {
    createAddressDto: CreateAddressDto;
}

export interface PaymentRecieveNotificationsRequest {
    circleNotificationDto: CircleNotificationDto;
}

export interface PaymentRemoveRequest {
    id: string;
}

export interface PaymentSetDefaultRequest {
    circleCardId: string;
}

export interface PaymentUpdateRequest {
    createCardPaymentDto: CreateCardPaymentDto;
}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI {

    /**
     * Check card status
     */
    async paymentCheckCardStatusRaw(requestParameters: PaymentCheckCardStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentCheckCardStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Check card status
     */
    async paymentCheckCardStatus(requestParameters: PaymentCheckCardStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCheckCardStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check wire bank status
     */
    async paymentCheckWireBankStatusRaw(requestParameters: PaymentCheckWireBankStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentCheckWireBankStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/bank/wire/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Check wire bank status
     */
    async paymentCheckWireBankStatus(requestParameters: PaymentCheckWireBankStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCheckWireBankStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a card
     */
    async paymentCreateCardRaw(requestParameters: PaymentCreateCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.createCardAndExtraDto === null || requestParameters.createCardAndExtraDto === undefined) {
            throw new runtime.RequiredError('createCardAndExtraDto','Required parameter requestParameters.createCardAndExtraDto was null or undefined when calling paymentCreateCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/card/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCardAndExtraDtoToJSON(requestParameters.createCardAndExtraDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Creates a card
     */
    async paymentCreateCard(requestParameters: PaymentCreateCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCreateCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create wire bank account
     */
    async paymentCreateWireBankAccountRaw(requestParameters: PaymentCreateWireBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.createBankDto === null || requestParameters.createBankDto === undefined) {
            throw new runtime.RequiredError('createBankDto','Required parameter requestParameters.createBankDto was null or undefined when calling paymentCreateWireBankAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/bank/wire/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBankDtoToJSON(requestParameters.createBankDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Create wire bank account
     */
    async paymentCreateWireBankAccount(requestParameters: PaymentCreateWireBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCreateWireBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a card
     */
    async paymentDeleteCardRaw(requestParameters: PaymentDeleteCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.circleCardId === null || requestParameters.circleCardId === undefined) {
            throw new runtime.RequiredError('circleCardId','Required parameter requestParameters.circleCardId was null or undefined when calling paymentDeleteCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/delete/{circleCardId}`.replace(`{${"circleCardId"}}`, encodeURIComponent(String(requestParameters.circleCardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deletes a card
     */
    async paymentDeleteCard(requestParameters: PaymentDeleteCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.paymentDeleteCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get crypto address
     */
    async paymentGetAddressRaw(requestParameters: PaymentGetAddressRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.createAddressDto === null || requestParameters.createAddressDto === undefined) {
            throw new runtime.RequiredError('createAddressDto','Required parameter requestParameters.createAddressDto was null or undefined when calling paymentGetAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAddressDtoToJSON(requestParameters.createAddressDto),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get crypto address
     */
    async paymentGetAddress(requestParameters: PaymentGetAddressRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.paymentGetAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cards
     */
    async paymentGetCardsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get cards
     */
    async paymentGetCards(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<object>> {
        const response = await this.paymentGetCardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get default card
     */
    async paymentGetDefaultRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get default card
     */
    async paymentGetDefault(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.paymentGetDefaultRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get encryption key
     */
    async paymentGetEncryptionKeyRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/key`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get encryption key
     */
    async paymentGetEncryptionKey(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.paymentGetEncryptionKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Circle notifications
     */
    async paymentRecieveNotificationsRaw(requestParameters: PaymentRecieveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.circleNotificationDto === null || requestParameters.circleNotificationDto === undefined) {
            throw new runtime.RequiredError('circleNotificationDto','Required parameter requestParameters.circleNotificationDto was null or undefined when calling paymentRecieveNotifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleNotificationDtoToJSON(requestParameters.circleNotificationDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Circle notifications
     */
    async paymentRecieveNotifications(requestParameters: PaymentRecieveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentRecieveNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * Check payment status
     */
    async paymentRemoveRaw(requestParameters: PaymentRemoveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Check payment status
     */
    async paymentRemove(requestParameters: PaymentRemoveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set default card
     */
    async paymentSetDefaultRaw(requestParameters: PaymentSetDefaultRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.circleCardId === null || requestParameters.circleCardId === undefined) {
            throw new runtime.RequiredError('circleCardId','Required parameter requestParameters.circleCardId was null or undefined when calling paymentSetDefault.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/default/{circleCardId}`.replace(`{${"circleCardId"}}`, encodeURIComponent(String(requestParameters.circleCardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Set default card
     */
    async paymentSetDefault(requestParameters: PaymentSetDefaultRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.paymentSetDefaultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make card payment
     */
    async paymentUpdateRaw(requestParameters: PaymentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.createCardPaymentDto === null || requestParameters.createCardPaymentDto === undefined) {
            throw new runtime.RequiredError('createCardPaymentDto','Required parameter requestParameters.createCardPaymentDto was null or undefined when calling paymentUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/pay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCardPaymentDtoToJSON(requestParameters.createCardPaymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Make card payment
     */
    async paymentUpdate(requestParameters: PaymentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
