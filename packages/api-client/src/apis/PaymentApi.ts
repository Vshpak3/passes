/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CircleCardPayinEntryRequestDto,
  CircleCardPayinEntryResponseDto,
  CircleCreateBankRequestDto,
  CircleCreateCardAndExtraRequestDto,
  CircleEncryptionKeyResponseDto,
  CircleStatusResponseDto,
  GetCircleBanksResponseDto,
  GetCircleCardResponseDto,
  GetCircleCardsResponseDto,
  GetPayinMethodResponseDto,
  GetPayinsRequestDto,
  GetPayinsResponseDto,
  GetPayoutMethodResponseDto,
  GetPayoutsRequestDto,
  GetPayoutsResponseDto,
  GetSubscriptionsResponseDto,
  MetamaskCircleETHEntryRequestDto,
  MetamaskCircleETHEntryResponseDto,
  MetamaskCircleUSDCEntryRequestDto,
  MetamaskCircleUSDCEntryResponseDto,
  PayinDataDto,
  PhantomCircleUSDCEntryRequestDto,
  PhantomCircleUSDCEntryResponseDto,
  RegisterPayinResponseDto,
  SetPayinMethodRequestDto,
  SetPayoutMethodRequestDto,
} from '../models';
import {
    CircleCardPayinEntryRequestDtoFromJSON,
    CircleCardPayinEntryRequestDtoToJSON,
    CircleCardPayinEntryResponseDtoFromJSON,
    CircleCardPayinEntryResponseDtoToJSON,
    CircleCreateBankRequestDtoFromJSON,
    CircleCreateBankRequestDtoToJSON,
    CircleCreateCardAndExtraRequestDtoFromJSON,
    CircleCreateCardAndExtraRequestDtoToJSON,
    CircleEncryptionKeyResponseDtoFromJSON,
    CircleEncryptionKeyResponseDtoToJSON,
    CircleStatusResponseDtoFromJSON,
    CircleStatusResponseDtoToJSON,
    GetCircleBanksResponseDtoFromJSON,
    GetCircleBanksResponseDtoToJSON,
    GetCircleCardResponseDtoFromJSON,
    GetCircleCardResponseDtoToJSON,
    GetCircleCardsResponseDtoFromJSON,
    GetCircleCardsResponseDtoToJSON,
    GetPayinMethodResponseDtoFromJSON,
    GetPayinMethodResponseDtoToJSON,
    GetPayinsRequestDtoFromJSON,
    GetPayinsRequestDtoToJSON,
    GetPayinsResponseDtoFromJSON,
    GetPayinsResponseDtoToJSON,
    GetPayoutMethodResponseDtoFromJSON,
    GetPayoutMethodResponseDtoToJSON,
    GetPayoutsRequestDtoFromJSON,
    GetPayoutsRequestDtoToJSON,
    GetPayoutsResponseDtoFromJSON,
    GetPayoutsResponseDtoToJSON,
    GetSubscriptionsResponseDtoFromJSON,
    GetSubscriptionsResponseDtoToJSON,
    MetamaskCircleETHEntryRequestDtoFromJSON,
    MetamaskCircleETHEntryRequestDtoToJSON,
    MetamaskCircleETHEntryResponseDtoFromJSON,
    MetamaskCircleETHEntryResponseDtoToJSON,
    MetamaskCircleUSDCEntryRequestDtoFromJSON,
    MetamaskCircleUSDCEntryRequestDtoToJSON,
    MetamaskCircleUSDCEntryResponseDtoFromJSON,
    MetamaskCircleUSDCEntryResponseDtoToJSON,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    PhantomCircleUSDCEntryRequestDtoFromJSON,
    PhantomCircleUSDCEntryRequestDtoToJSON,
    PhantomCircleUSDCEntryResponseDtoFromJSON,
    PhantomCircleUSDCEntryResponseDtoToJSON,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    SetPayinMethodRequestDtoFromJSON,
    SetPayinMethodRequestDtoToJSON,
    SetPayoutMethodRequestDtoFromJSON,
    SetPayoutMethodRequestDtoToJSON,
} from '../models';

export interface CancelPayinRequest {
    payinId: string;
}

export interface CancelSubscriptionRequest {
    subscriptionId: string;
}

export interface CreateCircleBankRequest {
    circleCreateBankRequestDto: CircleCreateBankRequestDto;
}

export interface CreateCircleCardRequest {
    circleCreateCardAndExtraRequestDto: CircleCreateCardAndExtraRequestDto;
}

export interface DeleteCircleBankRequest {
    circleBankId: string;
}

export interface DeleteCircleCardRequest {
    circleCardId: string;
}

export interface EntryCircleCardRequest {
    circleCardPayinEntryRequestDto: CircleCardPayinEntryRequestDto;
}

export interface EntryMetamaskCircleETHRequest {
    metamaskCircleETHEntryRequestDto: MetamaskCircleETHEntryRequestDto;
}

export interface EntryMetamaskCircleUSDCRequest {
    metamaskCircleUSDCEntryRequestDto: MetamaskCircleUSDCEntryRequestDto;
}

export interface EntryPhantomCircleUSDCRequest {
    phantomCircleUSDCEntryRequestDto: PhantomCircleUSDCEntryRequestDto;
}

export interface GetCircleCardRequest {
    cardId: string;
}

export interface GetPayinsRequest {
    getPayinsRequestDto: GetPayinsRequestDto;
}

export interface GetPayoutsRequest {
    getPayoutsRequestDto: GetPayoutsRequestDto;
}

export interface RePayoutRequest {
    payoutId: string;
}

export interface ReceiveNotificationsRequest {
    body: string;
}

export interface SetDefaultPayinMethodRequest {
    setPayinMethodRequestDto: SetPayinMethodRequestDto;
}

export interface SetDefaultPayoutMethodRequest {
    setPayoutMethodRequestDto: SetPayoutMethodRequestDto;
}

export interface SetSubscriptionPayinMethodRequest {
    subscriptionId: string;
    setPayinMethodRequestDto: SetPayinMethodRequestDto;
}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI {

    /**
     * Cancel a payin
     */
    async cancelPayinRaw(requestParameters: CancelPayinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.payinId === null || requestParameters.payinId === undefined) {
            throw new runtime.RequiredError('payinId','Required parameter requestParameters.payinId was null or undefined when calling cancelPayin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/cancel/{payinId}`.replace(`{${"payinId"}}`, encodeURIComponent(String(requestParameters.payinId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel a payin
     */
    async cancelPayin(requestParameters: CancelPayinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelPayinRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel subscription
     */
    async cancelSubscriptionRaw(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling cancelSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/subscription/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel subscription
     */
    async cancelSubscription(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * Create a wire bank account
     */
    async createCircleBankRaw(requestParameters: CreateCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircleStatusResponseDto>> {
        if (requestParameters.circleCreateBankRequestDto === null || requestParameters.circleCreateBankRequestDto === undefined) {
            throw new runtime.RequiredError('circleCreateBankRequestDto','Required parameter requestParameters.circleCreateBankRequestDto was null or undefined when calling createCircleBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/bank/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleCreateBankRequestDtoToJSON(requestParameters.circleCreateBankRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleStatusResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a wire bank account
     */
    async createCircleBank(requestParameters: CreateCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircleStatusResponseDto> {
        const response = await this.createCircleBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a card
     */
    async createCircleCardRaw(requestParameters: CreateCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircleStatusResponseDto>> {
        if (requestParameters.circleCreateCardAndExtraRequestDto === null || requestParameters.circleCreateCardAndExtraRequestDto === undefined) {
            throw new runtime.RequiredError('circleCreateCardAndExtraRequestDto','Required parameter requestParameters.circleCreateCardAndExtraRequestDto was null or undefined when calling createCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/card/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleCreateCardAndExtraRequestDtoToJSON(requestParameters.circleCreateCardAndExtraRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleStatusResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a card
     */
    async createCircleCard(requestParameters: CreateCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircleStatusResponseDto> {
        const response = await this.createCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a wire bank account
     */
    async deleteCircleBankRaw(requestParameters: DeleteCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.circleBankId === null || requestParameters.circleBankId === undefined) {
            throw new runtime.RequiredError('circleBankId','Required parameter requestParameters.circleBankId was null or undefined when calling deleteCircleBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/bank/delete/{circleBankId}`.replace(`{${"circleBankId"}}`, encodeURIComponent(String(requestParameters.circleBankId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a wire bank account
     */
    async deleteCircleBank(requestParameters: DeleteCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCircleBankRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a card
     */
    async deleteCircleCardRaw(requestParameters: DeleteCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.circleCardId === null || requestParameters.circleCardId === undefined) {
            throw new runtime.RequiredError('circleCardId','Required parameter requestParameters.circleCardId was null or undefined when calling deleteCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/card/delete/{circleCardId}`.replace(`{${"circleCardId"}}`, encodeURIComponent(String(requestParameters.circleCardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a card
     */
    async deleteCircleCard(requestParameters: DeleteCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCircleCardRaw(requestParameters, initOverrides);
    }

    /**
     * Circlecard payin entrypoint
     */
    async entryCircleCardRaw(requestParameters: EntryCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircleCardPayinEntryResponseDto>> {
        if (requestParameters.circleCardPayinEntryRequestDto === null || requestParameters.circleCardPayinEntryRequestDto === undefined) {
            throw new runtime.RequiredError('circleCardPayinEntryRequestDto','Required parameter requestParameters.circleCardPayinEntryRequestDto was null or undefined when calling entryCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/entry/circle-card`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleCardPayinEntryRequestDtoToJSON(requestParameters.circleCardPayinEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleCardPayinEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Circlecard payin entrypoint
     */
    async entryCircleCard(requestParameters: EntryCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircleCardPayinEntryResponseDto> {
        const response = await this.entryCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Metamask ETH payin entrypoint
     */
    async entryMetamaskCircleETHRaw(requestParameters: EntryMetamaskCircleETHRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetamaskCircleETHEntryResponseDto>> {
        if (requestParameters.metamaskCircleETHEntryRequestDto === null || requestParameters.metamaskCircleETHEntryRequestDto === undefined) {
            throw new runtime.RequiredError('metamaskCircleETHEntryRequestDto','Required parameter requestParameters.metamaskCircleETHEntryRequestDto was null or undefined when calling entryMetamaskCircleETH.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/entry/metamask-eth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetamaskCircleETHEntryRequestDtoToJSON(requestParameters.metamaskCircleETHEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetamaskCircleETHEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Metamask ETH payin entrypoint
     */
    async entryMetamaskCircleETH(requestParameters: EntryMetamaskCircleETHRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetamaskCircleETHEntryResponseDto> {
        const response = await this.entryMetamaskCircleETHRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Metamask USDC payin entrypoint
     */
    async entryMetamaskCircleUSDCRaw(requestParameters: EntryMetamaskCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetamaskCircleUSDCEntryResponseDto>> {
        if (requestParameters.metamaskCircleUSDCEntryRequestDto === null || requestParameters.metamaskCircleUSDCEntryRequestDto === undefined) {
            throw new runtime.RequiredError('metamaskCircleUSDCEntryRequestDto','Required parameter requestParameters.metamaskCircleUSDCEntryRequestDto was null or undefined when calling entryMetamaskCircleUSDC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/entry/metamask-usdc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetamaskCircleUSDCEntryRequestDtoToJSON(requestParameters.metamaskCircleUSDCEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetamaskCircleUSDCEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Metamask USDC payin entrypoint
     */
    async entryMetamaskCircleUSDC(requestParameters: EntryMetamaskCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetamaskCircleUSDCEntryResponseDto> {
        const response = await this.entryMetamaskCircleUSDCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Phantom USDC payin entrypoint
     */
    async entryPhantomCircleUSDCRaw(requestParameters: EntryPhantomCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhantomCircleUSDCEntryResponseDto>> {
        if (requestParameters.phantomCircleUSDCEntryRequestDto === null || requestParameters.phantomCircleUSDCEntryRequestDto === undefined) {
            throw new runtime.RequiredError('phantomCircleUSDCEntryRequestDto','Required parameter requestParameters.phantomCircleUSDCEntryRequestDto was null or undefined when calling entryPhantomCircleUSDC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/entry/phantom-usdc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhantomCircleUSDCEntryRequestDtoToJSON(requestParameters.phantomCircleUSDCEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhantomCircleUSDCEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Phantom USDC payin entrypoint
     */
    async entryPhantomCircleUSDC(requestParameters: EntryPhantomCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhantomCircleUSDCEntryResponseDto> {
        const response = await this.entryPhantomCircleUSDCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get wire bank acccounts
     */
    async getCircleBanksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCircleBanksResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/banks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCircleBanksResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get wire bank acccounts
     */
    async getCircleBanks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCircleBanksResponseDto> {
        const response = await this.getCircleBanksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get card by id
     */
    async getCircleCardRaw(requestParameters: GetCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCircleCardResponseDto>> {
        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling getCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/card/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCircleCardResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get card by id
     */
    async getCircleCard(requestParameters: GetCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCircleCardResponseDto> {
        const response = await this.getCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cards
     */
    async getCircleCardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCircleCardsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCircleCardsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get cards
     */
    async getCircleCards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCircleCardsResponseDto> {
        const response = await this.getCircleCardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get circle encryption key
     */
    async getCircleEncryptionKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircleEncryptionKeyResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/key`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleEncryptionKeyResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get circle encryption key
     */
    async getCircleEncryptionKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircleEncryptionKeyResponseDto> {
        const response = await this.getCircleEncryptionKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get default payin method
     */
    async getDefaultPayinMethodRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPayinMethodResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayinMethodResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get default payin method
     */
    async getDefaultPayinMethod(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPayinMethodResponseDto> {
        const response = await this.getDefaultPayinMethodRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get default payout method
     */
    async getDefaultPayoutMethodRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPayoutMethodResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payout/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayoutMethodResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get default payout method
     */
    async getDefaultPayoutMethod(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPayoutMethodResponseDto> {
        const response = await this.getDefaultPayoutMethodRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all payins
     */
    async getPayinsRaw(requestParameters: GetPayinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPayinsResponseDto>> {
        if (requestParameters.getPayinsRequestDto === null || requestParameters.getPayinsRequestDto === undefined) {
            throw new runtime.RequiredError('getPayinsRequestDto','Required parameter requestParameters.getPayinsRequestDto was null or undefined when calling getPayins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPayinsRequestDtoToJSON(requestParameters.getPayinsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayinsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all payins
     */
    async getPayins(requestParameters: GetPayinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPayinsResponseDto> {
        const response = await this.getPayinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all payouts
     */
    async getPayoutsRaw(requestParameters: GetPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPayoutsResponseDto>> {
        if (requestParameters.getPayoutsRequestDto === null || requestParameters.getPayoutsRequestDto === undefined) {
            throw new runtime.RequiredError('getPayoutsRequestDto','Required parameter requestParameters.getPayoutsRequestDto was null or undefined when calling getPayouts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPayoutsRequestDtoToJSON(requestParameters.getPayoutsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayoutsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all payouts
     */
    async getPayouts(requestParameters: GetPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPayoutsResponseDto> {
        const response = await this.getPayoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscriptions
     */
    async getSubscriptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptionsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriptionsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get subscriptions
     */
    async getSubscriptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptionsResponseDto> {
        const response = await this.getSubscriptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Payout manually
     */
    async payoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Payout manually
     */
    async payout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.payoutRaw(initOverrides);
    }

    /**
     * Rerun payout
     */
    async rePayoutRaw(requestParameters: RePayoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.payoutId === null || requestParameters.payoutId === undefined) {
            throw new runtime.RequiredError('payoutId','Required parameter requestParameters.payoutId was null or undefined when calling rePayout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/test/payout/{payoutId}`.replace(`{${"payoutId"}}`, encodeURIComponent(String(requestParameters.payoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rerun payout
     */
    async rePayout(requestParameters: RePayoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rePayoutRaw(requestParameters, initOverrides);
    }

    /**
     * Circle notifications
     */
    async receiveNotificationsRaw(requestParameters: ReceiveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling receiveNotifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Circle notifications
     */
    async receiveNotifications(requestParameters: ReceiveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.receiveNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * Circle notifications register
     */
    async registerNotificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Circle notifications register
     */
    async registerNotifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.registerNotificationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register payin
     */
    async registerPayinRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/test/register/payin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register payin
     */
    async registerPayin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.registerPayinRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get register payin data
     */
    async registerPayinDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/test/register/payin/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Get register payin data
     */
    async registerPayinData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayinDataDto> {
        const response = await this.registerPayinDataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set default payin method
     */
    async setDefaultPayinMethodRaw(requestParameters: SetDefaultPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPayinMethodRequestDto === null || requestParameters.setPayinMethodRequestDto === undefined) {
            throw new runtime.RequiredError('setPayinMethodRequestDto','Required parameter requestParameters.setPayinMethodRequestDto was null or undefined when calling setDefaultPayinMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payin/default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPayinMethodRequestDtoToJSON(requestParameters.setPayinMethodRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set default payin method
     */
    async setDefaultPayinMethod(requestParameters: SetDefaultPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setDefaultPayinMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Set default payout method
     */
    async setDefaultPayoutMethodRaw(requestParameters: SetDefaultPayoutMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPayoutMethodRequestDto === null || requestParameters.setPayoutMethodRequestDto === undefined) {
            throw new runtime.RequiredError('setPayoutMethodRequestDto','Required parameter requestParameters.setPayoutMethodRequestDto was null or undefined when calling setDefaultPayoutMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/payout/default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPayoutMethodRequestDtoToJSON(requestParameters.setPayoutMethodRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set default payout method
     */
    async setDefaultPayoutMethod(requestParameters: SetDefaultPayoutMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setDefaultPayoutMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Set subscription payin method
     */
    async setSubscriptionPayinMethodRaw(requestParameters: SetSubscriptionPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling setSubscriptionPayinMethod.');
        }

        if (requestParameters.setPayinMethodRequestDto === null || requestParameters.setPayinMethodRequestDto === undefined) {
            throw new runtime.RequiredError('setPayinMethodRequestDto','Required parameter requestParameters.setPayinMethodRequestDto was null or undefined when calling setSubscriptionPayinMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/payment/subscription/method/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPayinMethodRequestDtoToJSON(requestParameters.setPayinMethodRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set subscription payin method
     */
    async setSubscriptionPayinMethod(requestParameters: SetSubscriptionPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setSubscriptionPayinMethodRaw(requestParameters, initOverrides);
    }

}

export const PaymentSecurityInfo = new Set<string>([
    "cancelPayin",
    "cancelSubscription",
    "createCircleBank",
    "createCircleCard",
    "deleteCircleBank",
    "deleteCircleCard",
    "entryCircleCard",
    "entryMetamaskCircleETH",
    "entryMetamaskCircleUSDC",
    "entryPhantomCircleUSDC",
    "getCircleBanks",
    "getCircleCard",
    "getCircleCards",
    "getDefaultPayinMethod",
    "getDefaultPayoutMethod",
    "getPayins",
    "getPayouts",
    "getSubscriptions",
    "payout",
    "registerPayin",
    "registerPayinData",
    "setDefaultPayinMethod",
    "setDefaultPayoutMethod",
    "setSubscriptionPayinMethod",
])
