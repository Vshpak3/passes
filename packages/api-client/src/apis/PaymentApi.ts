/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CircleCardPayinEntryRequestDto,
    CircleCardPayinEntryRequestDtoFromJSON,
    CircleCardPayinEntryRequestDtoToJSON,
    CircleCardPayinEntryResponseDto,
    CircleCardPayinEntryResponseDtoFromJSON,
    CircleCardPayinEntryResponseDtoToJSON,
    CircleCreateBankRequestDto,
    CircleCreateBankRequestDtoFromJSON,
    CircleCreateBankRequestDtoToJSON,
    CircleCreateCardAndExtraRequestDto,
    CircleCreateCardAndExtraRequestDtoFromJSON,
    CircleCreateCardAndExtraRequestDtoToJSON,
    CircleEncryptionKeyResponseDto,
    CircleEncryptionKeyResponseDtoFromJSON,
    CircleEncryptionKeyResponseDtoToJSON,
    CircleStatusResponseDto,
    CircleStatusResponseDtoFromJSON,
    CircleStatusResponseDtoToJSON,
    GetCircleBanksResponseDto,
    GetCircleBanksResponseDtoFromJSON,
    GetCircleBanksResponseDtoToJSON,
    GetCircleCardResponseDto,
    GetCircleCardResponseDtoFromJSON,
    GetCircleCardResponseDtoToJSON,
    GetCircleCardsResponseDto,
    GetCircleCardsResponseDtoFromJSON,
    GetCircleCardsResponseDtoToJSON,
    GetPayinMethodResponseDto,
    GetPayinMethodResponseDtoFromJSON,
    GetPayinMethodResponseDtoToJSON,
    GetPayinsRequestDto,
    GetPayinsRequestDtoFromJSON,
    GetPayinsRequestDtoToJSON,
    GetPayinsResponseDto,
    GetPayinsResponseDtoFromJSON,
    GetPayinsResponseDtoToJSON,
    GetPayoutMethodResponseDto,
    GetPayoutMethodResponseDtoFromJSON,
    GetPayoutMethodResponseDtoToJSON,
    GetPayoutsRequestDto,
    GetPayoutsRequestDtoFromJSON,
    GetPayoutsRequestDtoToJSON,
    GetPayoutsResponseDto,
    GetPayoutsResponseDtoFromJSON,
    GetPayoutsResponseDtoToJSON,
    GetSubscriptionsResponseDto,
    GetSubscriptionsResponseDtoFromJSON,
    GetSubscriptionsResponseDtoToJSON,
    MetamaskCircleETHEntryRequestDto,
    MetamaskCircleETHEntryRequestDtoFromJSON,
    MetamaskCircleETHEntryRequestDtoToJSON,
    MetamaskCircleETHEntryResponseDto,
    MetamaskCircleETHEntryResponseDtoFromJSON,
    MetamaskCircleETHEntryResponseDtoToJSON,
    MetamaskCircleUSDCEntryRequestDto,
    MetamaskCircleUSDCEntryRequestDtoFromJSON,
    MetamaskCircleUSDCEntryRequestDtoToJSON,
    MetamaskCircleUSDCEntryResponseDto,
    MetamaskCircleUSDCEntryResponseDtoFromJSON,
    MetamaskCircleUSDCEntryResponseDtoToJSON,
    PayinDataDto,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    PhantomCircleUSDCEntryRequestDto,
    PhantomCircleUSDCEntryRequestDtoFromJSON,
    PhantomCircleUSDCEntryRequestDtoToJSON,
    PhantomCircleUSDCEntryResponseDto,
    PhantomCircleUSDCEntryResponseDtoFromJSON,
    PhantomCircleUSDCEntryResponseDtoToJSON,
    RegisterPayinResponseDto,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    SetPayinMethodRequestDto,
    SetPayinMethodRequestDtoFromJSON,
    SetPayinMethodRequestDtoToJSON,
    SetPayoutMethodRequestDto,
    SetPayoutMethodRequestDtoFromJSON,
    SetPayoutMethodRequestDtoToJSON,
} from '../models';

export interface PaymentCancelPayinRequest {
    payinId: string;
}

export interface PaymentCancelSubscriptionRequest {
    subscriptionId: string;
}

export interface PaymentCreateCircleBankRequest {
    circleCreateBankRequestDto: CircleCreateBankRequestDto;
}

export interface PaymentCreateCircleCardRequest {
    circleCreateCardAndExtraRequestDto: CircleCreateCardAndExtraRequestDto;
}

export interface PaymentDeleteCircleBankRequest {
    circleBankId: string;
}

export interface PaymentDeleteCircleCardRequest {
    circleCardId: string;
}

export interface PaymentEntryCircleCardRequest {
    circleCardPayinEntryRequestDto: CircleCardPayinEntryRequestDto;
}

export interface PaymentEntryMetamaskCircleETHRequest {
    metamaskCircleETHEntryRequestDto: MetamaskCircleETHEntryRequestDto;
}

export interface PaymentEntryMetamaskCircleUSDCRequest {
    metamaskCircleUSDCEntryRequestDto: MetamaskCircleUSDCEntryRequestDto;
}

export interface PaymentEntryPhantomCircleUSDCRequest {
    phantomCircleUSDCEntryRequestDto: PhantomCircleUSDCEntryRequestDto;
}

export interface PaymentGetCircleCardRequest {
    cardId: string;
}

export interface PaymentGetPayinsRequest {
    getPayinsRequestDto: GetPayinsRequestDto;
}

export interface PaymentGetPayoutsRequest {
    getPayoutsRequestDto: GetPayoutsRequestDto;
}

export interface PaymentRePayoutRequest {
    payoutId: string;
}

export interface PaymentRecieveNotificationsRequest {
    body: string;
}

export interface PaymentSetDefaultPayinMethodRequest {
    setPayinMethodRequestDto: SetPayinMethodRequestDto;
}

export interface PaymentSetDefaultPayoutMethodRequest {
    setPayoutMethodRequestDto: SetPayoutMethodRequestDto;
}

export interface PaymentSetSubscriptionPayinMethodRequest {
    subscriptionId: string;
    setPayinMethodRequestDto: SetPayinMethodRequestDto;
}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI {

    /**
     * Cancel a payin
     */
    async paymentCancelPayinRaw(requestParameters: PaymentCancelPayinRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.payinId === null || requestParameters.payinId === undefined) {
            throw new runtime.RequiredError('payinId','Required parameter requestParameters.payinId was null or undefined when calling paymentCancelPayin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/payin/cancel/{payinId}`.replace(`{${"payinId"}}`, encodeURIComponent(String(requestParameters.payinId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel a payin
     */
    async paymentCancelPayin(requestParameters: PaymentCancelPayinRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentCancelPayinRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel subscription
     */
    async paymentCancelSubscriptionRaw(requestParameters: PaymentCancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling paymentCancelSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/subscription/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel subscription
     */
    async paymentCancelSubscription(requestParameters: PaymentCancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentCancelSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * Create a wire bank account
     */
    async paymentCreateCircleBankRaw(requestParameters: PaymentCreateCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CircleStatusResponseDto>> {
        if (requestParameters.circleCreateBankRequestDto === null || requestParameters.circleCreateBankRequestDto === undefined) {
            throw new runtime.RequiredError('circleCreateBankRequestDto','Required parameter requestParameters.circleCreateBankRequestDto was null or undefined when calling paymentCreateCircleBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/bank/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleCreateBankRequestDtoToJSON(requestParameters.circleCreateBankRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleStatusResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a wire bank account
     */
    async paymentCreateCircleBank(requestParameters: PaymentCreateCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CircleStatusResponseDto> {
        const response = await this.paymentCreateCircleBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a card
     */
    async paymentCreateCircleCardRaw(requestParameters: PaymentCreateCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CircleStatusResponseDto>> {
        if (requestParameters.circleCreateCardAndExtraRequestDto === null || requestParameters.circleCreateCardAndExtraRequestDto === undefined) {
            throw new runtime.RequiredError('circleCreateCardAndExtraRequestDto','Required parameter requestParameters.circleCreateCardAndExtraRequestDto was null or undefined when calling paymentCreateCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/card/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleCreateCardAndExtraRequestDtoToJSON(requestParameters.circleCreateCardAndExtraRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleStatusResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a card
     */
    async paymentCreateCircleCard(requestParameters: PaymentCreateCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CircleStatusResponseDto> {
        const response = await this.paymentCreateCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a wire bank account
     */
    async paymentDeleteCircleBankRaw(requestParameters: PaymentDeleteCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.circleBankId === null || requestParameters.circleBankId === undefined) {
            throw new runtime.RequiredError('circleBankId','Required parameter requestParameters.circleBankId was null or undefined when calling paymentDeleteCircleBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/bank/delete/{circleBankId}`.replace(`{${"circleBankId"}}`, encodeURIComponent(String(requestParameters.circleBankId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a wire bank account
     */
    async paymentDeleteCircleBank(requestParameters: PaymentDeleteCircleBankRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentDeleteCircleBankRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a card
     */
    async paymentDeleteCircleCardRaw(requestParameters: PaymentDeleteCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.circleCardId === null || requestParameters.circleCardId === undefined) {
            throw new runtime.RequiredError('circleCardId','Required parameter requestParameters.circleCardId was null or undefined when calling paymentDeleteCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/delete/{circleCardId}`.replace(`{${"circleCardId"}}`, encodeURIComponent(String(requestParameters.circleCardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a card
     */
    async paymentDeleteCircleCard(requestParameters: PaymentDeleteCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentDeleteCircleCardRaw(requestParameters, initOverrides);
    }

    /**
     * Circlecard payin entrypoint
     */
    async paymentEntryCircleCardRaw(requestParameters: PaymentEntryCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CircleCardPayinEntryResponseDto>> {
        if (requestParameters.circleCardPayinEntryRequestDto === null || requestParameters.circleCardPayinEntryRequestDto === undefined) {
            throw new runtime.RequiredError('circleCardPayinEntryRequestDto','Required parameter requestParameters.circleCardPayinEntryRequestDto was null or undefined when calling paymentEntryCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payin/entry/circle-card`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleCardPayinEntryRequestDtoToJSON(requestParameters.circleCardPayinEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleCardPayinEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Circlecard payin entrypoint
     */
    async paymentEntryCircleCard(requestParameters: PaymentEntryCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CircleCardPayinEntryResponseDto> {
        const response = await this.paymentEntryCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Metamask ETH payin entrypoint
     */
    async paymentEntryMetamaskCircleETHRaw(requestParameters: PaymentEntryMetamaskCircleETHRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MetamaskCircleETHEntryResponseDto>> {
        if (requestParameters.metamaskCircleETHEntryRequestDto === null || requestParameters.metamaskCircleETHEntryRequestDto === undefined) {
            throw new runtime.RequiredError('metamaskCircleETHEntryRequestDto','Required parameter requestParameters.metamaskCircleETHEntryRequestDto was null or undefined when calling paymentEntryMetamaskCircleETH.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payin/entry/metamask-eth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetamaskCircleETHEntryRequestDtoToJSON(requestParameters.metamaskCircleETHEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetamaskCircleETHEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Metamask ETH payin entrypoint
     */
    async paymentEntryMetamaskCircleETH(requestParameters: PaymentEntryMetamaskCircleETHRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MetamaskCircleETHEntryResponseDto> {
        const response = await this.paymentEntryMetamaskCircleETHRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Metamask USDC payin entrypoint
     */
    async paymentEntryMetamaskCircleUSDCRaw(requestParameters: PaymentEntryMetamaskCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MetamaskCircleUSDCEntryResponseDto>> {
        if (requestParameters.metamaskCircleUSDCEntryRequestDto === null || requestParameters.metamaskCircleUSDCEntryRequestDto === undefined) {
            throw new runtime.RequiredError('metamaskCircleUSDCEntryRequestDto','Required parameter requestParameters.metamaskCircleUSDCEntryRequestDto was null or undefined when calling paymentEntryMetamaskCircleUSDC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payin/entry/metamask-usdc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetamaskCircleUSDCEntryRequestDtoToJSON(requestParameters.metamaskCircleUSDCEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetamaskCircleUSDCEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Metamask USDC payin entrypoint
     */
    async paymentEntryMetamaskCircleUSDC(requestParameters: PaymentEntryMetamaskCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MetamaskCircleUSDCEntryResponseDto> {
        const response = await this.paymentEntryMetamaskCircleUSDCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Phantom USDC payin entrypoint
     */
    async paymentEntryPhantomCircleUSDCRaw(requestParameters: PaymentEntryPhantomCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PhantomCircleUSDCEntryResponseDto>> {
        if (requestParameters.phantomCircleUSDCEntryRequestDto === null || requestParameters.phantomCircleUSDCEntryRequestDto === undefined) {
            throw new runtime.RequiredError('phantomCircleUSDCEntryRequestDto','Required parameter requestParameters.phantomCircleUSDCEntryRequestDto was null or undefined when calling paymentEntryPhantomCircleUSDC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payin/entry/phantom-usdc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhantomCircleUSDCEntryRequestDtoToJSON(requestParameters.phantomCircleUSDCEntryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhantomCircleUSDCEntryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Phantom USDC payin entrypoint
     */
    async paymentEntryPhantomCircleUSDC(requestParameters: PaymentEntryPhantomCircleUSDCRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PhantomCircleUSDCEntryResponseDto> {
        const response = await this.paymentEntryPhantomCircleUSDCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get wire bank acccounts
     */
    async paymentGetCircleBanksRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetCircleBanksResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/banks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCircleBanksResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get wire bank acccounts
     */
    async paymentGetCircleBanks(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetCircleBanksResponseDto> {
        const response = await this.paymentGetCircleBanksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get card by id
     */
    async paymentGetCircleCardRaw(requestParameters: PaymentGetCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetCircleCardResponseDto>> {
        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling paymentGetCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCircleCardResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get card by id
     */
    async paymentGetCircleCard(requestParameters: PaymentGetCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetCircleCardResponseDto> {
        const response = await this.paymentGetCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cards
     */
    async paymentGetCircleCardsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetCircleCardsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCircleCardsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get cards
     */
    async paymentGetCircleCards(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetCircleCardsResponseDto> {
        const response = await this.paymentGetCircleCardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get circle encryption key
     */
    async paymentGetCircleEncryptionKeyRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CircleEncryptionKeyResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/key`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleEncryptionKeyResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get circle encryption key
     */
    async paymentGetCircleEncryptionKey(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CircleEncryptionKeyResponseDto> {
        const response = await this.paymentGetCircleEncryptionKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get default payin method
     */
    async paymentGetDefaultPayinMethodRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPayinMethodResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/payin/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayinMethodResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get default payin method
     */
    async paymentGetDefaultPayinMethod(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPayinMethodResponseDto> {
        const response = await this.paymentGetDefaultPayinMethodRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get default payout method
     */
    async paymentGetDefaultPayoutMethodRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPayoutMethodResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/payout/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayoutMethodResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get default payout method
     */
    async paymentGetDefaultPayoutMethod(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPayoutMethodResponseDto> {
        const response = await this.paymentGetDefaultPayoutMethodRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all payins
     */
    async paymentGetPayinsRaw(requestParameters: PaymentGetPayinsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPayinsResponseDto>> {
        if (requestParameters.getPayinsRequestDto === null || requestParameters.getPayinsRequestDto === undefined) {
            throw new runtime.RequiredError('getPayinsRequestDto','Required parameter requestParameters.getPayinsRequestDto was null or undefined when calling paymentGetPayins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPayinsRequestDtoToJSON(requestParameters.getPayinsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayinsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all payins
     */
    async paymentGetPayins(requestParameters: PaymentGetPayinsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPayinsResponseDto> {
        const response = await this.paymentGetPayinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all payouts
     */
    async paymentGetPayoutsRaw(requestParameters: PaymentGetPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPayoutsResponseDto>> {
        if (requestParameters.getPayoutsRequestDto === null || requestParameters.getPayoutsRequestDto === undefined) {
            throw new runtime.RequiredError('getPayoutsRequestDto','Required parameter requestParameters.getPayoutsRequestDto was null or undefined when calling paymentGetPayouts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPayoutsRequestDtoToJSON(requestParameters.getPayoutsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayoutsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all payouts
     */
    async paymentGetPayouts(requestParameters: PaymentGetPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPayoutsResponseDto> {
        const response = await this.paymentGetPayoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscriptions
     */
    async paymentGetSubscriptionsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetSubscriptionsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriptionsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get subscriptions
     */
    async paymentGetSubscriptions(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetSubscriptionsResponseDto> {
        const response = await this.paymentGetSubscriptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Payout manually
     */
    async paymentPayoutRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/payout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Payout manually
     */
    async paymentPayout(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentPayoutRaw(initOverrides);
    }

    /**
     * Payout everyone
     */
    async paymentPayoutAllRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/test/payout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Payout everyone
     */
    async paymentPayoutAll(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentPayoutAllRaw(initOverrides);
    }

    /**
     * Rerun payout
     */
    async paymentRePayoutRaw(requestParameters: PaymentRePayoutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.payoutId === null || requestParameters.payoutId === undefined) {
            throw new runtime.RequiredError('payoutId','Required parameter requestParameters.payoutId was null or undefined when calling paymentRePayout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/test/payout/{payoutId}`.replace(`{${"payoutId"}}`, encodeURIComponent(String(requestParameters.payoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rerun payout
     */
    async paymentRePayout(requestParameters: PaymentRePayoutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentRePayoutRaw(requestParameters, initOverrides);
    }

    /**
     * Circle notifications
     */
    async paymentRecieveNotificationsRaw(requestParameters: PaymentRecieveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling paymentRecieveNotifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Circle notifications
     */
    async paymentRecieveNotifications(requestParameters: PaymentRecieveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentRecieveNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * Circle notifications register
     */
    async paymentRegisterNotificationsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Circle notifications register
     */
    async paymentRegisterNotifications(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.paymentRegisterNotificationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register payin
     */
    async paymentRegisterPayinRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/test/register/payin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register payin
     */
    async paymentRegisterPayin(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.paymentRegisterPayinRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get register payin data
     */
    async paymentRegisterPayinDataRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/test/register/payin/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Get register payin data
     */
    async paymentRegisterPayinData(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PayinDataDto> {
        const response = await this.paymentRegisterPayinDataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set default payin method
     */
    async paymentSetDefaultPayinMethodRaw(requestParameters: PaymentSetDefaultPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPayinMethodRequestDto === null || requestParameters.setPayinMethodRequestDto === undefined) {
            throw new runtime.RequiredError('setPayinMethodRequestDto','Required parameter requestParameters.setPayinMethodRequestDto was null or undefined when calling paymentSetDefaultPayinMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payin/default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPayinMethodRequestDtoToJSON(requestParameters.setPayinMethodRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set default payin method
     */
    async paymentSetDefaultPayinMethod(requestParameters: PaymentSetDefaultPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentSetDefaultPayinMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Set default payout method
     */
    async paymentSetDefaultPayoutMethodRaw(requestParameters: PaymentSetDefaultPayoutMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPayoutMethodRequestDto === null || requestParameters.setPayoutMethodRequestDto === undefined) {
            throw new runtime.RequiredError('setPayoutMethodRequestDto','Required parameter requestParameters.setPayoutMethodRequestDto was null or undefined when calling paymentSetDefaultPayoutMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payout/default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPayoutMethodRequestDtoToJSON(requestParameters.setPayoutMethodRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set default payout method
     */
    async paymentSetDefaultPayoutMethod(requestParameters: PaymentSetDefaultPayoutMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentSetDefaultPayoutMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Set subscription payin method
     */
    async paymentSetSubscriptionPayinMethodRaw(requestParameters: PaymentSetSubscriptionPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling paymentSetSubscriptionPayinMethod.');
        }

        if (requestParameters.setPayinMethodRequestDto === null || requestParameters.setPayinMethodRequestDto === undefined) {
            throw new runtime.RequiredError('setPayinMethodRequestDto','Required parameter requestParameters.setPayinMethodRequestDto was null or undefined when calling paymentSetSubscriptionPayinMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/subscription/method/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPayinMethodRequestDtoToJSON(requestParameters.setPayinMethodRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set subscription payin method
     */
    async paymentSetSubscriptionPayinMethod(requestParameters: PaymentSetSubscriptionPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentSetSubscriptionPayinMethodRaw(requestParameters, initOverrides);
    }

}
