/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CardEntityDto,
    CardEntityDtoFromJSON,
    CardEntityDtoToJSON,
    CircleNotificationDto,
    CircleNotificationDtoFromJSON,
    CircleNotificationDtoToJSON,
    CreateBankDto,
    CreateBankDtoFromJSON,
    CreateBankDtoToJSON,
    CreateCardAndExtraDto,
    CreateCardAndExtraDtoFromJSON,
    CreateCardAndExtraDtoToJSON,
    CreateCardPaymentDto,
    CreateCardPaymentDtoFromJSON,
    CreateCardPaymentDtoToJSON,
    EncryptionKeyDto,
    EncryptionKeyDtoFromJSON,
    EncryptionKeyDtoToJSON,
    PayinMethodDto,
    PayinMethodDtoFromJSON,
    PayinMethodDtoToJSON,
    SolanaUSDCTransactionRequest,
    SolanaUSDCTransactionRequestFromJSON,
    SolanaUSDCTransactionRequestToJSON,
    StatusDto,
    StatusDtoFromJSON,
    StatusDtoToJSON,
} from '../models';

export interface PaymentCheckCircleCardStatusRequest {
    id: string;
}

export interface PaymentCheckCirclePaymentStatusRequest {
    id: string;
}

export interface PaymentCheckWireBankStatusRequest {
    id: string;
}

export interface PaymentCreateCircleCardRequest {
    createCardAndExtraDto: CreateCardAndExtraDto;
}

export interface PaymentCreateCircleWireBankAccountRequest {
    createBankDto: CreateBankDto;
}

export interface PaymentDeleteCircleCardRequest {
    circleCardId: string;
}

export interface PaymentGenerateSolanaUSDCTransactionMessageRequest {
    solanaUSDCTransactionRequest: SolanaUSDCTransactionRequest;
}

export interface PaymentRecieveNotificationsRequest {
    circleNotificationDto: CircleNotificationDto;
}

export interface PaymentSetDefaultPayinMethodRequest {
    payinMethodDto: PayinMethodDto;
}

export interface PaymentUpdateRequest {
    createCardPaymentDto: CreateCardPaymentDto;
}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI {

    /**
     * Check card status
     */
    async paymentCheckCircleCardStatusRaw(requestParameters: PaymentCheckCircleCardStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentCheckCircleCardStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Check card status
     */
    async paymentCheckCircleCardStatus(requestParameters: PaymentCheckCircleCardStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCheckCircleCardStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check payment status
     */
    async paymentCheckCirclePaymentStatusRaw(requestParameters: PaymentCheckCirclePaymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentCheckCirclePaymentStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Check payment status
     */
    async paymentCheckCirclePaymentStatus(requestParameters: PaymentCheckCirclePaymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCheckCirclePaymentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check wire bank status
     */
    async paymentCheckWireBankStatusRaw(requestParameters: PaymentCheckWireBankStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentCheckWireBankStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/bank/wire/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Check wire bank status
     */
    async paymentCheckWireBankStatus(requestParameters: PaymentCheckWireBankStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCheckWireBankStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a card
     */
    async paymentCreateCircleCardRaw(requestParameters: PaymentCreateCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.createCardAndExtraDto === null || requestParameters.createCardAndExtraDto === undefined) {
            throw new runtime.RequiredError('createCardAndExtraDto','Required parameter requestParameters.createCardAndExtraDto was null or undefined when calling paymentCreateCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/card/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCardAndExtraDtoToJSON(requestParameters.createCardAndExtraDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Creates a card
     */
    async paymentCreateCircleCard(requestParameters: PaymentCreateCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCreateCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create wire bank account
     */
    async paymentCreateCircleWireBankAccountRaw(requestParameters: PaymentCreateCircleWireBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.createBankDto === null || requestParameters.createBankDto === undefined) {
            throw new runtime.RequiredError('createBankDto','Required parameter requestParameters.createBankDto was null or undefined when calling paymentCreateCircleWireBankAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/bank/wire/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBankDtoToJSON(requestParameters.createBankDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Create wire bank account
     */
    async paymentCreateCircleWireBankAccount(requestParameters: PaymentCreateCircleWireBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentCreateCircleWireBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a card
     */
    async paymentDeleteCircleCardRaw(requestParameters: PaymentDeleteCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.circleCardId === null || requestParameters.circleCardId === undefined) {
            throw new runtime.RequiredError('circleCardId','Required parameter requestParameters.circleCardId was null or undefined when calling paymentDeleteCircleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/card/delete/{circleCardId}`.replace(`{${"circleCardId"}}`, encodeURIComponent(String(requestParameters.circleCardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deletes a card
     */
    async paymentDeleteCircleCard(requestParameters: PaymentDeleteCircleCardRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.paymentDeleteCircleCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get solana USDC transaction to sign
     */
    async paymentGenerateSolanaUSDCTransactionMessageRaw(requestParameters: PaymentGenerateSolanaUSDCTransactionMessageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.solanaUSDCTransactionRequest === null || requestParameters.solanaUSDCTransactionRequest === undefined) {
            throw new runtime.RequiredError('solanaUSDCTransactionRequest','Required parameter requestParameters.solanaUSDCTransactionRequest was null or undefined when calling paymentGenerateSolanaUSDCTransactionMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/sol/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolanaUSDCTransactionRequestToJSON(requestParameters.solanaUSDCTransactionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get solana USDC transaction to sign
     */
    async paymentGenerateSolanaUSDCTransactionMessage(requestParameters: PaymentGenerateSolanaUSDCTransactionMessageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.paymentGenerateSolanaUSDCTransactionMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cards
     */
    async paymentGetCircleCardsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CardEntityDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardEntityDtoFromJSON));
    }

    /**
     * Get cards
     */
    async paymentGetCircleCards(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CardEntityDto>> {
        const response = await this.paymentGetCircleCardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get circle encryption key
     */
    async paymentGetCircleEncryptionKeyRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EncryptionKeyDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/key`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncryptionKeyDtoFromJSON(jsonValue));
    }

    /**
     * Get circle encryption key
     */
    async paymentGetCircleEncryptionKey(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EncryptionKeyDto> {
        const response = await this.paymentGetCircleEncryptionKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get default payin
     */
    async paymentGetDefaultPayinRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PayinMethodDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/payin/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinMethodDtoFromJSON(jsonValue));
    }

    /**
     * Get default payin
     */
    async paymentGetDefaultPayin(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PayinMethodDto> {
        const response = await this.paymentGetDefaultPayinRaw(initOverrides);
        return await response.value();
    }

    /**
     * Circle notifications
     */
    async paymentRecieveNotificationsRaw(requestParameters: PaymentRecieveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.circleNotificationDto === null || requestParameters.circleNotificationDto === undefined) {
            throw new runtime.RequiredError('circleNotificationDto','Required parameter requestParameters.circleNotificationDto was null or undefined when calling paymentRecieveNotifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CircleNotificationDtoToJSON(requestParameters.circleNotificationDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Circle notifications
     */
    async paymentRecieveNotifications(requestParameters: PaymentRecieveNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentRecieveNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * Circle notifications register
     */
    async paymentRegisterNotificationsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/payment/circle/notification`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Circle notifications register
     */
    async paymentRegisterNotifications(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.paymentRegisterNotificationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set default payin
     */
    async paymentSetDefaultPayinMethodRaw(requestParameters: PaymentSetDefaultPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.payinMethodDto === null || requestParameters.payinMethodDto === undefined) {
            throw new runtime.RequiredError('payinMethodDto','Required parameter requestParameters.payinMethodDto was null or undefined when calling paymentSetDefaultPayinMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/payin/default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayinMethodDtoToJSON(requestParameters.payinMethodDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set default payin
     */
    async paymentSetDefaultPayinMethod(requestParameters: PaymentSetDefaultPayinMethodRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.paymentSetDefaultPayinMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Make card payment
     */
    async paymentUpdateRaw(requestParameters: PaymentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StatusDto>> {
        if (requestParameters.createCardPaymentDto === null || requestParameters.createCardPaymentDto === undefined) {
            throw new runtime.RequiredError('createCardPaymentDto','Required parameter requestParameters.createCardPaymentDto was null or undefined when calling paymentUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/payment/pay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCardPaymentDtoToJSON(requestParameters.createCardPaymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusDtoFromJSON(jsonValue));
    }

    /**
     * Make card payment
     */
    async paymentUpdate(requestParameters: PaymentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StatusDto> {
        const response = await this.paymentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
