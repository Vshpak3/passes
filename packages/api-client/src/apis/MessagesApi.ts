/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateBatchMessageRequestDto,
  GetChannelRequestDto,
  GetChannelResponseDto,
  GetChannelsRequestDto,
  GetChannelsResponseDto,
  GetFreeMesssagesResponseDto,
  GetMessageResponseDto,
  PayinDataDto,
  PurchaseMessageRequestDto,
  RegisterPayinResponseDto,
  SendMessageRequestDto,
  TokenResponseDto,
  UpdateChannelSettingsRequestDto,
} from '../models';
import {
    CreateBatchMessageRequestDtoFromJSON,
    CreateBatchMessageRequestDtoToJSON,
    GetChannelRequestDtoFromJSON,
    GetChannelRequestDtoToJSON,
    GetChannelResponseDtoFromJSON,
    GetChannelResponseDtoToJSON,
    GetChannelsRequestDtoFromJSON,
    GetChannelsRequestDtoToJSON,
    GetChannelsResponseDtoFromJSON,
    GetChannelsResponseDtoToJSON,
    GetFreeMesssagesResponseDtoFromJSON,
    GetFreeMesssagesResponseDtoToJSON,
    GetMessageResponseDtoFromJSON,
    GetMessageResponseDtoToJSON,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    PurchaseMessageRequestDtoFromJSON,
    PurchaseMessageRequestDtoToJSON,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    SendMessageRequestDtoFromJSON,
    SendMessageRequestDtoToJSON,
    TokenResponseDtoFromJSON,
    TokenResponseDtoToJSON,
    UpdateChannelSettingsRequestDtoFromJSON,
    UpdateChannelSettingsRequestDtoToJSON,
} from '../models';

export interface GetChannelRequest {
    getChannelRequestDto: GetChannelRequestDto;
}

export interface GetChannelsRequest {
    getChannelsRequestDto: GetChannelsRequestDto;
}

export interface GetFreeMessagesRequest {
    channelId: string;
}

export interface GetMessageRequest {
    messageId: string;
}

export interface GetOrCreateChannelRequest {
    getChannelRequestDto: GetChannelRequestDto;
}

export interface MassSendRequest {
    createBatchMessageRequestDto: CreateBatchMessageRequestDto;
}

export interface ReadMessagesRequest {
    channelId: string;
}

export interface RegisterPurchaseMessageRequest {
    purchaseMessageRequestDto: PurchaseMessageRequestDto;
}

export interface RegisterPurchaseMessageDataRequest {
    purchaseMessageRequestDto: PurchaseMessageRequestDto;
}

export interface SendMessageRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface SendMessageDataRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface UpdateChannelSettingsRequest {
    updateChannelSettingsRequestDto: UpdateChannelSettingsRequestDto;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Gets a channel
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelResponseDto>> {
        if (requestParameters.getChannelRequestDto === null || requestParameters.getChannelRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelRequestDto','Required parameter requestParameters.getChannelRequestDto was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelRequestDtoToJSON(requestParameters.getChannelRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a channel
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelResponseDto> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channels
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelsResponseDto>> {
        if (requestParameters.getChannelsRequestDto === null || requestParameters.getChannelsRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelsRequestDto','Required parameter requestParameters.getChannelsRequestDto was null or undefined when calling getChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelsRequestDtoToJSON(requestParameters.getChannelsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channels
     */
    async getChannels(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelsResponseDto> {
        const response = await this.getChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get free chat messages
     */
    async getFreeMessagesRaw(requestParameters: GetFreeMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFreeMesssagesResponseDto>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getFreeMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/free-messages/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFreeMesssagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get free chat messages
     */
    async getFreeMessages(requestParameters: GetFreeMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFreeMesssagesResponseDto> {
        const response = await this.getFreeMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get message
     */
    async getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessageResponseDto>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/message/retreive/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessageResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get message
     */
    async getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessageResponseDto> {
        const response = await this.getMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status as read
     */
    async getMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get status as read
     */
    async getMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMessagesRaw(initOverrides);
    }

    /**
     * Gets or creates a channel
     */
    async getOrCreateChannelRaw(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelResponseDto>> {
        if (requestParameters.getChannelRequestDto === null || requestParameters.getChannelRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelRequestDto','Required parameter requestParameters.getChannelRequestDto was null or undefined when calling getOrCreateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/channel/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelRequestDtoToJSON(requestParameters.getChannelRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets or creates a channel
     */
    async getOrCreateChannel(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelResponseDto> {
        const response = await this.getOrCreateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets token
     */
    async getTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets token
     */
    async getToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.getTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Batch message
     */
    async massSendRaw(requestParameters: MassSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBatchMessageRequestDto === null || requestParameters.createBatchMessageRequestDto === undefined) {
            throw new runtime.RequiredError('createBatchMessageRequestDto','Required parameter requestParameters.createBatchMessageRequestDto was null or undefined when calling massSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchMessageRequestDtoToJSON(requestParameters.createBatchMessageRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Batch message
     */
    async massSend(requestParameters: MassSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.massSendRaw(requestParameters, initOverrides);
    }

    /**
     * Set status as read
     */
    async readMessagesRaw(requestParameters: ReadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling readMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/read/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set status as read
     */
    async readMessages(requestParameters: ReadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.readMessagesRaw(requestParameters, initOverrides);
    }

    /**
     * Register purchase message payin
     */
    async registerPurchaseMessageRaw(requestParameters: RegisterPurchaseMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.purchaseMessageRequestDto === null || requestParameters.purchaseMessageRequestDto === undefined) {
            throw new runtime.RequiredError('purchaseMessageRequestDto','Required parameter requestParameters.purchaseMessageRequestDto was null or undefined when calling registerPurchaseMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/pay/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseMessageRequestDtoToJSON(requestParameters.purchaseMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register purchase message payin
     */
    async registerPurchaseMessage(requestParameters: RegisterPurchaseMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.registerPurchaseMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get register purchase message data
     */
    async registerPurchaseMessageDataRaw(requestParameters: RegisterPurchaseMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.purchaseMessageRequestDto === null || requestParameters.purchaseMessageRequestDto === undefined) {
            throw new runtime.RequiredError('purchaseMessageRequestDto','Required parameter requestParameters.purchaseMessageRequestDto was null or undefined when calling registerPurchaseMessageData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/pay/data/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseMessageRequestDtoToJSON(requestParameters.purchaseMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Get register purchase message data
     */
    async registerPurchaseMessageData(requestParameters: RegisterPurchaseMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayinDataDto> {
        const response = await this.registerPurchaseMessageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register sending message
     */
    async sendMessageRaw(requestParameters: SendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message
     */
    async sendMessage(requestParameters: SendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.sendMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register sending message data
     */
    async sendMessageDataRaw(requestParameters: SendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling sendMessageData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message data
     */
    async sendMessageData(requestParameters: SendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayinDataDto> {
        const response = await this.sendMessageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeChannelUpdatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/subscribe-channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeChannelUpdates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeChannelUpdatesRaw(initOverrides);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/subscribe-messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeMessagesRaw(initOverrides);
    }

    /**
     * Update channels settings
     */
    async updateChannelSettingsRaw(requestParameters: UpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateChannelSettingsRequestDto === null || requestParameters.updateChannelSettingsRequestDto === undefined) {
            throw new runtime.RequiredError('updateChannelSettingsRequestDto','Required parameter requestParameters.updateChannelSettingsRequestDto was null or undefined when calling updateChannelSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/messages/channel/settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChannelSettingsRequestDtoToJSON(requestParameters.updateChannelSettingsRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update channels settings
     */
    async updateChannelSettings(requestParameters: UpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateChannelSettingsRaw(requestParameters, initOverrides);
    }

}

export const MessagesSecurityInfo = new Set<string>([
    "getChannel",
    "getChannels",
    "getFreeMessages",
    "getMessage",
    "getMessages",
    "getOrCreateChannel",
    "getToken",
    "massSend",
    "readMessages",
    "registerPurchaseMessage",
    "registerPurchaseMessageData",
    "sendMessage",
    "sendMessageData",
    "subscribeChannelUpdates",
    "subscribeMessages",
    "updateChannelSettings",
])
