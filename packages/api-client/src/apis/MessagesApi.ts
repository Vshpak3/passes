/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateBatchMessageRequestDto,
    CreateBatchMessageRequestDtoFromJSON,
    CreateBatchMessageRequestDtoToJSON,
    CreateChannelRequestDto,
    CreateChannelRequestDtoFromJSON,
    CreateChannelRequestDtoToJSON,
    GetChannelResponseDto,
    GetChannelResponseDtoFromJSON,
    GetChannelResponseDtoToJSON,
    GetChannelSettingsResponseDto,
    GetChannelSettingsResponseDtoFromJSON,
    GetChannelSettingsResponseDtoToJSON,
    GetChannelStatsResponseDto,
    GetChannelStatsResponseDtoFromJSON,
    GetChannelStatsResponseDtoToJSON,
    GetMessagesResponseDto,
    GetMessagesResponseDtoFromJSON,
    GetMessagesResponseDtoToJSON,
    PayinDataDto,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    RegisterPayinResponseDto,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    SendMessageRequestDto,
    SendMessageRequestDtoFromJSON,
    SendMessageRequestDtoToJSON,
    TokenResponseDto,
    TokenResponseDtoFromJSON,
    TokenResponseDtoToJSON,
    UpdateChannelSettingsRequestDto,
    UpdateChannelSettingsRequestDtoFromJSON,
    UpdateChannelSettingsRequestDtoToJSON,
} from '../models';

export interface MessagesCreateChannelRequest {
    createChannelRequestDto: CreateChannelRequestDto;
}

export interface MessagesGetChannelSettingsRequest {
    channelId: string;
}

export interface MessagesMassSendRequest {
    createBatchMessageRequestDto: CreateBatchMessageRequestDto;
}

export interface MessagesSendRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface MessagesSendMessageDataRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface MessagesUpdateChannelSettingsRequest {
    channelId: string;
    updateChannelSettingsRequestDto: UpdateChannelSettingsRequestDto;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Creates a channel
     */
    async messagesCreateChannelRaw(requestParameters: MessagesCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetChannelResponseDto>> {
        if (requestParameters.createChannelRequestDto === null || requestParameters.createChannelRequestDto === undefined) {
            throw new runtime.RequiredError('createChannelRequestDto','Required parameter requestParameters.createChannelRequestDto was null or undefined when calling messagesCreateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages/channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChannelRequestDtoToJSON(requestParameters.createChannelRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a channel
     */
    async messagesCreateChannel(requestParameters: MessagesCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetChannelResponseDto> {
        const response = await this.messagesCreateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channels settings
     */
    async messagesGetChannelSettingsRaw(requestParameters: MessagesGetChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetChannelSettingsResponseDto>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling messagesGetChannelSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages/channel/settings/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelSettingsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channels settings
     */
    async messagesGetChannelSettings(requestParameters: MessagesGetChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetChannelSettingsResponseDto> {
        const response = await this.messagesGetChannelSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channels stats
     */
    async messagesGetChannelsStatsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetChannelStatsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages/channel/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelStatsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channels stats
     */
    async messagesGetChannelsStats(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetChannelStatsResponseDto> {
        const response = await this.messagesGetChannelsStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get completed tipped messages
     */
    async messagesGetCompletedTippedMessagesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetMessagesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages/completed-tipped`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get completed tipped messages
     */
    async messagesGetCompletedTippedMessages(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetMessagesResponseDto> {
        const response = await this.messagesGetCompletedTippedMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get pending messages
     */
    async messagesGetPendingRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetMessagesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages/pending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get pending messages
     */
    async messagesGetPending(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetMessagesResponseDto> {
        const response = await this.messagesGetPendingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets token
     */
    async messagesGetTokenRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets token
     */
    async messagesGetToken(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TokenResponseDto> {
        const response = await this.messagesGetTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Batch message
     */
    async messagesMassSendRaw(requestParameters: MessagesMassSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBatchMessageRequestDto === null || requestParameters.createBatchMessageRequestDto === undefined) {
            throw new runtime.RequiredError('createBatchMessageRequestDto','Required parameter requestParameters.createBatchMessageRequestDto was null or undefined when calling messagesMassSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchMessageRequestDtoToJSON(requestParameters.createBatchMessageRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Batch message
     */
    async messagesMassSend(requestParameters: MessagesMassSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.messagesMassSendRaw(requestParameters, initOverrides);
    }

    /**
     * Register sending message
     */
    async messagesSendRaw(requestParameters: MessagesSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling messagesSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message
     */
    async messagesSend(requestParameters: MessagesSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.messagesSendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register sending message data
     */
    async messagesSendMessageDataRaw(requestParameters: MessagesSendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling messagesSendMessageData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message data
     */
    async messagesSendMessageData(requestParameters: MessagesSendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PayinDataDto> {
        const response = await this.messagesSendMessageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update channels settings
     */
    async messagesUpdateChannelSettingsRaw(requestParameters: MessagesUpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling messagesUpdateChannelSettings.');
        }

        if (requestParameters.updateChannelSettingsRequestDto === null || requestParameters.updateChannelSettingsRequestDto === undefined) {
            throw new runtime.RequiredError('updateChannelSettingsRequestDto','Required parameter requestParameters.updateChannelSettingsRequestDto was null or undefined when calling messagesUpdateChannelSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages/channel/settings/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChannelSettingsRequestDtoToJSON(requestParameters.updateChannelSettingsRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update channels settings
     */
    async messagesUpdateChannelSettings(requestParameters: MessagesUpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.messagesUpdateChannelSettingsRaw(requestParameters, initOverrides);
    }

}
