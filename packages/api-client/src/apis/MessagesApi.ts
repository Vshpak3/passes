/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateBatchMessageRequestDto,
  GetChannelRequestDto,
  GetChannelResponseDto,
  GetChannelSettingsResponseDto,
  GetChannelStatsRequestDto,
  GetChannelStatsResponseDto,
  GetFreeMesssagesResponseDto,
  GetMessagesResponseDto,
  PayinDataDto,
  RegisterPayinResponseDto,
  SendMessageRequestDto,
  TokenResponseDto,
  UpdateChannelSettingsRequestDto,
} from '../models';
import {
    CreateBatchMessageRequestDtoFromJSON,
    CreateBatchMessageRequestDtoToJSON,
    GetChannelRequestDtoFromJSON,
    GetChannelRequestDtoToJSON,
    GetChannelResponseDtoFromJSON,
    GetChannelResponseDtoToJSON,
    GetChannelSettingsResponseDtoFromJSON,
    GetChannelSettingsResponseDtoToJSON,
    GetChannelStatsRequestDtoFromJSON,
    GetChannelStatsRequestDtoToJSON,
    GetChannelStatsResponseDtoFromJSON,
    GetChannelStatsResponseDtoToJSON,
    GetFreeMesssagesResponseDtoFromJSON,
    GetFreeMesssagesResponseDtoToJSON,
    GetMessagesResponseDtoFromJSON,
    GetMessagesResponseDtoToJSON,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    SendMessageRequestDtoFromJSON,
    SendMessageRequestDtoToJSON,
    TokenResponseDtoFromJSON,
    TokenResponseDtoToJSON,
    UpdateChannelSettingsRequestDtoFromJSON,
    UpdateChannelSettingsRequestDtoToJSON,
} from '../models';

export interface GetChannelRequest {
    getChannelRequestDto: GetChannelRequestDto;
}

export interface GetChannelSettingsRequest {
    channelId: string;
}

export interface GetChannelsStatsRequest {
    getChannelStatsRequestDto: GetChannelStatsRequestDto;
}

export interface GetFreeMessagesRequest {
    creatorId: string;
    channelId: string;
}

export interface MassSendRequest {
    createBatchMessageRequestDto: CreateBatchMessageRequestDto;
}

export interface SendMessageRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface SendMessageDataRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface UpdateChannelSettingsRequest {
    channelId: string;
    updateChannelSettingsRequestDto: UpdateChannelSettingsRequestDto;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Gets a channel
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelResponseDto>> {
        if (requestParameters.getChannelRequestDto === null || requestParameters.getChannelRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelRequestDto','Required parameter requestParameters.getChannelRequestDto was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelRequestDtoToJSON(requestParameters.getChannelRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a channel
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelResponseDto> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channels settings
     */
    async getChannelSettingsRaw(requestParameters: GetChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelSettingsResponseDto>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getChannelSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/channel/settings/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelSettingsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channels settings
     */
    async getChannelSettings(requestParameters: GetChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelSettingsResponseDto> {
        const response = await this.getChannelSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channels
     */
    async getChannelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get channels
     */
    async getChannels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getChannelsRaw(initOverrides);
    }

    /**
     * Get channels stats
     */
    async getChannelsStatsRaw(requestParameters: GetChannelsStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelStatsResponseDto>> {
        if (requestParameters.getChannelStatsRequestDto === null || requestParameters.getChannelStatsRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelStatsRequestDto','Required parameter requestParameters.getChannelStatsRequestDto was null or undefined when calling getChannelsStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/channel/stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelStatsRequestDtoToJSON(requestParameters.getChannelStatsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelStatsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channels stats
     */
    async getChannelsStats(requestParameters: GetChannelsStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelStatsResponseDto> {
        const response = await this.getChannelsStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get completed tipped messages
     */
    async getCompletedTippedMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessagesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/completed-tipped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get completed tipped messages
     */
    async getCompletedTippedMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessagesResponseDto> {
        const response = await this.getCompletedTippedMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get free chat messages
     */
    async getFreeMessagesRaw(requestParameters: GetFreeMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFreeMesssagesResponseDto>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling getFreeMessages.');
        }

        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getFreeMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/free-messages/{creatorId}/{channelId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))).replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFreeMesssagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get free chat messages
     */
    async getFreeMessages(requestParameters: GetFreeMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFreeMesssagesResponseDto> {
        const response = await this.getFreeMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status as read
     */
    async getMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get status as read
     */
    async getMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMessagesRaw(initOverrides);
    }

    /**
     * Get pending messages
     */
    async getPendingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessagesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/pending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get pending messages
     */
    async getPending(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessagesResponseDto> {
        const response = await this.getPendingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets token
     */
    async getTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets token
     */
    async getToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.getTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Batch message
     */
    async massSendRaw(requestParameters: MassSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBatchMessageRequestDto === null || requestParameters.createBatchMessageRequestDto === undefined) {
            throw new runtime.RequiredError('createBatchMessageRequestDto','Required parameter requestParameters.createBatchMessageRequestDto was null or undefined when calling massSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchMessageRequestDtoToJSON(requestParameters.createBatchMessageRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Batch message
     */
    async massSend(requestParameters: MassSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.massSendRaw(requestParameters, initOverrides);
    }

    /**
     * Set status as read
     */
    async readMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set status as read
     */
    async readMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.readMessagesRaw(initOverrides);
    }

    /**
     * Register sending message
     */
    async sendMessageRaw(requestParameters: SendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message
     */
    async sendMessage(requestParameters: SendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.sendMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register sending message data
     */
    async sendMessageDataRaw(requestParameters: SendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling sendMessageData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message data
     */
    async sendMessageData(requestParameters: SendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayinDataDto> {
        const response = await this.sendMessageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/subscribe-messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeMessagesRaw(initOverrides);
    }

    /**
     * Update channels settings
     */
    async updateChannelSettingsRaw(requestParameters: UpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling updateChannelSettings.');
        }

        if (requestParameters.updateChannelSettingsRequestDto === null || requestParameters.updateChannelSettingsRequestDto === undefined) {
            throw new runtime.RequiredError('updateChannelSettingsRequestDto','Required parameter requestParameters.updateChannelSettingsRequestDto was null or undefined when calling updateChannelSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/messages/channel/settings/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChannelSettingsRequestDtoToJSON(requestParameters.updateChannelSettingsRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update channels settings
     */
    async updateChannelSettings(requestParameters: UpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateChannelSettingsRaw(requestParameters, initOverrides);
    }

}

export const MessagesSecurityInfo = new Set<string>([
    "getChannel",
    "getChannelSettings",
    "getChannels",
    "getChannelsStats",
    "getCompletedTippedMessages",
    "getFreeMessages",
    "getMessages",
    "getPending",
    "getToken",
    "massSend",
    "readMessages",
    "sendMessage",
    "sendMessageData",
    "subscribeMessages",
    "updateChannelSettings",
])
