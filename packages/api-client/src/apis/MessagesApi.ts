/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanResponseDto,
  CreateBatchMessageRequestDto,
  CreateWelcomeMessageRequestDto,
  GetChannelMesssageInfoResponseDto,
  GetChannelRequestDto,
  GetChannelResponseDto,
  GetChannelsRequestDto,
  GetChannelsResponseDto,
  GetMessageBuyersRequestDto,
  GetMessageBuyersResponseDto,
  GetMessageResponseDto,
  GetMessagesRequestDto,
  GetMessagesResponseDto,
  GetPaidMessageHistoryRequestDto,
  GetPaidMessageHistoryResponseDto,
  GetPaidMessagesRequestDto,
  GetPaidMessagesResponseDto,
  GetWelcomeMessageResponseDto,
  PayinDataDto,
  PurchaseMessageRequestDto,
  ReadChannelRequestDto,
  RegisterPayinResponseDto,
  SendMessageRequestDto,
  UpdateChannelSettingsRequestDto,
} from '../models';
import {
    BooleanResponseDtoFromJSON,
    BooleanResponseDtoToJSON,
    CreateBatchMessageRequestDtoFromJSON,
    CreateBatchMessageRequestDtoToJSON,
    CreateWelcomeMessageRequestDtoFromJSON,
    CreateWelcomeMessageRequestDtoToJSON,
    GetChannelMesssageInfoResponseDtoFromJSON,
    GetChannelMesssageInfoResponseDtoToJSON,
    GetChannelRequestDtoFromJSON,
    GetChannelRequestDtoToJSON,
    GetChannelResponseDtoFromJSON,
    GetChannelResponseDtoToJSON,
    GetChannelsRequestDtoFromJSON,
    GetChannelsRequestDtoToJSON,
    GetChannelsResponseDtoFromJSON,
    GetChannelsResponseDtoToJSON,
    GetMessageBuyersRequestDtoFromJSON,
    GetMessageBuyersRequestDtoToJSON,
    GetMessageBuyersResponseDtoFromJSON,
    GetMessageBuyersResponseDtoToJSON,
    GetMessageResponseDtoFromJSON,
    GetMessageResponseDtoToJSON,
    GetMessagesRequestDtoFromJSON,
    GetMessagesRequestDtoToJSON,
    GetMessagesResponseDtoFromJSON,
    GetMessagesResponseDtoToJSON,
    GetPaidMessageHistoryRequestDtoFromJSON,
    GetPaidMessageHistoryRequestDtoToJSON,
    GetPaidMessageHistoryResponseDtoFromJSON,
    GetPaidMessageHistoryResponseDtoToJSON,
    GetPaidMessagesRequestDtoFromJSON,
    GetPaidMessagesRequestDtoToJSON,
    GetPaidMessagesResponseDtoFromJSON,
    GetPaidMessagesResponseDtoToJSON,
    GetWelcomeMessageResponseDtoFromJSON,
    GetWelcomeMessageResponseDtoToJSON,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    PurchaseMessageRequestDtoFromJSON,
    PurchaseMessageRequestDtoToJSON,
    ReadChannelRequestDtoFromJSON,
    ReadChannelRequestDtoToJSON,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    SendMessageRequestDtoFromJSON,
    SendMessageRequestDtoToJSON,
    UpdateChannelSettingsRequestDtoFromJSON,
    UpdateChannelSettingsRequestDtoToJSON,
} from '../models';

export interface CreateWelcomeMessageRequest {
    createWelcomeMessageRequestDto: CreateWelcomeMessageRequestDto;
}

export interface GetChannelRequest {
    getChannelRequestDto: GetChannelRequestDto;
}

export interface GetChannelMessageInfoRequest {
    channelId: string;
}

export interface GetChannelsRequest {
    getChannelsRequestDto: GetChannelsRequestDto;
}

export interface GetMessageRequest {
    messageId: string;
}

export interface GetMessageBuyersRequest {
    getMessageBuyersRequestDto: GetMessageBuyersRequestDto;
}

export interface GetMessagesRequest {
    getMessagesRequestDto: GetMessagesRequestDto;
}

export interface GetOrCreateChannelRequest {
    getChannelRequestDto: GetChannelRequestDto;
}

export interface GetPaidMessagesRequest {
    getPaidMessagesRequestDto: GetPaidMessagesRequestDto;
}

export interface GetPaidMessagesHistoryRequest {
    getPaidMessageHistoryRequestDto: GetPaidMessageHistoryRequestDto;
}

export interface HidePaidMessageRequest {
    paidMessageId: string;
}

export interface MassSendRequest {
    createBatchMessageRequestDto: CreateBatchMessageRequestDto;
}

export interface ReadMessagesRequest {
    readChannelRequestDto: ReadChannelRequestDto;
}

export interface RegisterPurchaseMessageRequest {
    purchaseMessageRequestDto: PurchaseMessageRequestDto;
}

export interface RegisterPurchaseMessageDataRequest {
    purchaseMessageRequestDto: PurchaseMessageRequestDto;
}

export interface SendMessageRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface SendMessageDataRequest {
    sendMessageRequestDto: SendMessageRequestDto;
}

export interface UnsendPaidMessageRequest {
    paidMessageId: string;
}

export interface UpdateChannelSettingsRequest {
    updateChannelSettingsRequestDto: UpdateChannelSettingsRequestDto;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Create welcome message
     */
    async createWelcomeMessageRaw(requestParameters: CreateWelcomeMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.createWelcomeMessageRequestDto === null || requestParameters.createWelcomeMessageRequestDto === undefined) {
            throw new runtime.RequiredError('createWelcomeMessageRequestDto','Required parameter requestParameters.createWelcomeMessageRequestDto was null or undefined when calling createWelcomeMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/welcome-message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWelcomeMessageRequestDtoToJSON(requestParameters.createWelcomeMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create welcome message
     */
    async createWelcomeMessage(requestParameters: CreateWelcomeMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.createWelcomeMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a channel
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelResponseDto>> {
        if (requestParameters.getChannelRequestDto === null || requestParameters.getChannelRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelRequestDto','Required parameter requestParameters.getChannelRequestDto was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelRequestDtoToJSON(requestParameters.getChannelRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a channel
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelResponseDto> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channel message info
     */
    async getChannelMessageInfoRaw(requestParameters: GetChannelMessageInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelMesssageInfoResponseDto>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getChannelMessageInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/message-info/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelMesssageInfoResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channel message info
     */
    async getChannelMessageInfo(requestParameters: GetChannelMessageInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelMesssageInfoResponseDto> {
        const response = await this.getChannelMessageInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get channels
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelsResponseDto>> {
        if (requestParameters.getChannelsRequestDto === null || requestParameters.getChannelsRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelsRequestDto','Required parameter requestParameters.getChannelsRequestDto was null or undefined when calling getChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelsRequestDtoToJSON(requestParameters.getChannelsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get channels
     */
    async getChannels(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelsResponseDto> {
        const response = await this.getChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get message
     */
    async getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessageResponseDto>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/message/retreive/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessageResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get message
     */
    async getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessageResponseDto> {
        const response = await this.getMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets purchased
     */
    async getMessageBuyersRaw(requestParameters: GetMessageBuyersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessageBuyersResponseDto>> {
        if (requestParameters.getMessageBuyersRequestDto === null || requestParameters.getMessageBuyersRequestDto === undefined) {
            throw new runtime.RequiredError('getMessageBuyersRequestDto','Required parameter requestParameters.getMessageBuyersRequestDto was null or undefined when calling getMessageBuyers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/purchased`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetMessageBuyersRequestDtoToJSON(requestParameters.getMessageBuyersRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessageBuyersResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets purchased
     */
    async getMessageBuyers(requestParameters: GetMessageBuyersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessageBuyersResponseDto> {
        const response = await this.getMessageBuyersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get messages
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessagesResponseDto>> {
        if (requestParameters.getMessagesRequestDto === null || requestParameters.getMessagesRequestDto === undefined) {
            throw new runtime.RequiredError('getMessagesRequestDto','Required parameter requestParameters.getMessagesRequestDto was null or undefined when calling getMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetMessagesRequestDtoToJSON(requestParameters.getMessagesRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get messages
     */
    async getMessages(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessagesResponseDto> {
        const response = await this.getMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets or creates a channel
     */
    async getOrCreateChannelRaw(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelResponseDto>> {
        if (requestParameters.getChannelRequestDto === null || requestParameters.getChannelRequestDto === undefined) {
            throw new runtime.RequiredError('getChannelRequestDto','Required parameter requestParameters.getChannelRequestDto was null or undefined when calling getOrCreateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/channel/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChannelRequestDtoToJSON(requestParameters.getChannelRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets or creates a channel
     */
    async getOrCreateChannel(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelResponseDto> {
        const response = await this.getOrCreateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get paid messages
     */
    async getPaidMessagesRaw(requestParameters: GetPaidMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaidMessagesResponseDto>> {
        if (requestParameters.getPaidMessagesRequestDto === null || requestParameters.getPaidMessagesRequestDto === undefined) {
            throw new runtime.RequiredError('getPaidMessagesRequestDto','Required parameter requestParameters.getPaidMessagesRequestDto was null or undefined when calling getPaidMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/paid-message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPaidMessagesRequestDtoToJSON(requestParameters.getPaidMessagesRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaidMessagesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get paid messages
     */
    async getPaidMessages(requestParameters: GetPaidMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaidMessagesResponseDto> {
        const response = await this.getPaidMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get paid message history
     */
    async getPaidMessagesHistoryRaw(requestParameters: GetPaidMessagesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaidMessageHistoryResponseDto>> {
        if (requestParameters.getPaidMessageHistoryRequestDto === null || requestParameters.getPaidMessageHistoryRequestDto === undefined) {
            throw new runtime.RequiredError('getPaidMessageHistoryRequestDto','Required parameter requestParameters.getPaidMessageHistoryRequestDto was null or undefined when calling getPaidMessagesHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/paid-message/history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPaidMessageHistoryRequestDtoToJSON(requestParameters.getPaidMessageHistoryRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaidMessageHistoryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get paid message history
     */
    async getPaidMessagesHistory(requestParameters: GetPaidMessagesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaidMessageHistoryResponseDto> {
        const response = await this.getPaidMessagesHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get welcome message
     */
    async getWelcomeMessageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWelcomeMessageResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/welcome-message`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWelcomeMessageResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get welcome message
     */
    async getWelcomeMessage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWelcomeMessageResponseDto> {
        const response = await this.getWelcomeMessageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Hide unsent paid message
     */
    async hidePaidMessageRaw(requestParameters: HidePaidMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.paidMessageId === null || requestParameters.paidMessageId === undefined) {
            throw new runtime.RequiredError('paidMessageId','Required parameter requestParameters.paidMessageId was null or undefined when calling hidePaidMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/hide/{paidMessageId}`.replace(`{${"paidMessageId"}}`, encodeURIComponent(String(requestParameters.paidMessageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Hide unsent paid message
     */
    async hidePaidMessage(requestParameters: HidePaidMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.hidePaidMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Batch message
     */
    async massSendRaw(requestParameters: MassSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBatchMessageRequestDto === null || requestParameters.createBatchMessageRequestDto === undefined) {
            throw new runtime.RequiredError('createBatchMessageRequestDto','Required parameter requestParameters.createBatchMessageRequestDto was null or undefined when calling massSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchMessageRequestDtoToJSON(requestParameters.createBatchMessageRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Batch message
     */
    async massSend(requestParameters: MassSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.massSendRaw(requestParameters, initOverrides);
    }

    /**
     * Set status as read
     */
    async readMessagesRaw(requestParameters: ReadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.readChannelRequestDto === null || requestParameters.readChannelRequestDto === undefined) {
            throw new runtime.RequiredError('readChannelRequestDto','Required parameter requestParameters.readChannelRequestDto was null or undefined when calling readMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadChannelRequestDtoToJSON(requestParameters.readChannelRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set status as read
     */
    async readMessages(requestParameters: ReadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.readMessagesRaw(requestParameters, initOverrides);
    }

    /**
     * Register purchase message payin
     */
    async registerPurchaseMessageRaw(requestParameters: RegisterPurchaseMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.purchaseMessageRequestDto === null || requestParameters.purchaseMessageRequestDto === undefined) {
            throw new runtime.RequiredError('purchaseMessageRequestDto','Required parameter requestParameters.purchaseMessageRequestDto was null or undefined when calling registerPurchaseMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/pay/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseMessageRequestDtoToJSON(requestParameters.purchaseMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register purchase message payin
     */
    async registerPurchaseMessage(requestParameters: RegisterPurchaseMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.registerPurchaseMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get register purchase message data
     */
    async registerPurchaseMessageDataRaw(requestParameters: RegisterPurchaseMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.purchaseMessageRequestDto === null || requestParameters.purchaseMessageRequestDto === undefined) {
            throw new runtime.RequiredError('purchaseMessageRequestDto','Required parameter requestParameters.purchaseMessageRequestDto was null or undefined when calling registerPurchaseMessageData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/pay/data/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseMessageRequestDtoToJSON(requestParameters.purchaseMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Get register purchase message data
     */
    async registerPurchaseMessageData(requestParameters: RegisterPurchaseMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayinDataDto> {
        const response = await this.registerPurchaseMessageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register sending message
     */
    async sendMessageRaw(requestParameters: SendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message
     */
    async sendMessage(requestParameters: SendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.sendMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register sending message data
     */
    async sendMessageDataRaw(requestParameters: SendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.sendMessageRequestDto === null || requestParameters.sendMessageRequestDto === undefined) {
            throw new runtime.RequiredError('sendMessageRequestDto','Required parameter requestParameters.sendMessageRequestDto was null or undefined when calling sendMessageData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestDtoToJSON(requestParameters.sendMessageRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Register sending message data
     */
    async sendMessageData(requestParameters: SendMessageDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayinDataDto> {
        const response = await this.sendMessageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeChannelUpdatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/subscribe-channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeChannelUpdates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeChannelUpdatesRaw(initOverrides);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/subscribe-messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe to receive new messages
     */
    async subscribeMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeMessagesRaw(initOverrides);
    }

    /**
     * Unsend paid message
     */
    async unsendPaidMessageRaw(requestParameters: UnsendPaidMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.paidMessageId === null || requestParameters.paidMessageId === undefined) {
            throw new runtime.RequiredError('paidMessageId','Required parameter requestParameters.paidMessageId was null or undefined when calling unsendPaidMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/unsend/{paidMessageId}`.replace(`{${"paidMessageId"}}`, encodeURIComponent(String(requestParameters.paidMessageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Unsend paid message
     */
    async unsendPaidMessage(requestParameters: UnsendPaidMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.unsendPaidMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update channels settings
     */
    async updateChannelSettingsRaw(requestParameters: UpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateChannelSettingsRequestDto === null || requestParameters.updateChannelSettingsRequestDto === undefined) {
            throw new runtime.RequiredError('updateChannelSettingsRequestDto','Required parameter requestParameters.updateChannelSettingsRequestDto was null or undefined when calling updateChannelSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/messages/channel/settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChannelSettingsRequestDtoToJSON(requestParameters.updateChannelSettingsRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update channels settings
     */
    async updateChannelSettings(requestParameters: UpdateChannelSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateChannelSettingsRaw(requestParameters, initOverrides);
    }

}
