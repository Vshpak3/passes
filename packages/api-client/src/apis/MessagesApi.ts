/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateBatchMessageDto,
    CreateBatchMessageDtoFromJSON,
    CreateBatchMessageDtoToJSON,
    CreateChannelDto,
    CreateChannelDtoFromJSON,
    CreateChannelDtoToJSON,
    GetChannelDto,
    GetChannelDtoFromJSON,
    GetChannelDtoToJSON,
    SendMessageDto,
    SendMessageDtoFromJSON,
    SendMessageDtoToJSON,
    TokenDto,
    TokenDtoFromJSON,
    TokenDtoToJSON,
} from '../models';

export interface MessagesCreateChannelRequest {
    createChannelDto: CreateChannelDto;
}

export interface MessagesMassSendRequest {
    createBatchMessageDto: CreateBatchMessageDto;
}

export interface MessagesSendRequest {
    sendMessageDto: SendMessageDto;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Creates a channel
     */
    async messagesCreateChannelRaw(requestParameters: MessagesCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetChannelDto>> {
        if (requestParameters.createChannelDto === null || requestParameters.createChannelDto === undefined) {
            throw new runtime.RequiredError('createChannelDto','Required parameter requestParameters.createChannelDto was null or undefined when calling messagesCreateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages/channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChannelDtoToJSON(requestParameters.createChannelDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChannelDtoFromJSON(jsonValue));
    }

    /**
     * Creates a channel
     */
    async messagesCreateChannel(requestParameters: MessagesCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetChannelDto> {
        const response = await this.messagesCreateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets token
     */
    async messagesGetTokenRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TokenDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenDtoFromJSON(jsonValue));
    }

    /**
     * Gets token
     */
    async messagesGetToken(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TokenDto> {
        const response = await this.messagesGetTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Batch message
     */
    async messagesMassSendRaw(requestParameters: MessagesMassSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBatchMessageDto === null || requestParameters.createBatchMessageDto === undefined) {
            throw new runtime.RequiredError('createBatchMessageDto','Required parameter requestParameters.createBatchMessageDto was null or undefined when calling messagesMassSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchMessageDtoToJSON(requestParameters.createBatchMessageDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Batch message
     */
    async messagesMassSend(requestParameters: MessagesMassSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.messagesMassSendRaw(requestParameters, initOverrides);
    }

    /**
     * Sends message
     */
    async messagesSendRaw(requestParameters: MessagesSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SendMessageDto>> {
        if (requestParameters.sendMessageDto === null || requestParameters.sendMessageDto === undefined) {
            throw new runtime.RequiredError('sendMessageDto','Required parameter requestParameters.sendMessageDto was null or undefined when calling messagesSend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageDtoToJSON(requestParameters.sendMessageDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendMessageDtoFromJSON(jsonValue));
    }

    /**
     * Sends message
     */
    async messagesSend(requestParameters: MessagesSendRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SendMessageDto> {
        const response = await this.messagesSendRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
