/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrUpdateProfileRequestDto,
  GetProfileRequestDto,
  GetProfileResponseDto,
} from '../models';
import {
    CreateOrUpdateProfileRequestDtoFromJSON,
    CreateOrUpdateProfileRequestDtoToJSON,
    GetProfileRequestDtoFromJSON,
    GetProfileRequestDtoToJSON,
    GetProfileResponseDtoFromJSON,
    GetProfileResponseDtoToJSON,
} from '../models';

export interface CreateOrUpdateProfileRequest {
    createOrUpdateProfileRequestDto: CreateOrUpdateProfileRequestDto;
}

export interface FindProfileRequest {
    getProfileRequestDto: GetProfileRequestDto;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Activate a profile
     */
    async activateProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/profile/activate`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Activate a profile
     */
    async activateProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.activateProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a profile
     */
    async createOrUpdateProfileRaw(requestParameters: CreateOrUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.createOrUpdateProfileRequestDto === null || requestParameters.createOrUpdateProfileRequestDto === undefined) {
            throw new runtime.RequiredError('createOrUpdateProfileRequestDto','Required parameter requestParameters.createOrUpdateProfileRequestDto was null or undefined when calling createOrUpdateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateProfileRequestDtoToJSON(requestParameters.createOrUpdateProfileRequestDto),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a profile
     */
    async createOrUpdateProfile(requestParameters: CreateOrUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.createOrUpdateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate a profile
     */
    async deactivateProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/profile/deactivate`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deactivate a profile
     */
    async deactivateProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deactivateProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets a profile
     */
    async findProfileRaw(requestParameters: FindProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileResponseDto>> {
        if (requestParameters.getProfileRequestDto === null || requestParameters.getProfileRequestDto === undefined) {
            throw new runtime.RequiredError('getProfileRequestDto','Required parameter requestParameters.getProfileRequestDto was null or undefined when calling findProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetProfileRequestDtoToJSON(requestParameters.getProfileRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a profile
     */
    async findProfile(requestParameters: FindProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileResponseDto> {
        const response = await this.findProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if profile is active
     */
    async isProfileActiveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/profile/active`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if profile is active
     */
    async isProfileActive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.isProfileActiveRaw(initOverrides);
        return await response.value();
    }

}

export const ProfileSecurityInfo = new Set<string>([
    "activateProfile",
    "createOrUpdateProfile",
    "deactivateProfile",
    "isProfileActive",
])
