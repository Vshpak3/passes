/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateProfileRequestDto,
    CreateProfileRequestDtoFromJSON,
    CreateProfileRequestDtoToJSON,
    GetProfileResponseDto,
    GetProfileResponseDtoFromJSON,
    GetProfileResponseDtoToJSON,
    GetUsernamesResponseDto,
    GetUsernamesResponseDtoFromJSON,
    GetUsernamesResponseDtoToJSON,
    UpdateProfileRequestDto,
    UpdateProfileRequestDtoFromJSON,
    UpdateProfileRequestDtoToJSON,
} from '../models';

export interface CreateProfileRequest {
    createProfileRequestDto: CreateProfileRequestDto;
}

export interface FindProfileRequest {
    profileId: string;
}

export interface FindProfileByUsernameRequest {
    username: string;
}

export interface RemoveProfileRequest {
    profileId: string;
}

export interface UpdateProfileRequest {
    profileId: string;
    updateProfileRequestDto: UpdateProfileRequestDto;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Creates a profile
     */
    async createProfileRaw(requestParameters: CreateProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetProfileResponseDto>> {
        if (requestParameters.createProfileRequestDto === null || requestParameters.createProfileRequestDto === undefined) {
            throw new runtime.RequiredError('createProfileRequestDto','Required parameter requestParameters.createProfileRequestDto was null or undefined when calling createProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfileRequestDtoToJSON(requestParameters.createProfileRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a profile
     */
    async createProfile(requestParameters: CreateProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetProfileResponseDto> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a profile
     */
    async findProfileRaw(requestParameters: FindProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetProfileResponseDto>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling findProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a profile
     */
    async findProfile(requestParameters: FindProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetProfileResponseDto> {
        const response = await this.findProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a profile by username
     */
    async findProfileByUsernameRaw(requestParameters: FindProfileByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetProfileResponseDto>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling findProfileByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/usernames/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a profile by username
     */
    async findProfileByUsername(requestParameters: FindProfileByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetProfileResponseDto> {
        const response = await this.findProfileByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all usernames
     */
    async getAllUsernamesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetUsernamesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/usernames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsernamesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets all usernames
     */
    async getAllUsernames(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetUsernamesResponseDto> {
        const response = await this.getAllUsernamesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes a profile
     */
    async removeProfileRaw(requestParameters: RemoveProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetProfileResponseDto>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling removeProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseDtoFromJSON(jsonValue));
    }

    /**
     * Deletes a profile
     */
    async removeProfile(requestParameters: RemoveProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetProfileResponseDto> {
        const response = await this.removeProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetProfileResponseDto>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling updateProfile.');
        }

        if (requestParameters.updateProfileRequestDto === null || requestParameters.updateProfileRequestDto === undefined) {
            throw new runtime.RequiredError('updateProfileRequestDto','Required parameter requestParameters.updateProfileRequestDto was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestDtoToJSON(requestParameters.updateProfileRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseDtoFromJSON(jsonValue));
    }

    /**
     * Updates a profile
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetProfileResponseDto> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
