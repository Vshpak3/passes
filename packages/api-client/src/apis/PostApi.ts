/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePostAccessRequestDto,
    CreatePostAccessRequestDtoFromJSON,
    CreatePostAccessRequestDtoToJSON,
    CreatePostRequestDto,
    CreatePostRequestDtoFromJSON,
    CreatePostRequestDtoToJSON,
    GetPostResponseDto,
    GetPostResponseDtoFromJSON,
    GetPostResponseDtoToJSON,
    PayinDataDto,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    RegisterPayinResponseDto,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    TipPostRequestDto,
    TipPostRequestDtoFromJSON,
    TipPostRequestDtoToJSON,
    UpdatePostRequestDto,
    UpdatePostRequestDtoFromJSON,
    UpdatePostRequestDtoToJSON,
} from '../models';

export interface PostCreateRequest {
    createPostRequestDto: CreatePostRequestDto;
}

export interface PostFindOneRequest {
    id: string;
}

export interface PostPinPostRequest {
    postId: string;
}

export interface PostRegisterPurchasePostRequest {
    createPostAccessRequestDto: CreatePostAccessRequestDto;
}

export interface PostRegisterPurchasePostDataRequest {
    createPostAccessRequestDto: CreatePostAccessRequestDto;
}

export interface PostRegisterTipPostRequest {
    tipPostRequestDto: TipPostRequestDto;
}

export interface PostRemoveRequest {
    id: string;
}

export interface PostUnpinPostRequest {
    postId: string;
}

export interface PostUpdateRequest {
    id: string;
    updatePostRequestDto: UpdatePostRequestDto;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     * Creates a post
     */
    async postCreateRaw(requestParameters: PostCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createPostRequestDto === null || requestParameters.createPostRequestDto === undefined) {
            throw new runtime.RequiredError('createPostRequestDto','Required parameter requestParameters.createPostRequestDto was null or undefined when calling postCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostRequestDtoToJSON(requestParameters.createPostRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a post
     */
    async postCreate(requestParameters: PostCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.postCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a post
     */
    async postFindOneRaw(requestParameters: PostFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPostResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a post
     */
    async postFindOne(requestParameters: PostFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPostResponseDto> {
        const response = await this.postFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pin a post
     */
    async postPinPostRaw(requestParameters: PostPinPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling postPinPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/post/pin/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Pin a post
     */
    async postPinPost(requestParameters: PostPinPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.postPinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register purchase post payin
     */
    async postRegisterPurchasePostRaw(requestParameters: PostRegisterPurchasePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.createPostAccessRequestDto === null || requestParameters.createPostAccessRequestDto === undefined) {
            throw new runtime.RequiredError('createPostAccessRequestDto','Required parameter requestParameters.createPostAccessRequestDto was null or undefined when calling postRegisterPurchasePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/pay/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostAccessRequestDtoToJSON(requestParameters.createPostAccessRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register purchase post payin
     */
    async postRegisterPurchasePost(requestParameters: PostRegisterPurchasePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.postRegisterPurchasePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get register purchase post data
     */
    async postRegisterPurchasePostDataRaw(requestParameters: PostRegisterPurchasePostDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.createPostAccessRequestDto === null || requestParameters.createPostAccessRequestDto === undefined) {
            throw new runtime.RequiredError('createPostAccessRequestDto','Required parameter requestParameters.createPostAccessRequestDto was null or undefined when calling postRegisterPurchasePostData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/pay/data/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostAccessRequestDtoToJSON(requestParameters.createPostAccessRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Get register purchase post data
     */
    async postRegisterPurchasePostData(requestParameters: PostRegisterPurchasePostDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PayinDataDto> {
        const response = await this.postRegisterPurchasePostDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register tip post payin
     */
    async postRegisterTipPostRaw(requestParameters: PostRegisterTipPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.tipPostRequestDto === null || requestParameters.tipPostRequestDto === undefined) {
            throw new runtime.RequiredError('tipPostRequestDto','Required parameter requestParameters.tipPostRequestDto was null or undefined when calling postRegisterTipPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/pay/tip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TipPostRequestDtoToJSON(requestParameters.tipPostRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register tip post payin
     */
    async postRegisterTipPost(requestParameters: PostRegisterTipPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.postRegisterTipPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a post
     */
    async postRemoveRaw(requestParameters: PostRemoveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a post
     */
    async postRemove(requestParameters: PostRemoveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.postRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Unpin a post
     */
    async postUnpinPostRaw(requestParameters: PostUnpinPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling postUnpinPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/post/unpin/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Unpin a post
     */
    async postUnpinPost(requestParameters: PostUnpinPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.postUnpinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a post
     */
    async postUpdateRaw(requestParameters: PostUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postUpdate.');
        }

        if (requestParameters.updatePostRequestDto === null || requestParameters.updatePostRequestDto === undefined) {
            throw new runtime.RequiredError('updatePostRequestDto','Required parameter requestParameters.updatePostRequestDto was null or undefined when calling postUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePostRequestDtoToJSON(requestParameters.updatePostRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a post
     */
    async postUpdate(requestParameters: PostUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.postUpdateRaw(requestParameters, initOverrides);
    }

}
