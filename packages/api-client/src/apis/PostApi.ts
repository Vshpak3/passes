/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePostAccessDto,
    CreatePostAccessDtoFromJSON,
    CreatePostAccessDtoToJSON,
    CreatePostDto,
    CreatePostDtoFromJSON,
    CreatePostDtoToJSON,
    GetPostDto,
    GetPostDtoFromJSON,
    GetPostDtoToJSON,
    RegisterPayinResponseDto,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    TipPostDto,
    TipPostDtoFromJSON,
    TipPostDtoToJSON,
    UpdatePostDto,
    UpdatePostDtoFromJSON,
    UpdatePostDtoToJSON,
} from '../models';

export interface PostCreateRequest {
    createPostDto: CreatePostDto;
}

export interface PostFindOneRequest {
    id: string;
}

export interface PostRegisterPurchasePostRequest {
    createPostAccessDto: CreatePostAccessDto;
}

export interface PostRegisterPurchasePostDataRequest {
    createPostAccessDto: CreatePostAccessDto;
}

export interface PostRegisterTipPostRequest {
    tipPostDto: TipPostDto;
}

export interface PostRemoveRequest {
    id: string;
}

export interface PostUpdateRequest {
    id: string;
    updatePostDto: UpdatePostDto;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     * Creates a post
     */
    async postCreateRaw(requestParameters: PostCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePostDto>> {
        if (requestParameters.createPostDto === null || requestParameters.createPostDto === undefined) {
            throw new runtime.RequiredError('createPostDto','Required parameter requestParameters.createPostDto was null or undefined when calling postCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostDtoToJSON(requestParameters.createPostDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePostDtoFromJSON(jsonValue));
    }

    /**
     * Creates a post
     */
    async postCreate(requestParameters: PostCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePostDto> {
        const response = await this.postCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a post
     */
    async postFindOneRaw(requestParameters: PostFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPostDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostDtoFromJSON(jsonValue));
    }

    /**
     * Gets a post
     */
    async postFindOne(requestParameters: PostFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPostDto> {
        const response = await this.postFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register purchase post payin
     */
    async postRegisterPurchasePostRaw(requestParameters: PostRegisterPurchasePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.createPostAccessDto === null || requestParameters.createPostAccessDto === undefined) {
            throw new runtime.RequiredError('createPostAccessDto','Required parameter requestParameters.createPostAccessDto was null or undefined when calling postRegisterPurchasePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/pay/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostAccessDtoToJSON(requestParameters.createPostAccessDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register purchase post payin
     */
    async postRegisterPurchasePost(requestParameters: PostRegisterPurchasePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.postRegisterPurchasePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get register purchase post data
     */
    async postRegisterPurchasePostDataRaw(requestParameters: PostRegisterPurchasePostDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.createPostAccessDto === null || requestParameters.createPostAccessDto === undefined) {
            throw new runtime.RequiredError('createPostAccessDto','Required parameter requestParameters.createPostAccessDto was null or undefined when calling postRegisterPurchasePostData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/pay/data/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostAccessDtoToJSON(requestParameters.createPostAccessDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get register purchase post data
     */
    async postRegisterPurchasePostData(requestParameters: PostRegisterPurchasePostDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.postRegisterPurchasePostDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register tip post payin
     */
    async postRegisterTipPostRaw(requestParameters: PostRegisterTipPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.tipPostDto === null || requestParameters.tipPostDto === undefined) {
            throw new runtime.RequiredError('tipPostDto','Required parameter requestParameters.tipPostDto was null or undefined when calling postRegisterTipPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/pay/tip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TipPostDtoToJSON(requestParameters.tipPostDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register tip post payin
     */
    async postRegisterTipPost(requestParameters: PostRegisterTipPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.postRegisterTipPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a post
     */
    async postRemoveRaw(requestParameters: PostRemoveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a post
     */
    async postRemove(requestParameters: PostRemoveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.postRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a post
     */
    async postUpdateRaw(requestParameters: PostUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postUpdate.');
        }

        if (requestParameters.updatePostDto === null || requestParameters.updatePostDto === undefined) {
            throw new runtime.RequiredError('updatePostDto','Required parameter requestParameters.updatePostDto was null or undefined when calling postUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePostDtoToJSON(requestParameters.updatePostDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a post
     */
    async postUpdate(requestParameters: PostUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.postUpdateRaw(requestParameters, initOverrides);
    }

}
