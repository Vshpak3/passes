/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'

export interface PassCreateRequest {
  body: object
}

export interface PassFindOneRequest {
  id: string
}

export interface PassUpdateRequest {
  id: string
  body: object
}

/**
 *
 */
export class PassApi extends runtime.BaseAPI {
  /**
   * Creates a pass
   */
  async passCreateRaw(
    requestParameters: PassCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling passCreate.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/pass`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Creates a pass
   */
  async passCreate(
    requestParameters: PassCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<object> {
    const response = await this.passCreateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Gets a pass
   */
  async passFindOneRaw(
    requestParameters: PassFindOneRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling passFindOne.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/pass/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Gets a pass
   */
  async passFindOne(
    requestParameters: PassFindOneRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<object> {
    const response = await this.passFindOneRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Updates a pass
   */
  async passUpdateRaw(
    requestParameters: PassUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling passUpdate.',
      )
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling passUpdate.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/pass/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Updates a pass
   */
  async passUpdate(
    requestParameters: PassUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<object> {
    const response = await this.passUpdateRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
