/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePassDto,
    CreatePassDtoFromJSON,
    CreatePassDtoToJSON,
    CreatePassHolderDto,
    CreatePassHolderDtoFromJSON,
    CreatePassHolderDtoToJSON,
    GetPassOwnershipDto,
    GetPassOwnershipDtoFromJSON,
    GetPassOwnershipDtoToJSON,
    UpdatePassDto,
    UpdatePassDtoFromJSON,
    UpdatePassDtoToJSON,
} from '../models';

export interface PassAddHolderRequest {
    createPassHolderDto: CreatePassHolderDto;
}

export interface PassCreateRequest {
    createPassDto: CreatePassDto;
}

export interface PassFindOneRequest {
    id: string;
}

export interface PassUpdateRequest {
    id: string;
    updatePassDto: UpdatePassDto;
}

/**
 * 
 */
export class PassApi extends runtime.BaseAPI {

    /**
     * Creates a pass holder
     */
    async passAddHolderRaw(requestParameters: PassAddHolderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassOwnershipDto>> {
        if (requestParameters.createPassHolderDto === null || requestParameters.createPassHolderDto === undefined) {
            throw new runtime.RequiredError('createPassHolderDto','Required parameter requestParameters.createPassHolderDto was null or undefined when calling passAddHolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass/holder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePassHolderDtoToJSON(requestParameters.createPassHolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassOwnershipDtoFromJSON(jsonValue));
    }

    /**
     * Creates a pass holder
     */
    async passAddHolder(requestParameters: PassAddHolderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassOwnershipDto> {
        const response = await this.passAddHolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a pass
     */
    async passCreateRaw(requestParameters: PassCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.createPassDto === null || requestParameters.createPassDto === undefined) {
            throw new runtime.RequiredError('createPassDto','Required parameter requestParameters.createPassDto was null or undefined when calling passCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePassDtoToJSON(requestParameters.createPassDto),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a pass
     */
    async passCreate(requestParameters: PassCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.passCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a pass
     */
    async passFindOneRaw(requestParameters: PassFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling passFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pass/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets a pass
     */
    async passFindOne(requestParameters: PassFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.passFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a pass
     */
    async passUpdateRaw(requestParameters: PassUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling passUpdate.');
        }

        if (requestParameters.updatePassDto === null || requestParameters.updatePassDto === undefined) {
            throw new runtime.RequiredError('updatePassDto','Required parameter requestParameters.updatePassDto was null or undefined when calling passUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePassDtoToJSON(requestParameters.updatePassDto),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a pass
     */
    async passUpdate(requestParameters: PassUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.passUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
