/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePassDto,
    CreatePassDtoFromJSON,
    CreatePassDtoToJSON,
    CreatePassHolderDto,
    CreatePassHolderDtoFromJSON,
    CreatePassHolderDtoToJSON,
    GetPassDto,
    GetPassDtoFromJSON,
    GetPassDtoToJSON,
    GetPassOwnershipDto,
    GetPassOwnershipDtoFromJSON,
    GetPassOwnershipDtoToJSON,
    GetPassesDto,
    GetPassesDtoFromJSON,
    GetPassesDtoToJSON,
    PayinDataDto,
    PayinDataDtoFromJSON,
    PayinDataDtoToJSON,
    RegisterPayinResponseDto,
    RegisterPayinResponseDtoFromJSON,
    RegisterPayinResponseDtoToJSON,
    UpdatePassDto,
    UpdatePassDtoFromJSON,
    UpdatePassDtoToJSON,
} from '../models';

export interface PassAddHolderRequest {
    createPassHolderDto: CreatePassHolderDto;
}

export interface PassCreateRequest {
    createPassDto: CreatePassDto;
}

export interface PassFindOneRequest {
    id: string;
}

export interface PassGetCreatorPassesRequest {
    creatorId: string;
}

export interface PassGetOwnedPassesRequest {
    creatorId: string;
}

export interface PassRegisterRequest {
    createPassHolderDto: CreatePassHolderDto;
}

export interface PassRegisterDataRequest {
    createPassHolderDto: CreatePassHolderDto;
}

export interface PassUpdateRequest {
    id: string;
    updatePassDto: UpdatePassDto;
}

/**
 * 
 */
export class PassApi extends runtime.BaseAPI {

    /**
     * Creates a pass holder
     */
    async passAddHolderRaw(requestParameters: PassAddHolderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassOwnershipDto>> {
        if (requestParameters.createPassHolderDto === null || requestParameters.createPassHolderDto === undefined) {
            throw new runtime.RequiredError('createPassHolderDto','Required parameter requestParameters.createPassHolderDto was null or undefined when calling passAddHolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass/holder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePassHolderDtoToJSON(requestParameters.createPassHolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassOwnershipDtoFromJSON(jsonValue));
    }

    /**
     * Creates a pass holder
     */
    async passAddHolder(requestParameters: PassAddHolderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassOwnershipDto> {
        const response = await this.passAddHolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a pass
     */
    async passCreateRaw(requestParameters: PassCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassDto>> {
        if (requestParameters.createPassDto === null || requestParameters.createPassDto === undefined) {
            throw new runtime.RequiredError('createPassDto','Required parameter requestParameters.createPassDto was null or undefined when calling passCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePassDtoToJSON(requestParameters.createPassDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassDtoFromJSON(jsonValue));
    }

    /**
     * Creates a pass
     */
    async passCreate(requestParameters: PassCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassDto> {
        const response = await this.passCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a pass
     */
    async passFindOneRaw(requestParameters: PassFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling passFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pass/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassDtoFromJSON(jsonValue));
    }

    /**
     * Gets a pass
     */
    async passFindOne(requestParameters: PassFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassDto> {
        const response = await this.passFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets passes created by a creator
     */
    async passGetCreatorPassesRaw(requestParameters: PassGetCreatorPassesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassesDto>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling passGetCreatorPasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pass/created/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassesDtoFromJSON(jsonValue));
    }

    /**
     * Gets passes created by a creator
     */
    async passGetCreatorPasses(requestParameters: PassGetCreatorPassesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassesDto> {
        const response = await this.passGetCreatorPassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets passes held by user
     */
    async passGetOwnedPassesRaw(requestParameters: PassGetOwnedPassesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassesDto>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling passGetOwnedPasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pass/owned`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassesDtoFromJSON(jsonValue));
    }

    /**
     * Gets passes held by user
     */
    async passGetOwnedPasses(requestParameters: PassGetOwnedPassesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassesDto> {
        const response = await this.passGetOwnedPassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register payin for pass
     */
    async passRegisterRaw(requestParameters: PassRegisterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterPayinResponseDto>> {
        if (requestParameters.createPassHolderDto === null || requestParameters.createPassHolderDto === undefined) {
            throw new runtime.RequiredError('createPassHolderDto','Required parameter requestParameters.createPassHolderDto was null or undefined when calling passRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePassHolderDtoToJSON(requestParameters.createPassHolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterPayinResponseDtoFromJSON(jsonValue));
    }

    /**
     * Register payin for pass
     */
    async passRegister(requestParameters: PassRegisterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterPayinResponseDto> {
        const response = await this.passRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get register pass data
     */
    async passRegisterDataRaw(requestParameters: PassRegisterDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PayinDataDto>> {
        if (requestParameters.createPassHolderDto === null || requestParameters.createPassHolderDto === undefined) {
            throw new runtime.RequiredError('createPassHolderDto','Required parameter requestParameters.createPassHolderDto was null or undefined when calling passRegisterData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass/register/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePassHolderDtoToJSON(requestParameters.createPassHolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayinDataDtoFromJSON(jsonValue));
    }

    /**
     * Get register pass data
     */
    async passRegisterData(requestParameters: PassRegisterDataRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PayinDataDto> {
        const response = await this.passRegisterDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a pass
     */
    async passUpdateRaw(requestParameters: PassUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetPassDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling passUpdate.');
        }

        if (requestParameters.updatePassDto === null || requestParameters.updatePassDto === undefined) {
            throw new runtime.RequiredError('updatePassDto','Required parameter requestParameters.updatePassDto was null or undefined when calling passUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pass/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePassDtoToJSON(requestParameters.updatePassDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassDtoFromJSON(jsonValue));
    }

    /**
     * Updates a pass
     */
    async passUpdate(requestParameters: PassUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetPassDto> {
        const response = await this.passUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
