/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateSolNftCollectionRequestDto,
    CreateSolNftCollectionRequestDtoFromJSON,
    CreateSolNftCollectionRequestDtoToJSON,
    CreateSolNftRequestDto,
    CreateSolNftRequestDtoFromJSON,
    CreateSolNftRequestDtoToJSON,
    GetSolNftCollectionResponseDto,
    GetSolNftCollectionResponseDtoFromJSON,
    GetSolNftCollectionResponseDtoToJSON,
    GetSolNftResponseDto,
    GetSolNftResponseDtoFromJSON,
    GetSolNftResponseDtoToJSON,
} from '../models';

export interface SolCreateNftRequest {
    createSolNftRequestDto: CreateSolNftRequestDto;
}

export interface SolCreateNftCollectionRequest {
    createSolNftCollectionRequestDto: CreateSolNftCollectionRequestDto;
}

/**
 * 
 */
export class SolApi extends runtime.BaseAPI {

    /**
     * Creates Sol NFT from Collection
     */
    async solCreateNftRaw(requestParameters: SolCreateNftRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetSolNftResponseDto>> {
        if (requestParameters.createSolNftRequestDto === null || requestParameters.createSolNftRequestDto === undefined) {
            throw new runtime.RequiredError('createSolNftRequestDto','Required parameter requestParameters.createSolNftRequestDto was null or undefined when calling solCreateNft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/sol/nft`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSolNftRequestDtoToJSON(requestParameters.createSolNftRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSolNftResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates Sol NFT from Collection
     */
    async solCreateNft(requestParameters: SolCreateNftRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetSolNftResponseDto> {
        const response = await this.solCreateNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates Sol NFT Collection
     */
    async solCreateNftCollectionRaw(requestParameters: SolCreateNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetSolNftCollectionResponseDto>> {
        if (requestParameters.createSolNftCollectionRequestDto === null || requestParameters.createSolNftCollectionRequestDto === undefined) {
            throw new runtime.RequiredError('createSolNftCollectionRequestDto','Required parameter requestParameters.createSolNftCollectionRequestDto was null or undefined when calling solCreateNftCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/sol/nft_collection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSolNftCollectionRequestDtoToJSON(requestParameters.createSolNftCollectionRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSolNftCollectionResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates Sol NFT Collection
     */
    async solCreateNftCollection(requestParameters: SolCreateNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetSolNftCollectionResponseDto> {
        const response = await this.solCreateNftCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
