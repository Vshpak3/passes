/* tslint:disable */
/* eslint-disable */
/**
 * Moment Backend
 * Be in the moment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateSolNftCollectionDto,
    CreateSolNftCollectionDtoFromJSON,
    CreateSolNftCollectionDtoToJSON,
    CreateSolNftDto,
    CreateSolNftDtoFromJSON,
    CreateSolNftDtoToJSON,
    GetSolNftCollectionDto,
    GetSolNftCollectionDtoFromJSON,
    GetSolNftCollectionDtoToJSON,
    GetSolNftDto,
    GetSolNftDtoFromJSON,
    GetSolNftDtoToJSON,
} from '../models';

export interface SolCreateNftRequest {
    createSolNftDto: CreateSolNftDto;
}

export interface SolCreateNftCollectionRequest {
    createSolNftCollectionDto: CreateSolNftCollectionDto;
}

/**
 * 
 */
export class SolApi extends runtime.BaseAPI {

    /**
     * Creates Sol NFT from Collection
     */
    async solCreateNftRaw(requestParameters: SolCreateNftRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetSolNftDto>> {
        if (requestParameters.createSolNftDto === null || requestParameters.createSolNftDto === undefined) {
            throw new runtime.RequiredError('createSolNftDto','Required parameter requestParameters.createSolNftDto was null or undefined when calling solCreateNft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/sol/nft`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSolNftDtoToJSON(requestParameters.createSolNftDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSolNftDtoFromJSON(jsonValue));
    }

    /**
     * Creates Sol NFT from Collection
     */
    async solCreateNft(requestParameters: SolCreateNftRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetSolNftDto> {
        const response = await this.solCreateNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates Sol NFT Collection
     */
    async solCreateNftCollectionRaw(requestParameters: SolCreateNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetSolNftCollectionDto>> {
        if (requestParameters.createSolNftCollectionDto === null || requestParameters.createSolNftCollectionDto === undefined) {
            throw new runtime.RequiredError('createSolNftCollectionDto','Required parameter requestParameters.createSolNftCollectionDto was null or undefined when calling solCreateNftCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/sol/nft_collection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSolNftCollectionDtoToJSON(requestParameters.createSolNftCollectionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSolNftCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Creates Sol NFT Collection
     */
    async solCreateNftCollection(requestParameters: SolCreateNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetSolNftCollectionDto> {
        const response = await this.solCreateNftCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
