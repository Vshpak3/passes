/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetNotificationsRequestDto,
    GetNotificationsRequestDtoFromJSON,
    GetNotificationsRequestDtoToJSON,
    GetNotificationsResponseDto,
    GetNotificationsResponseDtoFromJSON,
    GetNotificationsResponseDtoToJSON,
} from '../models';

export interface NotificationsGetRequest {
    getNotificationsRequestDto: GetNotificationsRequestDto;
}

export interface NotificationsReadNotificationRequest {
    notificationId: string;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Gets notifications
     */
    async notificationsGetRaw(requestParameters: NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetNotificationsResponseDto>> {
        if (requestParameters.getNotificationsRequestDto === null || requestParameters.getNotificationsRequestDto === undefined) {
            throw new runtime.RequiredError('getNotificationsRequestDto','Required parameter requestParameters.getNotificationsRequestDto was null or undefined when calling notificationsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/notifications/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetNotificationsRequestDtoToJSON(requestParameters.getNotificationsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNotificationsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets notifications
     */
    async notificationsGet(requestParameters: NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetNotificationsResponseDto> {
        const response = await this.notificationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set status as read
     */
    async notificationsReadNotificationRaw(requestParameters: NotificationsReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling notificationsReadNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications/read/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set status as read
     */
    async notificationsReadNotification(requestParameters: NotificationsReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.notificationsReadNotificationRaw(requestParameters, initOverrides);
    }

    /**
     * Subscribe to notification events
     */
    async notificationsSubscribeRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications/subscribe`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe to notification events
     */
    async notificationsSubscribe(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.notificationsSubscribeRaw(initOverrides);
    }

}
