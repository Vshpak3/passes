/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface LikeCheckLikeRequest {
    postId: string;
}

export interface LikeLikePostRequest {
    postId: string;
}

export interface LikeUnlikePostRequest {
    postId: string;
}

/**
 * 
 */
export class LikeApi extends runtime.BaseAPI {

    /**
     * Check if post is liked
     */
    async likeCheckLikeRaw(requestParameters: LikeCheckLikeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling likeCheckLike.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/like/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if post is liked
     */
    async likeCheckLike(requestParameters: LikeCheckLikeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.likeCheckLikeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a like on a post
     */
    async likeLikePostRaw(requestParameters: LikeLikePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling likeLikePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/like/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a like on a post
     */
    async likeLikePost(requestParameters: LikeLikePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.likeLikePostRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a like on a post
     */
    async likeUnlikePostRaw(requestParameters: LikeUnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling likeUnlikePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/like/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a like on a post
     */
    async likeUnlikePost(requestParameters: LikeUnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.likeUnlikePostRaw(requestParameters, initOverrides);
    }

}
