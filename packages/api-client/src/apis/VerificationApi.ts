/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetCreatorVerificationStepResponseDto,
    GetCreatorVerificationStepResponseDtoFromJSON,
    GetCreatorVerificationStepResponseDtoToJSON,
    SubmitCreatorVerificationStepRequestDto,
    SubmitCreatorVerificationStepRequestDtoFromJSON,
    SubmitCreatorVerificationStepRequestDtoToJSON,
    SubmitPersonaInquiryRequestDto,
    SubmitPersonaInquiryRequestDtoFromJSON,
    SubmitPersonaInquiryRequestDtoToJSON,
} from '../models';

export interface SubmitCreatorVerificationStepRequest {
    submitCreatorVerificationStepRequestDto: SubmitCreatorVerificationStepRequestDto;
}

export interface SubmitPersonaInquiryRequest {
    submitPersonaInquiryRequestDto: SubmitPersonaInquiryRequestDto;
}

/**
 * 
 */
export class VerificationApi extends runtime.BaseAPI {

    /**
     * Check if user can submit inquiry
     */
    async canSubmitPersonaRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/verification/persona/inquiry/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if user can submit inquiry
     */
    async canSubmitPersona(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.canSubmitPersonaRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current creator verification step
     */
    async getCreatorVerificationStepRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetCreatorVerificationStepResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/verification/creator-verification/step`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCreatorVerificationStepResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get current creator verification step
     */
    async getCreatorVerificationStep(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetCreatorVerificationStepResponseDto> {
        const response = await this.getCreatorVerificationStepRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh persona KYC verifications for user
     */
    async refreshPersonaVerificationsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/verification/persona/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Refresh persona KYC verifications for user
     */
    async refreshPersonaVerifications(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.refreshPersonaVerificationsRaw(initOverrides);
    }

    /**
     * Submit creator verification step
     */
    async submitCreatorVerificationStepRaw(requestParameters: SubmitCreatorVerificationStepRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetCreatorVerificationStepResponseDto>> {
        if (requestParameters.submitCreatorVerificationStepRequestDto === null || requestParameters.submitCreatorVerificationStepRequestDto === undefined) {
            throw new runtime.RequiredError('submitCreatorVerificationStepRequestDto','Required parameter requestParameters.submitCreatorVerificationStepRequestDto was null or undefined when calling submitCreatorVerificationStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/verification/creator-verification/step`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitCreatorVerificationStepRequestDtoToJSON(requestParameters.submitCreatorVerificationStepRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCreatorVerificationStepResponseDtoFromJSON(jsonValue));
    }

    /**
     * Submit creator verification step
     */
    async submitCreatorVerificationStep(requestParameters: SubmitCreatorVerificationStepRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetCreatorVerificationStepResponseDto> {
        const response = await this.submitCreatorVerificationStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit inquiry
     */
    async submitPersonaInquiryRaw(requestParameters: SubmitPersonaInquiryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.submitPersonaInquiryRequestDto === null || requestParameters.submitPersonaInquiryRequestDto === undefined) {
            throw new runtime.RequiredError('submitPersonaInquiryRequestDto','Required parameter requestParameters.submitPersonaInquiryRequestDto was null or undefined when calling submitPersonaInquiry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/verification/persona/inquiry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitPersonaInquiryRequestDtoToJSON(requestParameters.submitPersonaInquiryRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit inquiry
     */
    async submitPersonaInquiry(requestParameters: SubmitPersonaInquiryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.submitPersonaInquiryRaw(requestParameters, initOverrides);
    }

}
