/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetFollowResponseDto,
  GetListMembersResponseDto,
  ReportFanDto,
  SearchFollowRequestDto,
} from '../models';
import {
    GetFollowResponseDtoFromJSON,
    GetFollowResponseDtoToJSON,
    GetListMembersResponseDtoFromJSON,
    GetListMembersResponseDtoToJSON,
    ReportFanDtoFromJSON,
    ReportFanDtoToJSON,
    SearchFollowRequestDtoFromJSON,
    SearchFollowRequestDtoToJSON,
} from '../models';

export interface BlockFollowerRequest {
    followerId: string;
}

export interface CheckFollowRequest {
    creatorId: string;
}

export interface FollowCreatorRequest {
    creatorId: string;
}

export interface ReportFollowerRequest {
    followerId: string;
    reportFanDto: ReportFanDto;
}

export interface SearchFansRequest {
    searchFollowRequestDto: SearchFollowRequestDto;
}

export interface SearchFollowingRequest {
    searchFollowRequestDto: SearchFollowRequestDto;
}

export interface UnblockFollowerRequest {
    followerId: string;
}

export interface UnfollowCreatorRequest {
    creatorId: string;
}

/**
 * 
 */
export class FollowApi extends runtime.BaseAPI {

    /**
     * Blocks a follower
     */
    async blockFollowerRaw(requestParameters: BlockFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling blockFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/block/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Blocks a follower
     */
    async blockFollower(requestParameters: BlockFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.blockFollowerRaw(requestParameters, initOverrides);
    }

    /**
     * Check if you follow a creator
     */
    async checkFollowRaw(requestParameters: CheckFollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling checkFollow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/check/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if you follow a creator
     */
    async checkFollow(requestParameters: CheckFollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkFollowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a follow
     */
    async followCreatorRaw(requestParameters: FollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFollowResponseDto>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling followCreator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFollowResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a follow
     */
    async followCreator(requestParameters: FollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFollowResponseDto> {
        const response = await this.followCreatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get blocked followers
     */
    async getBlockedRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListMembersResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/blocked`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListMembersResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get blocked followers
     */
    async getBlocked(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListMembersResponseDto> {
        const response = await this.getBlockedRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reports a follower
     */
    async reportFollowerRaw(requestParameters: ReportFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling reportFollower.');
        }

        if (requestParameters.reportFanDto === null || requestParameters.reportFanDto === undefined) {
            throw new runtime.RequiredError('reportFanDto','Required parameter requestParameters.reportFanDto was null or undefined when calling reportFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/report/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportFanDtoToJSON(requestParameters.reportFanDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports a follower
     */
    async reportFollower(requestParameters: ReportFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reportFollowerRaw(requestParameters, initOverrides);
    }

    /**
     * Search for followers by query
     */
    async searchFansRaw(requestParameters: SearchFansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListMembersResponseDto>> {
        if (requestParameters.searchFollowRequestDto === null || requestParameters.searchFollowRequestDto === undefined) {
            throw new runtime.RequiredError('searchFollowRequestDto','Required parameter requestParameters.searchFollowRequestDto was null or undefined when calling searchFans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/followers/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchFollowRequestDtoToJSON(requestParameters.searchFollowRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListMembersResponseDtoFromJSON(jsonValue));
    }

    /**
     * Search for followers by query
     */
    async searchFans(requestParameters: SearchFansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListMembersResponseDto> {
        const response = await this.searchFansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for following by query
     */
    async searchFollowingRaw(requestParameters: SearchFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListMembersResponseDto>> {
        if (requestParameters.searchFollowRequestDto === null || requestParameters.searchFollowRequestDto === undefined) {
            throw new runtime.RequiredError('searchFollowRequestDto','Required parameter requestParameters.searchFollowRequestDto was null or undefined when calling searchFollowing.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/following/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchFollowRequestDtoToJSON(requestParameters.searchFollowRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListMembersResponseDtoFromJSON(jsonValue));
    }

    /**
     * Search for following by query
     */
    async searchFollowing(requestParameters: SearchFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListMembersResponseDto> {
        const response = await this.searchFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unblocks a follower
     */
    async unblockFollowerRaw(requestParameters: UnblockFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling unblockFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/unblock/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unblocks a follower
     */
    async unblockFollower(requestParameters: UnblockFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unblockFollowerRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a following
     */
    async unfollowCreatorRaw(requestParameters: UnfollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling unfollowCreator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/follow/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a following
     */
    async unfollowCreator(requestParameters: UnfollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowCreatorRaw(requestParameters, initOverrides);
    }

}
