/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetFansResponseDto,
    GetFansResponseDtoFromJSON,
    GetFansResponseDtoToJSON,
    GetFollowingResponseDto,
    GetFollowingResponseDtoFromJSON,
    GetFollowingResponseDtoToJSON,
    ReportFanDto,
    ReportFanDtoFromJSON,
    ReportFanDtoToJSON,
} from '../models';

export interface FollowBlockFollowerRequest {
    followerId: string;
}

export interface FollowCheckFollowRequest {
    creatorId: string;
}

export interface FollowFollowCreatorRequest {
    creatorId: string;
}

export interface FollowReportFollowerRequest {
    followerId: string;
    reportFanDto: ReportFanDto;
}

export interface FollowRestrictFollowerRequest {
    followerId: string;
}

export interface FollowSearchFansRequest {
    body: object;
}

export interface FollowUnblockFlowerRequest {
    followerId: string;
}

export interface FollowUnfollowCreatorRequest {
    creatorId: string;
}

export interface FollowUnrestrictFollowerRequest {
    followerId: string;
}

/**
 * 
 */
export class FollowApi extends runtime.BaseAPI {

    /**
     * Blocks a follower
     */
    async followBlockFollowerRaw(requestParameters: FollowBlockFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling followBlockFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/block/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Blocks a follower
     */
    async followBlockFollower(requestParameters: FollowBlockFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.followBlockFollowerRaw(requestParameters, initOverrides);
    }

    /**
     * Check if you follow a creator
     */
    async followCheckFollowRaw(requestParameters: FollowCheckFollowRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling followCheckFollow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/check/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if you follow a creator
     */
    async followCheckFollow(requestParameters: FollowCheckFollowRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.followCheckFollowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a follow
     */
    async followFollowCreatorRaw(requestParameters: FollowFollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetFollowingResponseDto>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling followFollowCreator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFollowingResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a follow
     */
    async followFollowCreator(requestParameters: FollowFollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetFollowingResponseDto> {
        const response = await this.followFollowCreatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reports a follower
     */
    async followReportFollowerRaw(requestParameters: FollowReportFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling followReportFollower.');
        }

        if (requestParameters.reportFanDto === null || requestParameters.reportFanDto === undefined) {
            throw new runtime.RequiredError('reportFanDto','Required parameter requestParameters.reportFanDto was null or undefined when calling followReportFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/follow/report/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportFanDtoToJSON(requestParameters.reportFanDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports a follower
     */
    async followReportFollower(requestParameters: FollowReportFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.followReportFollowerRaw(requestParameters, initOverrides);
    }

    /**
     * Restricts a follower
     */
    async followRestrictFollowerRaw(requestParameters: FollowRestrictFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling followRestrictFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/restrict/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restricts a follower
     */
    async followRestrictFollower(requestParameters: FollowRestrictFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.followRestrictFollowerRaw(requestParameters, initOverrides);
    }

    /**
     * Search for followers by query
     */
    async followSearchFansRaw(requestParameters: FollowSearchFansRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetFansResponseDto>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling followSearchFans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/follow/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFansResponseDtoFromJSON(jsonValue));
    }

    /**
     * Search for followers by query
     */
    async followSearchFans(requestParameters: FollowSearchFansRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetFansResponseDto> {
        const response = await this.followSearchFansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unblocks a follower
     */
    async followUnblockFlowerRaw(requestParameters: FollowUnblockFlowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling followUnblockFlower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/unblock/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unblocks a follower
     */
    async followUnblockFlower(requestParameters: FollowUnblockFlowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.followUnblockFlowerRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a following
     */
    async followUnfollowCreatorRaw(requestParameters: FollowUnfollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.creatorId === null || requestParameters.creatorId === undefined) {
            throw new runtime.RequiredError('creatorId','Required parameter requestParameters.creatorId was null or undefined when calling followUnfollowCreator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/{creatorId}`.replace(`{${"creatorId"}}`, encodeURIComponent(String(requestParameters.creatorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a following
     */
    async followUnfollowCreator(requestParameters: FollowUnfollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.followUnfollowCreatorRaw(requestParameters, initOverrides);
    }

    /**
     * Unrestricts a follower
     */
    async followUnrestrictFollowerRaw(requestParameters: FollowUnrestrictFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling followUnrestrictFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follow/unrestrict/{followerId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unrestricts a follower
     */
    async followUnrestrictFollower(requestParameters: FollowUnrestrictFollowerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.followUnrestrictFollowerRaw(requestParameters, initOverrides);
    }

}
