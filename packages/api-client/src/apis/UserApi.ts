/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchCreatorRequestDto,
  SearchCreatorResponseDto,
  SetInitialUserInfoRequestDto,
  SetInitialUserInfoResponseDto,
  UpdateDisplayNameRequestDto,
  UpdateUsernameRequestDto,
  VerifyEmailDto,
} from '../models';
import {
    SearchCreatorRequestDtoFromJSON,
    SearchCreatorRequestDtoToJSON,
    SearchCreatorResponseDtoFromJSON,
    SearchCreatorResponseDtoToJSON,
    SetInitialUserInfoRequestDtoFromJSON,
    SetInitialUserInfoRequestDtoToJSON,
    SetInitialUserInfoResponseDtoFromJSON,
    SetInitialUserInfoResponseDtoToJSON,
    UpdateDisplayNameRequestDtoFromJSON,
    UpdateDisplayNameRequestDtoToJSON,
    UpdateUsernameRequestDtoFromJSON,
    UpdateUsernameRequestDtoToJSON,
    VerifyEmailDtoFromJSON,
    VerifyEmailDtoToJSON,
} from '../models';

export interface SearchCreatorByUsernameRequest {
    searchCreatorRequestDto: SearchCreatorRequestDto;
}

export interface SetDisplayNameRequest {
    updateDisplayNameRequestDto: UpdateDisplayNameRequestDto;
}

export interface SetInitialInfoRequest {
    setInitialUserInfoRequestDto: SetInitialUserInfoRequestDto;
}

export interface SetUsernameRequest {
    updateUsernameRequestDto: UpdateUsernameRequestDto;
}

export interface ValidateUsernameRequest {
    username: string;
}

export interface VerifyEmailRequest {
    verifyEmailDto: VerifyEmailDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Activate a user account
     */
    async activateUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/activate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Activate a user account
     */
    async activateUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.activateUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deactivate a user account
     */
    async deactivateUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/deactivate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deactivate a user account
     */
    async deactivateUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deactivateUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Flags self as adult
     */
    async makeAdultRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/adult`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Flags self as adult
     */
    async makeAdult(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.makeAdultRaw(initOverrides);
    }

    /**
     * Make yourself a creator
     */
    async makeCreatorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/make/creator`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Make yourself a creator
     */
    async makeCreator(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.makeCreatorRaw(initOverrides);
    }

    /**
     * Search for creators by query
     */
    async searchCreatorByUsernameRaw(requestParameters: SearchCreatorByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchCreatorResponseDto>> {
        if (requestParameters.searchCreatorRequestDto === null || requestParameters.searchCreatorRequestDto === undefined) {
            throw new runtime.RequiredError('searchCreatorRequestDto','Required parameter requestParameters.searchCreatorRequestDto was null or undefined when calling searchCreatorByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/creator/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchCreatorRequestDtoToJSON(requestParameters.searchCreatorRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchCreatorResponseDtoFromJSON(jsonValue));
    }

    /**
     * Search for creators by query
     */
    async searchCreatorByUsername(requestParameters: SearchCreatorByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchCreatorResponseDto> {
        const response = await this.searchCreatorByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set display name for current user
     */
    async setDisplayNameRaw(requestParameters: SetDisplayNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateDisplayNameRequestDto === null || requestParameters.updateDisplayNameRequestDto === undefined) {
            throw new runtime.RequiredError('updateDisplayNameRequestDto','Required parameter requestParameters.updateDisplayNameRequestDto was null or undefined when calling setDisplayName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/set-display-name`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDisplayNameRequestDtoToJSON(requestParameters.updateDisplayNameRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set display name for current user
     */
    async setDisplayName(requestParameters: SetDisplayNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setDisplayNameRaw(requestParameters, initOverrides);
    }

    /**
     * Sets initial user info
     */
    async setInitialInfoRaw(requestParameters: SetInitialInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetInitialUserInfoResponseDto>> {
        if (requestParameters.setInitialUserInfoRequestDto === null || requestParameters.setInitialUserInfoRequestDto === undefined) {
            throw new runtime.RequiredError('setInitialUserInfoRequestDto','Required parameter requestParameters.setInitialUserInfoRequestDto was null or undefined when calling setInitialInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/set-initial-info`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SetInitialUserInfoRequestDtoToJSON(requestParameters.setInitialUserInfoRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetInitialUserInfoResponseDtoFromJSON(jsonValue));
    }

    /**
     * Sets initial user info
     */
    async setInitialInfo(requestParameters: SetInitialInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetInitialUserInfoResponseDto> {
        const response = await this.setInitialInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set username for current user
     */
    async setUsernameRaw(requestParameters: SetUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateUsernameRequestDto === null || requestParameters.updateUsernameRequestDto === undefined) {
            throw new runtime.RequiredError('updateUsernameRequestDto','Required parameter requestParameters.updateUsernameRequestDto was null or undefined when calling setUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/set-username`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUsernameRequestDtoToJSON(requestParameters.updateUsernameRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set username for current user
     */
    async setUsername(requestParameters: SetUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setUsernameRaw(requestParameters, initOverrides);
    }

    /**
     * Validates whether a username is available
     */
    async validateUsernameRaw(requestParameters: ValidateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling validateUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/username/validate/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Validates whether a username is available
     */
    async validateUsername(requestParameters: ValidateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.validateUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify email for the current user
     */
    async verifyEmailRaw(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.verifyEmailDto === null || requestParameters.verifyEmailDto === undefined) {
            throw new runtime.RequiredError('verifyEmailDto','Required parameter requestParameters.verifyEmailDto was null or undefined when calling verifyEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/verify-email`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailDtoToJSON(requestParameters.verifyEmailDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify email for the current user
     */
    async verifyEmail(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifyEmailRaw(requestParameters, initOverrides);
    }

}
