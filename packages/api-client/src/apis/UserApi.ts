/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetUserResponseDto,
    GetUserResponseDtoFromJSON,
    GetUserResponseDtoToJSON,
    SearchCreatorRequestDto,
    SearchCreatorRequestDtoFromJSON,
    SearchCreatorRequestDtoToJSON,
    SearchCreatorResponseDto,
    SearchCreatorResponseDtoFromJSON,
    SearchCreatorResponseDtoToJSON,
    UpdateUserRequestDto,
    UpdateUserRequestDtoFromJSON,
    UpdateUserRequestDtoToJSON,
    UpdateUsernameRequestDto,
    UpdateUsernameRequestDtoFromJSON,
    UpdateUsernameRequestDtoToJSON,
} from '../models';

export interface UserFindOneRequest {
    id: string;
}

export interface UserSearchCreatorByUsernameRequest {
    searchCreatorRequestDto: SearchCreatorRequestDto;
}

export interface UserSetUsernameRequest {
    updateUsernameRequestDto: UpdateUsernameRequestDto;
}

export interface UserUpdateRequest {
    updateUserRequestDto: UpdateUserRequestDto;
}

export interface UserValidateUsernameRequest {
    username: string;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Disables a user account
     */
    async userDeleteRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disables a user account
     */
    async userDelete(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.userDeleteRaw(initOverrides);
    }

    /**
     * Gets a user
     */
    async userFindOneRaw(requestParameters: UserFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetUserResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a user
     */
    async userFindOne(requestParameters: UserFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetUserResponseDto> {
        const response = await this.userFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for creators by query
     */
    async userSearchCreatorByUsernameRaw(requestParameters: UserSearchCreatorByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SearchCreatorResponseDto>> {
        if (requestParameters.searchCreatorRequestDto === null || requestParameters.searchCreatorRequestDto === undefined) {
            throw new runtime.RequiredError('searchCreatorRequestDto','Required parameter requestParameters.searchCreatorRequestDto was null or undefined when calling userSearchCreatorByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/creator/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchCreatorRequestDtoToJSON(requestParameters.searchCreatorRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchCreatorResponseDtoFromJSON(jsonValue));
    }

    /**
     * Search for creators by query
     */
    async userSearchCreatorByUsername(requestParameters: UserSearchCreatorByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SearchCreatorResponseDto> {
        const response = await this.userSearchCreatorByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set username for current user
     */
    async userSetUsernameRaw(requestParameters: UserSetUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateUsernameRequestDto === null || requestParameters.updateUsernameRequestDto === undefined) {
            throw new runtime.RequiredError('updateUsernameRequestDto','Required parameter requestParameters.updateUsernameRequestDto was null or undefined when calling userSetUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/username`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUsernameRequestDtoToJSON(requestParameters.updateUsernameRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set username for current user
     */
    async userSetUsername(requestParameters: UserSetUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.userSetUsernameRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a user
     */
    async userUpdateRaw(requestParameters: UserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetUserResponseDto>> {
        if (requestParameters.updateUserRequestDto === null || requestParameters.updateUserRequestDto === undefined) {
            throw new runtime.RequiredError('updateUserRequestDto','Required parameter requestParameters.updateUserRequestDto was null or undefined when calling userUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestDtoToJSON(requestParameters.updateUserRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Updates a user
     */
    async userUpdate(requestParameters: UserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetUserResponseDto> {
        const response = await this.userUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates whether a username is available
     */
    async userValidateUsernameRaw(requestParameters: UserValidateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling userValidateUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/usernames/validate/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Validates whether a username is available
     */
    async userValidateUsername(requestParameters: UserValidateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.userValidateUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
