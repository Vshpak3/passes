/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUserDto,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    GetUserDto,
    GetUserDtoFromJSON,
    GetUserDtoToJSON,
    SearchCreatorResponseDto,
    SearchCreatorResponseDtoFromJSON,
    SearchCreatorResponseDtoToJSON,
    UpdateUserDto,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
} from '../models';

export interface UserCreateRequest {
    createUserDto: CreateUserDto;
}

export interface UserFindOneRequest {
    id: string;
}

export interface UserSearchCreatorByUsernameRequest {
    body: object;
}

export interface UserUpdateRequest {
    updateUserDto: UpdateUserDto;
}

export interface UserValidateUsernameRequest {
    username: string;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Creates a user
     */
    async userCreateRaw(requestParameters: UserCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateUserDto>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling userCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserDtoFromJSON(jsonValue));
    }

    /**
     * Creates a user
     */
    async userCreate(requestParameters: UserCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateUserDto> {
        const response = await this.userCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disables a user account
     */
    async userDeleteRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disables a user account
     */
    async userDelete(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.userDeleteRaw(initOverrides);
    }

    /**
     * Gets a user
     */
    async userFindOneRaw(requestParameters: UserFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetUserDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserDtoFromJSON(jsonValue));
    }

    /**
     * Gets a user
     */
    async userFindOne(requestParameters: UserFindOneRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetUserDto> {
        const response = await this.userFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for creators by query
     */
    async userSearchCreatorByUsernameRaw(requestParameters: UserSearchCreatorByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SearchCreatorResponseDto>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userSearchCreatorByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/creator/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchCreatorResponseDtoFromJSON(jsonValue));
    }

    /**
     * Search for creators by query
     */
    async userSearchCreatorByUsername(requestParameters: UserSearchCreatorByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SearchCreatorResponseDto> {
        const response = await this.userSearchCreatorByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a user
     */
    async userUpdateRaw(requestParameters: UserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetUserDto>> {
        if (requestParameters.updateUserDto === null || requestParameters.updateUserDto === undefined) {
            throw new runtime.RequiredError('updateUserDto','Required parameter requestParameters.updateUserDto was null or undefined when calling userUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters.updateUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserDtoFromJSON(jsonValue));
    }

    /**
     * Updates a user
     */
    async userUpdate(requestParameters: UserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetUserDto> {
        const response = await this.userUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates whether a username is available
     */
    async userValidateUsernameRaw(requestParameters: UserValidateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling userValidateUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/usernames/validate/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Validates whether a username is available
     */
    async userValidateUsername(requestParameters: UserValidateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.userValidateUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
