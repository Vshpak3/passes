/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanResponseDto,
  DeleteScheduledEventRequestDto,
  GetScheduledEventsRequestDto,
  GetScheduledEventsResponseDto,
  UpdateScheduledEventRequestDto,
  UpdateScheduledTimeRequestDto,
} from '../models';
import {
    BooleanResponseDtoFromJSON,
    BooleanResponseDtoToJSON,
    DeleteScheduledEventRequestDtoFromJSON,
    DeleteScheduledEventRequestDtoToJSON,
    GetScheduledEventsRequestDtoFromJSON,
    GetScheduledEventsRequestDtoToJSON,
    GetScheduledEventsResponseDtoFromJSON,
    GetScheduledEventsResponseDtoToJSON,
    UpdateScheduledEventRequestDtoFromJSON,
    UpdateScheduledEventRequestDtoToJSON,
    UpdateScheduledTimeRequestDtoFromJSON,
    UpdateScheduledTimeRequestDtoToJSON,
} from '../models';

export interface DeleteScheduledEventRequest {
    deleteScheduledEventRequestDto: DeleteScheduledEventRequestDto;
}

export interface GetScheduledEventsRequest {
    getScheduledEventsRequestDto: GetScheduledEventsRequestDto;
}

export interface UpdateScheduledEventBodyRequest {
    updateScheduledEventRequestDto: UpdateScheduledEventRequestDto;
}

export interface UpdateScheduledEventTimeRequest {
    updateScheduledTimeRequestDto: UpdateScheduledTimeRequestDto;
}

/**
 * 
 */
export class ScheduledApi extends runtime.BaseAPI {

    /**
     * Delete scheduled event
     */
    async deleteScheduledEventRaw(requestParameters: DeleteScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.deleteScheduledEventRequestDto === null || requestParameters.deleteScheduledEventRequestDto === undefined) {
            throw new runtime.RequiredError('deleteScheduledEventRequestDto','Required parameter requestParameters.deleteScheduledEventRequestDto was null or undefined when calling deleteScheduledEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/scheduled/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteScheduledEventRequestDtoToJSON(requestParameters.deleteScheduledEventRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete scheduled event
     */
    async deleteScheduledEvent(requestParameters: DeleteScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.deleteScheduledEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get scheduled event
     */
    async getScheduledEventsRaw(requestParameters: GetScheduledEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetScheduledEventsResponseDto>> {
        if (requestParameters.getScheduledEventsRequestDto === null || requestParameters.getScheduledEventsRequestDto === undefined) {
            throw new runtime.RequiredError('getScheduledEventsRequestDto','Required parameter requestParameters.getScheduledEventsRequestDto was null or undefined when calling getScheduledEvents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/scheduled/get-range`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetScheduledEventsRequestDtoToJSON(requestParameters.getScheduledEventsRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetScheduledEventsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get scheduled event
     */
    async getScheduledEvents(requestParameters: GetScheduledEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetScheduledEventsResponseDto> {
        const response = await this.getScheduledEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update scheduled event body
     */
    async updateScheduledEventBodyRaw(requestParameters: UpdateScheduledEventBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.updateScheduledEventRequestDto === null || requestParameters.updateScheduledEventRequestDto === undefined) {
            throw new runtime.RequiredError('updateScheduledEventRequestDto','Required parameter requestParameters.updateScheduledEventRequestDto was null or undefined when calling updateScheduledEventBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/scheduled/update/body`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduledEventRequestDtoToJSON(requestParameters.updateScheduledEventRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update scheduled event body
     */
    async updateScheduledEventBody(requestParameters: UpdateScheduledEventBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.updateScheduledEventBodyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update scheduled event time
     */
    async updateScheduledEventTimeRaw(requestParameters: UpdateScheduledEventTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.updateScheduledTimeRequestDto === null || requestParameters.updateScheduledTimeRequestDto === undefined) {
            throw new runtime.RequiredError('updateScheduledTimeRequestDto','Required parameter requestParameters.updateScheduledTimeRequestDto was null or undefined when calling updateScheduledEventTime.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")

        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }
        const response = await this.request({
            path: `/api/scheduled/update/time`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduledTimeRequestDtoToJSON(requestParameters.updateScheduledTimeRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update scheduled event time
     */
    async updateScheduledEventTime(requestParameters: UpdateScheduledEventTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.updateScheduledEventTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
