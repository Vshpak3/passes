/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommentDto,
    CommentDtoFromJSON,
    CommentDtoToJSON,
    CreateFanWallCommentRequestDto,
    CreateFanWallCommentRequestDtoFromJSON,
    CreateFanWallCommentRequestDtoToJSON,
    GetFanWallForCreatorResponseDto,
    GetFanWallForCreatorResponseDtoFromJSON,
    GetFanWallForCreatorResponseDtoToJSON,
} from '../models';

export interface CreateFanWallCommentRequest {
    createFanWallCommentRequestDto: CreateFanWallCommentRequestDto;
}

export interface DeleteFanWallCommentRequest {
    id: string;
}

export interface GetFanWallForCreatorRequest {
    username: string;
}

export interface HideFanWallCommentRequest {
    id: string;
}

/**
 * 
 */
export class FanWallApi extends runtime.BaseAPI {

    /**
     * Creates a fan wall comment
     */
    async createFanWallCommentRaw(requestParameters: CreateFanWallCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CommentDto>> {
        if (requestParameters.createFanWallCommentRequestDto === null || requestParameters.createFanWallCommentRequestDto === undefined) {
            throw new runtime.RequiredError('createFanWallCommentRequestDto','Required parameter requestParameters.createFanWallCommentRequestDto was null or undefined when calling createFanWallComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/fan-wall`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFanWallCommentRequestDtoToJSON(requestParameters.createFanWallCommentRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentDtoFromJSON(jsonValue));
    }

    /**
     * Creates a fan wall comment
     */
    async createFanWallComment(requestParameters: CreateFanWallCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CommentDto> {
        const response = await this.createFanWallCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a comment
     */
    async deleteFanWallCommentRaw(requestParameters: DeleteFanWallCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFanWallComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fan-wall/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a comment
     */
    async deleteFanWallComment(requestParameters: DeleteFanWallCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteFanWallCommentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets fan wall for a creator
     */
    async getFanWallForCreatorRaw(requestParameters: GetFanWallForCreatorRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetFanWallForCreatorResponseDto>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getFanWallForCreator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fan-wall/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFanWallForCreatorResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets fan wall for a creator
     */
    async getFanWallForCreator(requestParameters: GetFanWallForCreatorRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetFanWallForCreatorResponseDto> {
        const response = await this.getFanWallForCreatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hides a comment
     */
    async hideFanWallCommentRaw(requestParameters: HideFanWallCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hideFanWallComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fan-wall/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Hides a comment
     */
    async hideFanWallComment(requestParameters: HideFanWallCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.hideFanWallCommentRaw(requestParameters, initOverrides);
    }

}
