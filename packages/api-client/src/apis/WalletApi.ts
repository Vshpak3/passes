/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthWalletRequestDto,
  AuthWalletResponseDto,
  BooleanResponseDto,
  CreateUnauthenticatedWalletRequestDto,
  CreateWalletRequestDto,
  GetCustodialWalletRequestDto,
  GetDefaultWalletRequestDto,
  GetWalletResponseDto,
  GetWalletsResponseDto,
  SetDefaultWalletRequestDto,
} from '../models';
import {
    AuthWalletRequestDtoFromJSON,
    AuthWalletRequestDtoToJSON,
    AuthWalletResponseDtoFromJSON,
    AuthWalletResponseDtoToJSON,
    BooleanResponseDtoFromJSON,
    BooleanResponseDtoToJSON,
    CreateUnauthenticatedWalletRequestDtoFromJSON,
    CreateUnauthenticatedWalletRequestDtoToJSON,
    CreateWalletRequestDtoFromJSON,
    CreateWalletRequestDtoToJSON,
    GetCustodialWalletRequestDtoFromJSON,
    GetCustodialWalletRequestDtoToJSON,
    GetDefaultWalletRequestDtoFromJSON,
    GetDefaultWalletRequestDtoToJSON,
    GetWalletResponseDtoFromJSON,
    GetWalletResponseDtoToJSON,
    GetWalletsResponseDtoFromJSON,
    GetWalletsResponseDtoToJSON,
    SetDefaultWalletRequestDtoFromJSON,
    SetDefaultWalletRequestDtoToJSON,
} from '../models';

export interface AuthMessageRequest {
    authWalletRequestDto: AuthWalletRequestDto;
}

export interface CreateUnauthenticatedWalletRequest {
    createUnauthenticatedWalletRequestDto: CreateUnauthenticatedWalletRequestDto;
}

export interface CreateWalletRequest {
    createWalletRequestDto: CreateWalletRequestDto;
}

export interface GetDefaultWalletRequest {
    getDefaultWalletRequestDto: GetDefaultWalletRequestDto;
}

export interface GetUserCustodialWalletRequest {
    getCustodialWalletRequestDto: GetCustodialWalletRequestDto;
}

export interface RemoveWalletRequest {
    walletId: string;
}

export interface SetDefaultWalletRequest {
    setDefaultWalletRequestDto: SetDefaultWalletRequestDto;
}

/**
 * 
 */
export class WalletApi extends runtime.BaseAPI {

    /**
     * Creates wallet auth message to sign
     */
    async authMessageRaw(requestParameters: AuthMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthWalletResponseDto>> {
        if (requestParameters.authWalletRequestDto === null || requestParameters.authWalletRequestDto === undefined) {
            throw new runtime.RequiredError('authWalletRequestDto','Required parameter requestParameters.authWalletRequestDto was null or undefined when calling authMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthWalletRequestDtoToJSON(requestParameters.authWalletRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthWalletResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates wallet auth message to sign
     */
    async authMessage(requestParameters: AuthMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthWalletResponseDto> {
        const response = await this.authMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates unchecked wallet for a user
     */
    async createUnauthenticatedWalletRaw(requestParameters: CreateUnauthenticatedWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createUnauthenticatedWalletRequestDto === null || requestParameters.createUnauthenticatedWalletRequestDto === undefined) {
            throw new runtime.RequiredError('createUnauthenticatedWalletRequestDto','Required parameter requestParameters.createUnauthenticatedWalletRequestDto was null or undefined when calling createUnauthenticatedWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/unauthenticated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUnauthenticatedWalletRequestDtoToJSON(requestParameters.createUnauthenticatedWalletRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates unchecked wallet for a user
     */
    async createUnauthenticatedWallet(requestParameters: CreateUnauthenticatedWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createUnauthenticatedWalletRaw(requestParameters, initOverrides);
    }

    /**
     * Creates authenticated wallet for a user
     */
    async createWalletRaw(requestParameters: CreateWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponseDto>> {
        if (requestParameters.createWalletRequestDto === null || requestParameters.createWalletRequestDto === undefined) {
            throw new runtime.RequiredError('createWalletRequestDto','Required parameter requestParameters.createWalletRequestDto was null or undefined when calling createWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/authenticated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWalletRequestDtoToJSON(requestParameters.createWalletRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates authenticated wallet for a user
     */
    async createWallet(requestParameters: CreateWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponseDto> {
        const response = await this.createWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get default wallet
     */
    async getDefaultWalletRaw(requestParameters: GetDefaultWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWalletResponseDto>> {
        if (requestParameters.getDefaultWalletRequestDto === null || requestParameters.getDefaultWalletRequestDto === undefined) {
            throw new runtime.RequiredError('getDefaultWalletRequestDto','Required parameter requestParameters.getDefaultWalletRequestDto was null or undefined when calling getDefaultWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/find-default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetDefaultWalletRequestDtoToJSON(requestParameters.getDefaultWalletRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWalletResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get default wallet
     */
    async getDefaultWallet(requestParameters: GetDefaultWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWalletResponseDto> {
        const response = await this.getDefaultWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user custodial wallet
     */
    async getUserCustodialWalletRaw(requestParameters: GetUserCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWalletResponseDto>> {
        if (requestParameters.getCustodialWalletRequestDto === null || requestParameters.getCustodialWalletRequestDto === undefined) {
            throw new runtime.RequiredError('getCustodialWalletRequestDto','Required parameter requestParameters.getCustodialWalletRequestDto was null or undefined when calling getUserCustodialWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/custodial`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCustodialWalletRequestDtoToJSON(requestParameters.getCustodialWalletRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWalletResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get user custodial wallet
     */
    async getUserCustodialWallet(requestParameters: GetUserCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWalletResponseDto> {
        const response = await this.getUserCustodialWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get wallets for user
     */
    async getWalletsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWalletsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/wallets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWalletsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get wallets for user
     */
    async getWallets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWalletsResponseDto> {
        const response = await this.getWalletsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Removes wallet for a user
     */
    async removeWalletRaw(requestParameters: RemoveWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.walletId === null || requestParameters.walletId === undefined) {
            throw new runtime.RequiredError('walletId','Required parameter requestParameters.walletId was null or undefined when calling removeWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/ownership/{walletId}`.replace(`{${"walletId"}}`, encodeURIComponent(String(requestParameters.walletId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes wallet for a user
     */
    async removeWallet(requestParameters: RemoveWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeWalletRaw(requestParameters, initOverrides);
    }

    /**
     * Set default wallet
     */
    async setDefaultWalletRaw(requestParameters: SetDefaultWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setDefaultWalletRequestDto === null || requestParameters.setDefaultWalletRequestDto === undefined) {
            throw new runtime.RequiredError('setDefaultWalletRequestDto','Required parameter requestParameters.setDefaultWalletRequestDto was null or undefined when calling setDefaultWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const token = window.localStorage.getItem("access-token")
        if (token) {
            headerParameters["Authorization"] = `Bearer ${JSON.parse(token)}`;
        }

        const response = await this.request({
            path: `/api/wallet/set-default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetDefaultWalletRequestDtoToJSON(requestParameters.setDefaultWalletRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set default wallet
     */
    async setDefaultWallet(requestParameters: SetDefaultWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setDefaultWalletRaw(requestParameters, initOverrides);
    }

}
