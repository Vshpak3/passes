/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthTokenResponseDto,
    AuthTokenResponseDtoFromJSON,
    AuthTokenResponseDtoToJSON,
    GetUserResponseDto,
    GetUserResponseDtoFromJSON,
    GetUserResponseDtoToJSON,
    RefreshAuthTokenRequestDto,
    RefreshAuthTokenRequestDtoFromJSON,
    RefreshAuthTokenRequestDtoToJSON,
    SetEmailRequestDto,
    SetEmailRequestDtoFromJSON,
    SetEmailRequestDtoToJSON,
    SetEmailResponseDto,
    SetEmailResponseDtoFromJSON,
    SetEmailResponseDtoToJSON,
} from '../models';

export interface RefreshAccessTokenRequest {
    refreshAuthTokenRequestDto: RefreshAuthTokenRequestDto;
}

export interface SetUserEmailRequest {
    setEmailRequestDto: SetEmailRequestDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Gets the current authenticated user
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetUserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets the current authenticated user
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetUserResponseDto> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh the access token
     */
    async refreshAccessTokenRaw(requestParameters: RefreshAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AuthTokenResponseDto>> {
        if (requestParameters.refreshAuthTokenRequestDto === null || requestParameters.refreshAuthTokenRequestDto === undefined) {
            throw new runtime.RequiredError('refreshAuthTokenRequestDto','Required parameter requestParameters.refreshAuthTokenRequestDto was null or undefined when calling refreshAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshAuthTokenRequestDtoToJSON(requestParameters.refreshAuthTokenRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Refresh the access token
     */
    async refreshAccessToken(requestParameters: RefreshAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AuthTokenResponseDto> {
        const response = await this.refreshAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the user email
     */
    async setUserEmailRaw(requestParameters: SetUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SetEmailResponseDto>> {
        if (requestParameters.setEmailRequestDto === null || requestParameters.setEmailRequestDto === undefined) {
            throw new runtime.RequiredError('setEmailRequestDto','Required parameter requestParameters.setEmailRequestDto was null or undefined when calling setUserEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/set-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetEmailRequestDtoToJSON(requestParameters.setEmailRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetEmailResponseDtoFromJSON(jsonValue));
    }

    /**
     * Sets the user email
     */
    async setUserEmail(requestParameters: SetUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SetEmailResponseDto> {
        const response = await this.setUserEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
