/* tslint:disable */
/* eslint-disable */
/**
 * Moment Backend
 * Be in the moment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface LambdaGetEncryptionKeyRequest {
    keyId: string;
}

export interface LambdaGetPublicAddressRequest {
    keyId: string;
}

export interface LambdaSignMessageRequest {
    keyId: string;
    body: object;
}

/**
 * 
 */
export class LambdaApi extends runtime.BaseAPI {

    /**
     * Create Address
     */
    async lambdaGetEncryptionKeyRaw(requestParameters: LambdaGetEncryptionKeyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling lambdaGetEncryptionKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lambda/create/address/{keyId}`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create Address
     */
    async lambdaGetEncryptionKey(requestParameters: LambdaGetEncryptionKeyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.lambdaGetEncryptionKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get public Address
     */
    async lambdaGetPublicAddressRaw(requestParameters: LambdaGetPublicAddressRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling lambdaGetPublicAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lambda/public/address/{keyId}`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * get public Address
     */
    async lambdaGetPublicAddress(requestParameters: LambdaGetPublicAddressRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.lambdaGetPublicAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * sign message
     */
    async lambdaSignMessageRaw(requestParameters: LambdaSignMessageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling lambdaSignMessage.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling lambdaSignMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/lambda/sign/message/{keyId}`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * sign message
     */
    async lambdaSignMessage(requestParameters: LambdaSignMessageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.lambdaSignMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
