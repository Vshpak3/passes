/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokensResponseDto,
  ConfirmResetPasswordRequestDto,
  CreateLocalUserRequestDto,
  InitResetPasswordRequestDto,
  LocalUserLoginRequestDto,
  UpdatePasswordRequestDto,
} from '../models';
import {
    AccessTokensResponseDtoFromJSON,
    AccessTokensResponseDtoToJSON,
    ConfirmResetPasswordRequestDtoFromJSON,
    ConfirmResetPasswordRequestDtoToJSON,
    CreateLocalUserRequestDtoFromJSON,
    CreateLocalUserRequestDtoToJSON,
    InitResetPasswordRequestDtoFromJSON,
    InitResetPasswordRequestDtoToJSON,
    LocalUserLoginRequestDtoFromJSON,
    LocalUserLoginRequestDtoToJSON,
    UpdatePasswordRequestDtoFromJSON,
    UpdatePasswordRequestDtoToJSON,
} from '../models';

export interface ChangePasswordRequest {
    updatePasswordRequestDto: UpdatePasswordRequestDto;
}

export interface ConfirmPasswordResetRequest {
    confirmResetPasswordRequestDto: ConfirmResetPasswordRequestDto;
}

export interface CreateEmailPasswordUserRequest {
    createLocalUserRequestDto: CreateLocalUserRequestDto;
}

export interface InitPasswordResetRequest {
    initResetPasswordRequestDto: InitResetPasswordRequestDto;
}

export interface LoginWithEmailPasswordRequest {
    localUserLoginRequestDto: LocalUserLoginRequestDto;
}

/**
 * 
 */
export class AuthLocalApi extends runtime.BaseAPI {

    /**
     * Change password for current user
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updatePasswordRequestDto === null || requestParameters.updatePasswordRequestDto === undefined) {
            throw new runtime.RequiredError('updatePasswordRequestDto','Required parameter requestParameters.updatePasswordRequestDto was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/local/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordRequestDtoToJSON(requestParameters.updatePasswordRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change password for current user
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Confirms reset password
     */
    async confirmPasswordResetRaw(requestParameters: ConfirmPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.confirmResetPasswordRequestDto === null || requestParameters.confirmResetPasswordRequestDto === undefined) {
            throw new runtime.RequiredError('confirmResetPasswordRequestDto','Required parameter requestParameters.confirmResetPasswordRequestDto was null or undefined when calling confirmPasswordReset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/local/confirm-reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmResetPasswordRequestDtoToJSON(requestParameters.confirmResetPasswordRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirms reset password
     */
    async confirmPasswordReset(requestParameters: ConfirmPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.confirmPasswordResetRaw(requestParameters, initOverrides);
    }

    /**
     * Create a email and password user
     */
    async createEmailPasswordUserRaw(requestParameters: CreateEmailPasswordUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokensResponseDto>> {
        if (requestParameters.createLocalUserRequestDto === null || requestParameters.createLocalUserRequestDto === undefined) {
            throw new runtime.RequiredError('createLocalUserRequestDto','Required parameter requestParameters.createLocalUserRequestDto was null or undefined when calling createEmailPasswordUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/local/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLocalUserRequestDtoToJSON(requestParameters.createLocalUserRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokensResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a email and password user
     */
    async createEmailPasswordUser(requestParameters: CreateEmailPasswordUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokensResponseDto> {
        const response = await this.createEmailPasswordUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send reset password email to user
     */
    async initPasswordResetRaw(requestParameters: InitPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.initResetPasswordRequestDto === null || requestParameters.initResetPasswordRequestDto === undefined) {
            throw new runtime.RequiredError('initResetPasswordRequestDto','Required parameter requestParameters.initResetPasswordRequestDto was null or undefined when calling initPasswordReset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/local/init-reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitResetPasswordRequestDtoToJSON(requestParameters.initResetPasswordRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send reset password email to user
     */
    async initPasswordReset(requestParameters: InitPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.initPasswordResetRaw(requestParameters, initOverrides);
    }

    /**
     * Login with email and password
     */
    async loginWithEmailPasswordRaw(requestParameters: LoginWithEmailPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokensResponseDto>> {
        if (requestParameters.localUserLoginRequestDto === null || requestParameters.localUserLoginRequestDto === undefined) {
            throw new runtime.RequiredError('localUserLoginRequestDto','Required parameter requestParameters.localUserLoginRequestDto was null or undefined when calling loginWithEmailPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/local/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocalUserLoginRequestDtoToJSON(requestParameters.localUserLoginRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokensResponseDtoFromJSON(jsonValue));
    }

    /**
     * Login with email and password
     */
    async loginWithEmailPassword(requestParameters: LoginWithEmailPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokensResponseDto> {
        const response = await this.loginWithEmailPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
