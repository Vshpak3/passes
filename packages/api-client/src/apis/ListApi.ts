/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddListMembersRequestDto,
    AddListMembersRequestDtoFromJSON,
    AddListMembersRequestDtoToJSON,
    CreateListRequestDto,
    CreateListRequestDtoFromJSON,
    CreateListRequestDtoToJSON,
    GetListResponseDto,
    GetListResponseDtoFromJSON,
    GetListResponseDtoToJSON,
    GetListsResponseDto,
    GetListsResponseDtoFromJSON,
    GetListsResponseDtoToJSON,
    RemoveListMembersRequestDto,
    RemoveListMembersRequestDtoFromJSON,
    RemoveListMembersRequestDtoToJSON,
} from '../models';

export interface ListAddListMembersRequest {
    id: string;
    addListMembersRequestDto: AddListMembersRequestDto;
}

export interface ListCreateRequest {
    createListRequestDto: CreateListRequestDto;
}

export interface ListDeleteRequest {
    id: string;
}

export interface ListFindRequest {
    id: string;
    cursor: string;
}

export interface ListFindAllRequest {
    cursor: string;
}

export interface ListRemoveListMembersRequest {
    id: string;
    removeListMembersRequestDto: RemoveListMembersRequestDto;
}

/**
 * 
 */
export class ListApi extends runtime.BaseAPI {

    /**
     * Add ListMembers to a List
     */
    async listAddListMembersRaw(requestParameters: ListAddListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listAddListMembers.');
        }

        if (requestParameters.addListMembersRequestDto === null || requestParameters.addListMembersRequestDto === undefined) {
            throw new runtime.RequiredError('addListMembersRequestDto','Required parameter requestParameters.addListMembersRequestDto was null or undefined when calling listAddListMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/list/member/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddListMembersRequestDtoToJSON(requestParameters.addListMembersRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add ListMembers to a List
     */
    async listAddListMembers(requestParameters: ListAddListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.listAddListMembersRaw(requestParameters, initOverrides);
    }

    /**
     * Creates List for a user
     */
    async listCreateRaw(requestParameters: ListCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetListResponseDto>> {
        if (requestParameters.createListRequestDto === null || requestParameters.createListRequestDto === undefined) {
            throw new runtime.RequiredError('createListRequestDto','Required parameter requestParameters.createListRequestDto was null or undefined when calling listCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateListRequestDtoToJSON(requestParameters.createListRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates List for a user
     */
    async listCreate(requestParameters: ListCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetListResponseDto> {
        const response = await this.listCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete list for user
     */
    async listDeleteRaw(requestParameters: ListDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/list/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete list for user
     */
    async listDelete(requestParameters: ListDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.listDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list for user
     */
    async listFindRaw(requestParameters: ListFindRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetListResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listFind.');
        }

        if (requestParameters.cursor === null || requestParameters.cursor === undefined) {
            throw new runtime.RequiredError('cursor','Required parameter requestParameters.cursor was null or undefined when calling listFind.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/list/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get list for user
     */
    async listFind(requestParameters: ListFindRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetListResponseDto> {
        const response = await this.listFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all lists for user
     */
    async listFindAllRaw(requestParameters: ListFindAllRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetListsResponseDto>> {
        if (requestParameters.cursor === null || requestParameters.cursor === undefined) {
            throw new runtime.RequiredError('cursor','Required parameter requestParameters.cursor was null or undefined when calling listFindAll.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all lists for user
     */
    async listFindAll(requestParameters: ListFindAllRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetListsResponseDto> {
        const response = await this.listFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove ListMembers from a List
     */
    async listRemoveListMembersRaw(requestParameters: ListRemoveListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listRemoveListMembers.');
        }

        if (requestParameters.removeListMembersRequestDto === null || requestParameters.removeListMembersRequestDto === undefined) {
            throw new runtime.RequiredError('removeListMembersRequestDto','Required parameter requestParameters.removeListMembersRequestDto was null or undefined when calling listRemoveListMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/list/member/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveListMembersRequestDtoToJSON(requestParameters.removeListMembersRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove ListMembers from a List
     */
    async listRemoveListMembers(requestParameters: ListRemoveListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.listRemoveListMembersRaw(requestParameters, initOverrides);
    }

}
