/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateListRequestDto,
    CreateListRequestDtoFromJSON,
    CreateListRequestDtoToJSON,
    GetListMembersRequestto,
    GetListMembersRequesttoFromJSON,
    GetListMembersRequesttoToJSON,
    GetListMembersResponseDto,
    GetListMembersResponseDtoFromJSON,
    GetListMembersResponseDtoToJSON,
    GetListResponseDto,
    GetListResponseDtoFromJSON,
    GetListResponseDtoToJSON,
    GetListsResponseDto,
    GetListsResponseDtoFromJSON,
    GetListsResponseDtoToJSON,
    RemoveListMembersRequestDto,
    RemoveListMembersRequestDtoFromJSON,
    RemoveListMembersRequestDtoToJSON,
} from '../models';

export interface ListCreateListRequest {
    createListRequestDto: CreateListRequestDto;
}

export interface ListDeleteListRequest {
    listId: string;
}

export interface ListGetListRequest {
    listId: string;
}

export interface ListGetListMembersRequest {
    getListMembersRequestto: GetListMembersRequestto;
}

export interface ListRemoveListMembersRequest {
    removeListMembersRequestDto: RemoveListMembersRequestDto;
}

/**
 * 
 */
export class ListApi extends runtime.BaseAPI {

    /**
     * Creates List for a user
     */
    async listCreateListRaw(requestParameters: ListCreateListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createListRequestDto === null || requestParameters.createListRequestDto === undefined) {
            throw new runtime.RequiredError('createListRequestDto','Required parameter requestParameters.createListRequestDto was null or undefined when calling listCreateList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateListRequestDtoToJSON(requestParameters.createListRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates List for a user
     */
    async listCreateList(requestParameters: ListCreateListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.listCreateListRaw(requestParameters, initOverrides);
    }

    /**
     * Delete list for user
     */
    async listDeleteListRaw(requestParameters: ListDeleteListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling listDeleteList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/list/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete list for user
     */
    async listDeleteList(requestParameters: ListDeleteListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.listDeleteListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list for user
     */
    async listGetListRaw(requestParameters: ListGetListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetListResponseDto>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling listGetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/list/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get list for user
     */
    async listGetList(requestParameters: ListGetListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetListResponseDto> {
        const response = await this.listGetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list members for user
     */
    async listGetListMembersRaw(requestParameters: ListGetListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetListMembersResponseDto>> {
        if (requestParameters.getListMembersRequestto === null || requestParameters.getListMembersRequestto === undefined) {
            throw new runtime.RequiredError('getListMembersRequestto','Required parameter requestParameters.getListMembersRequestto was null or undefined when calling listGetListMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/list/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetListMembersRequesttoToJSON(requestParameters.getListMembersRequestto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListMembersResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get list members for user
     */
    async listGetListMembers(requestParameters: ListGetListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetListMembersResponseDto> {
        const response = await this.listGetListMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all lists for user
     */
    async listGetListsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetListsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all lists for user
     */
    async listGetLists(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetListsResponseDto> {
        const response = await this.listGetListsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove ListMembers from a List
     */
    async listRemoveListMembersRaw(requestParameters: ListRemoveListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.removeListMembersRequestDto === null || requestParameters.removeListMembersRequestDto === undefined) {
            throw new runtime.RequiredError('removeListMembersRequestDto','Required parameter requestParameters.removeListMembersRequestDto was null or undefined when calling listRemoveListMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/list/members`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveListMembersRequestDtoToJSON(requestParameters.removeListMembersRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove ListMembers from a List
     */
    async listRemoveListMembers(requestParameters: ListRemoveListMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.listRemoveListMembersRaw(requestParameters, initOverrides);
    }

}
