/* tslint:disable */
/* eslint-disable */
/**
 * Passes Backend
 * Get your pass
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateCommentRequestDto,
    CreateCommentRequestDtoFromJSON,
    CreateCommentRequestDtoToJSON,
    GetCommentsForPostResponseDto,
    GetCommentsForPostResponseDtoFromJSON,
    GetCommentsForPostResponseDtoToJSON,
} from '../models';

export interface CreateCommentRequest {
    createCommentRequestDto: CreateCommentRequestDto;
}

export interface DeleteCommentRequest {
    commentId: string;
}

export interface FindCommentRequest {
    commentId: string;
}

export interface FindCommentsForPostRequest {
    commentId: string;
}

export interface HideCommentRequest {
    commentId: string;
}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI {

    /**
     * Creates a comment
     */
    async createCommentRaw(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateCommentRequestDto>> {
        if (requestParameters.createCommentRequestDto === null || requestParameters.createCommentRequestDto === undefined) {
            throw new runtime.RequiredError('createCommentRequestDto','Required parameter requestParameters.createCommentRequestDto was null or undefined when calling createComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/comment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommentRequestDtoToJSON(requestParameters.createCommentRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentRequestDtoFromJSON(jsonValue));
    }

    /**
     * Creates a comment
     */
    async createComment(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateCommentRequestDto> {
        const response = await this.createCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a comment
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comment/delete/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a comment
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteCommentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a comment
     */
    async findCommentRaw(requestParameters: FindCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateCommentRequestDto>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling findComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comment/find/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentRequestDtoFromJSON(jsonValue));
    }

    /**
     * Gets a comment
     */
    async findComment(requestParameters: FindCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateCommentRequestDto> {
        const response = await this.findCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all comments for a post
     */
    async findCommentsForPostRaw(requestParameters: FindCommentsForPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetCommentsForPostResponseDto>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling findCommentsForPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comment/post/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentsForPostResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets all comments for a post
     */
    async findCommentsForPost(requestParameters: FindCommentsForPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetCommentsForPostResponseDto> {
        const response = await this.findCommentsForPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hides a comment
     */
    async hideCommentRaw(requestParameters: HideCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling hideComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comment/hide/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Hides a comment
     */
    async hideComment(requestParameters: HideCommentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.hideCommentRaw(requestParameters, initOverrides);
    }

}
