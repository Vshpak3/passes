{
  "openapi": "3.0.0",
  "paths": {
    "/api/admin/impersonate": {
      "post": {
        "operationId": "impersonateUser",
        "summary": "Impersonates a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonateUserRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token for impersonated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpersonateUserResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/{userId}": {
      "get": {
        "operationId": "findOne",
        "summary": "Gets a user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A user was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user": {
      "patch": {
        "operationId": "setInitialInfo",
        "summary": "Sets initial user info",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetInitialUserInfoRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sets initial user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Disables a user account",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A user account was disabled"
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/verify-email": {
      "post": {
        "operationId": "verifyEmail",
        "summary": "Verify email for the current user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A email was verified"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/user/username": {
      "post": {
        "operationId": "setUsername",
        "summary": "Set username for current user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUsernameRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A username was set for the current user"
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/usernames/validate/{username}": {
      "get": {
        "operationId": "validateUsername",
        "summary": "Validates whether a username is available",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A username was checked for validity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/user/creator/search": {
      "post": {
        "operationId": "searchCreatorByUsername",
        "summary": "Search for creators by query",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCreatorRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A list of creators was returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchCreatorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/make/creator": {
      "get": {
        "operationId": "makeCreator",
        "summary": "Make yourself a creator",
        "parameters": [],
        "responses": {
          "200": {
            "description": "You were made a creator"
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/user": {
      "get": {
        "operationId": "getCurrentUser",
        "summary": "Gets the current authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Gets the current authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "refreshAccessToken",
        "summary": "Refresh the access token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshAuthTokenRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Refresh token token was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/google": {
      "get": {
        "operationId": "googleAuth",
        "summary": "Start the google oauth flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Start the google oauth flow"
          }
        },
        "tags": [
          "auth/google"
        ]
      }
    },
    "/api/auth/google/redirect": {
      "get": {
        "operationId": "googleAuthRedirect",
        "summary": "Redirect from google oauth flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Redirect from google oauth flow"
          }
        },
        "tags": [
          "auth/google"
        ]
      }
    },
    "/api/auth/facebook": {
      "get": {
        "operationId": "facebookAuth",
        "summary": "Start the facebook oauth flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Start the facebook oauth flow"
          }
        },
        "tags": [
          "auth/facebook"
        ]
      }
    },
    "/api/auth/facebook/redirect": {
      "get": {
        "operationId": "facebookAuthRedirect",
        "summary": "Redirect from facebook oauth flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Redirect from facebook oauth flow"
          }
        },
        "tags": [
          "auth/facebook"
        ]
      }
    },
    "/api/auth/facebook/deletion_callback": {
      "post": {
        "operationId": "facebookInitiateDelete",
        "summary": "Initiate a deletion request for a Facebook OAuth user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RawFacebookDeletionRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Initiate a deletion request for a Facebook OAuth user"
          }
        },
        "tags": [
          "auth/facebook"
        ]
      }
    },
    "/api/auth/facebook/deletion_confirmation": {
      "get": {
        "operationId": "facebookDeletionConfirmation",
        "summary": "Check if a deletion request has been fulfilled",
        "parameters": [
          {
            "name": "confirmationCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check if a deletion request has been fulfilled"
          }
        },
        "tags": [
          "auth/facebook"
        ]
      }
    },
    "/api/auth/twitter": {
      "get": {
        "operationId": "twitterAuth",
        "summary": "Start the twitter oauth flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Start the twitter oauth flow"
          }
        },
        "tags": [
          "auth/twitter"
        ]
      }
    },
    "/api/auth/twitter/redirect": {
      "get": {
        "operationId": "twitterAuthRedirect",
        "summary": "Redirect from twitter oauth flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Redirect from twitter oauth flow"
          }
        },
        "tags": [
          "auth/twitter"
        ]
      }
    },
    "/api/auth/local/signup": {
      "post": {
        "operationId": "createEmailPasswordUser",
        "summary": "Create a email and password user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocalUserRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a email and password user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth/local"
        ]
      }
    },
    "/api/auth/local": {
      "post": {
        "operationId": "loginWithEmailPassword",
        "summary": "Login with email and password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalUserLoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login with email and password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth/local"
        ]
      }
    },
    "/api/auth/local/reset-password": {
      "post": {
        "operationId": "initPasswordReset",
        "summary": "Send reset password email to user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send reset password email to user"
          }
        },
        "tags": [
          "auth/local"
        ]
      }
    },
    "/api/comment": {
      "post": {
        "operationId": "createComment",
        "summary": "Creates a comment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A comment was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "comment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comment/post/{postId}": {
      "get": {
        "operationId": "findCommentsForPost",
        "summary": "Gets all comments for a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of comments was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommentsForPostResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "comment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comment/hide/{postId}/{commentId}": {
      "patch": {
        "operationId": "hideComment",
        "summary": "Hides a comment",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A comment was hidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "comment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comment/delete/{postId}/{commentId}": {
      "delete": {
        "operationId": "deleteComment",
        "summary": "Deletes a comment",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A comment was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "comment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/content": {
      "post": {
        "operationId": "create",
        "summary": "Create content",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContentRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Content was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/content/sign/{path}": {
      "get": {
        "operationId": "preSignUrl",
        "summary": "Get signed url for specified path",
        "parameters": [
          {
            "name": "path",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Url was signed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSignedUrlResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/content/vault": {
      "get": {
        "operationId": "getVaultContent",
        "summary": "Gets all content associated with the current authenticated user",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "posts",
                "messages",
                "uploads"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "image",
                "video",
                "gif",
                "audio"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creator vault was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContentsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/creator-settings": {
      "get": {
        "operationId": "getCreatorSettings",
        "summary": "Gets creator settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Creator Settings was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreatorSettingsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "creator-settings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "createOrUpdateCreatorSettings",
        "summary": "Updates or create creator settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCreatorSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creator Settings was updated or created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "creator-settings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/creator-stats/balance": {
      "get": {
        "operationId": "getBalance",
        "summary": "Get balance",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Balance was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreatorEarningResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "creator-stats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/creator-stats/earnings/historic": {
      "post": {
        "operationId": "getHistoricEarnings",
        "summary": "Get historic earnings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCreatorEarningsHistoryRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Historic earnings was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreatorEarningsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "creator-stats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/creator-stats/stats/{creatorId}": {
      "get": {
        "operationId": "getCreatorStats",
        "summary": "Get current stats",
        "parameters": [
          {
            "name": "creatorId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current stats returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreatorStatsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "creator-stats"
        ]
      }
    },
    "/api/fan-wall": {
      "post": {
        "operationId": "createFanWallComment",
        "summary": "Creates a fan wall comment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFanWallCommentRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A fan wall comment was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "fan-wall"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/fan-wall/{userId}": {
      "get": {
        "operationId": "getFanWallForCreator",
        "summary": "Gets fan wall for a creator",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of fan wall comments was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFanWallForCreatorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "fan-wall"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/fan-wall/{fanWallCommentId}": {
      "patch": {
        "operationId": "hideFanWallComment",
        "summary": "Hides a fan wall comment",
        "parameters": [
          {
            "name": "fanWallCommentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A fan wall comment was hidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "fan-wall"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteFanWallComment",
        "summary": "Deletes a fan wall comment",
        "parameters": [
          {
            "name": "fanWallCommentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A fan wall comment was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "fan-wall"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/feed": {
      "get": {
        "operationId": "getFeed",
        "summary": "Gets a users feed",
        "parameters": [
          {
            "name": "cursor",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A feed of posts was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "feed"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/feed/{userId}": {
      "get": {
        "operationId": "getFeedForCreator",
        "summary": "Gets a feed for a given creator",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A feed was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "feed"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/feed/creator/posts": {
      "get": {
        "operationId": "getPostsForCreator",
        "summary": "Gets my posts",
        "parameters": [
          {
            "name": "scheduledOnly",
            "required": true,
            "in": "path",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cursor",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posts was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "feed"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/feed/creator/messages": {
      "get": {
        "operationId": "getMessagesCreator",
        "summary": "Gets my messages",
        "parameters": [
          {
            "name": "cursor",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of messages was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "feed"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post": {
      "post": {
        "operationId": "createPost",
        "summary": "Creates a post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A post was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePostResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/{postId}": {
      "get": {
        "operationId": "findPost",
        "summary": "Gets a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A post was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updatePost",
        "summary": "Updates a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A post was updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removePost",
        "summary": "Deletes a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A post was deleted"
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/pay/purchase": {
      "post": {
        "operationId": "registerPurchasePost",
        "summary": "Register purchase post payin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostAccessRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purcuase post payin was registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterPayinResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/pay/data/purchase": {
      "post": {
        "operationId": "registerPurchasePostData",
        "summary": "Get register purchase post data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostAccessRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data for register purchase post was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayinDataDto"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/pay/tip": {
      "post": {
        "operationId": "registerTipPost",
        "summary": "Register tip post payin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TipPostRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tip post payin was registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterPayinResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/pin/{postId}": {
      "get": {
        "operationId": "pinPost",
        "summary": "Pin a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A post was pinned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/unpin/{postId}": {
      "get": {
        "operationId": "unpinPost",
        "summary": "Unpin a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A post was unpinned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/post/gallery/{channelId}": {
      "get": {
        "operationId": "getGalleryView",
        "summary": "Get gallery view",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery view was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGalleryViewDto"
                }
              }
            }
          }
        },
        "tags": [
          "post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/key": {
      "get": {
        "operationId": "getCircleEncryptionKey",
        "summary": "Get circle encryption key",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Encryption key was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CircleEncryptionKeyResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/api/payment/card/create": {
      "post": {
        "operationId": "createCircleCard",
        "summary": "Creates a card",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CircleCreateCardAndExtraRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A card was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CircleStatusResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/card/delete/{circleCardId}": {
      "delete": {
        "operationId": "deleteCircleCard",
        "summary": "Delete a card",
        "parameters": [
          {
            "name": "circleCardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A card was deleted"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/cards": {
      "get": {
        "operationId": "getCircleCards",
        "summary": "Get cards",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cards were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCircleCardsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/card/{cardId}": {
      "get": {
        "operationId": "getCircleCard",
        "summary": "Get card by id",
        "parameters": [
          {
            "name": "cardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCircleCardResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/bank/create": {
      "post": {
        "operationId": "createCircleBank",
        "summary": "Create a wire bank account",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CircleCreateBankRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A wire bank account was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CircleStatusResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/bank/delete/{circleBankId}": {
      "delete": {
        "operationId": "deleteCircleBank",
        "summary": "Delete a wire bank account",
        "parameters": [
          {
            "name": "circleBankId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A wire bank account was dleted"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/banks": {
      "get": {
        "operationId": "getCircleBanks",
        "summary": "Get wire bank acccounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Wire bank accounts were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCircleBanksResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/circle/notification": {
      "post": {
        "operationId": "recieveNotifications",
        "summary": "Circle notifications",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update from circle was received"
          }
        },
        "tags": [
          "payment"
        ]
      },
      "head": {
        "operationId": "registerNotifications",
        "summary": "Circle notifications register",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Updates from circle was registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/api/payment/payin/entry/circle-card": {
      "post": {
        "operationId": "entryCircleCard",
        "summary": "Circlecard payin entrypoint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CircleCardPayinEntryRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Circecard payin was initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CircleCardPayinEntryResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payin/entry/phantom-usdc": {
      "post": {
        "operationId": "entryPhantomCircleUSDC",
        "summary": "Phantom USDC payin entrypoint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhantomCircleUSDCEntryRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Phantom USDC payin was initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhantomCircleUSDCEntryResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payin/entry/metamask-usdc": {
      "post": {
        "operationId": "entryMetamaskCircleUSDC",
        "summary": "Metamask USDC payin entrypoint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetamaskCircleUSDCEntryRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metamask USDC was initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetamaskCircleUSDCEntryResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payin/entry/metamask-eth": {
      "post": {
        "operationId": "entryMetamaskCircleETH",
        "summary": "Metamask ETH payin entrypoint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetamaskCircleETHEntryRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metamask ETH was initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetamaskCircleETHEntryResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payin/default": {
      "post": {
        "operationId": "setDefaultPayinMethod",
        "summary": "Set default payin method",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPayinMethodRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A payin method was set as default"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getDefaultPayinMethod",
        "summary": "Get default payin method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default payin method was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPayinMethodResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payout/default": {
      "post": {
        "operationId": "setDefaultPayoutMethod",
        "summary": "Set default payout method",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPayoutMethodRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A payout method was set as default"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getDefaultPayoutMethod",
        "summary": "Get default payout method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default payout method was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPayoutMethodResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payin/cancel/{payinId}": {
      "post": {
        "operationId": "cancelPayin",
        "summary": "Cancel a payin",
        "parameters": [
          {
            "name": "payinId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payin was cancelled"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payins": {
      "post": {
        "operationId": "getPayins",
        "summary": "Get all payins",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPayinsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payins were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPayinsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payouts": {
      "post": {
        "operationId": "getPayouts",
        "summary": "Get all payouts",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPayoutsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payouts were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPayoutsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/payout": {
      "post": {
        "operationId": "payout",
        "summary": "Payout manually",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payout was made"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/subscription/method/{subscriptionId}": {
      "post": {
        "operationId": "setSubscriptionPayinMethod",
        "summary": "Set subscription payin method",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPayinMethodRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription payin method was set"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/subscription/{subscriptionId}": {
      "delete": {
        "operationId": "cancelSubscription",
        "summary": "Cancel subscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was cancelled"
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/subscriptions": {
      "get": {
        "operationId": "getSubscriptions",
        "summary": "Get subscriptions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Subscriptions were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriptionsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/test/register/payin": {
      "post": {
        "operationId": "registerPayin",
        "summary": "Register payin",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payin registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterPayinResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/test/register/payin/data": {
      "post": {
        "operationId": "registerPayinData",
        "summary": "Get register payin data",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Register payin data retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayinDataDto"
                }
              }
            }
          }
        },
        "tags": [
          "payment"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment/test/payout": {
      "get": {
        "operationId": "payoutAll",
        "summary": "Payout everyone",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Everyone paid out"
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/api/payment/test/payout/{payoutId}": {
      "get": {
        "operationId": "rePayout",
        "summary": "Rerun payout",
        "parameters": [
          {
            "name": "payoutId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payout rerun"
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/api/follow/check/{creatorId}": {
      "get": {
        "operationId": "checkFollow",
        "summary": "Check if you follow a creator",
        "parameters": [
          {
            "name": "creatorId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A follow was checked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/follow/follow/{creatorId}": {
      "post": {
        "operationId": "followCreator",
        "summary": "Creates a follow",
        "parameters": [
          {
            "name": "creatorId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A follow was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFollowResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/follow/{creatorId}": {
      "delete": {
        "operationId": "unfollowCreator",
        "summary": "Deletes a following",
        "parameters": [
          {
            "name": "creatorId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A following was deleted"
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/follow/search": {
      "post": {
        "operationId": "searchFollowing",
        "summary": "Search for following by query",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFollowRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A list of following was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListMembersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/follow/report/{followerId}": {
      "post": {
        "operationId": "reportFollower",
        "summary": "Reports a follower",
        "parameters": [
          {
            "name": "followerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportFanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A follower was reported"
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/follow/unblock/{followerId}": {
      "post": {
        "operationId": "unblockFollower",
        "summary": "Unblocks a follower",
        "parameters": [
          {
            "name": "followerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A follower was unblocked"
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/follow/block/{followerId}": {
      "post": {
        "operationId": "blockFollower",
        "summary": "Blocks a follower",
        "parameters": [
          {
            "name": "followerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A follower was blocked"
          }
        },
        "tags": [
          "follow"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages": {
      "post": {
        "operationId": "sendMessage",
        "summary": "Register sending message",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sending message was registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterPayinResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/data": {
      "post": {
        "operationId": "sendMessageData",
        "summary": "Register sending message data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sending message data was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayinDataDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/pending": {
      "get": {
        "operationId": "getPending",
        "summary": "Get pending messages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pending messages was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessagesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/completed-tipped": {
      "post": {
        "operationId": "getCompletedTippedMessages",
        "summary": "Get completed tipped messages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Completed tipped messages retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessagesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/batch": {
      "post": {
        "operationId": "massSend",
        "summary": "Batch message",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBatchMessageRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Batch Message was enqueued"
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/token": {
      "get": {
        "operationId": "getToken",
        "summary": "Gets token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/channel": {
      "post": {
        "operationId": "getChannel",
        "summary": "Creates a channel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetChannelRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Channel was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChannelResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/channel/stats": {
      "post": {
        "operationId": "getChannelsStats",
        "summary": "Get channels stats",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetChannelStatsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel stats was retrieved ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChannelStatsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/messages/channel/settings/{channelId}": {
      "get": {
        "operationId": "getChannelSettings",
        "summary": "Get channels settings",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel settings was retrieved ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChannelSettingsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "updateChannelSettings",
        "summary": "Update channels settings",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel settings was updated "
          }
        },
        "tags": [
          "messages"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "health",
        "summary": "Health check endpoint",
        "parameters": [],
        "responses": {
          "200": {
            "description": "App is running",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/like/{postId}": {
      "get": {
        "operationId": "checkLike",
        "summary": "Check if post is liked",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A like was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "like"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "likePost",
        "summary": "Creates a like on a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A like was created"
          }
        },
        "tags": [
          "like"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "unlikePost",
        "summary": "Removes a like on a post",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A like was deleted"
          }
        },
        "tags": [
          "like"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/list": {
      "post": {
        "operationId": "createList",
        "summary": "Creates List for a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "List was created"
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getLists",
        "summary": "Get all lists for user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lists were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/list/members": {
      "post": {
        "operationId": "getListMembers",
        "summary": "Get list members for user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetListMembersRequestto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List members was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListMembersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeListMembers",
        "summary": "Remove ListMembers from a List",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveListMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List Members removed"
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/list/{listId}": {
      "get": {
        "operationId": "getList",
        "summary": "Get list for user",
        "parameters": [
          {
            "name": "listId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteList",
        "summary": "Delete list for user",
        "parameters": [
          {
            "name": "listId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/list/edit": {
      "post": {
        "operationId": "editListName",
        "summary": "Edit list name",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditListNameRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List name was edited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "list"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/notifications/get": {
      "post": {
        "operationId": "get",
        "summary": "Gets notifications",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNotificationsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notifications were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotificationsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/notifications/subscribe": {
      "get": {
        "operationId": "subscribe",
        "summary": "Subscribe to notification events",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Notification events were subscribed"
          }
        },
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/notifications/read/{notificationId}": {
      "post": {
        "operationId": "readNotification",
        "summary": "Set status as read",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status was set as read"
          }
        },
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass": {
      "post": {
        "operationId": "createPass",
        "summary": "Creates a pass",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePassRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A pass was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/created/{creatorId}": {
      "get": {
        "operationId": "getCreatorPasses",
        "summary": "Gets passes created by a creator",
        "parameters": [
          {
            "name": "creatorId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of passes was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPassesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ]
      }
    },
    "/api/pass/passholdings": {
      "get": {
        "operationId": "getPassHoldings",
        "summary": "Gets passes held by user",
        "parameters": [
          {
            "name": "creatorId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of passes was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPassHoldersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/{passId}": {
      "get": {
        "operationId": "findPass",
        "summary": "Gets a pass",
        "parameters": [
          {
            "name": "passId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pass was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPassResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updatePass",
        "summary": "Updates a pass",
        "parameters": [
          {
            "name": "passId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePassRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A pass was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPassResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/pay/create": {
      "post": {
        "operationId": "registerBuyPass",
        "summary": "Register create pass payin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePassHolderRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create pass payin was registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterPayinResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/pay/data/create": {
      "post": {
        "operationId": "registerBuyPassData",
        "summary": "Get register create pass data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePassHolderRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data for register create pass was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayinDataDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/pay/renew": {
      "post": {
        "operationId": "registerRenewPass",
        "summary": "Register renew pass payin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewPassHolderRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Renew pass payin was registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterPayinResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/pay/data/renew": {
      "post": {
        "operationId": "registerRenewPassData",
        "summary": "Get register renew pass data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewPassHolderRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data for register renew pass was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayinDataDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/subscription/add/{passHolderId}": {
      "post": {
        "operationId": "addPassSubscription",
        "summary": "Add pass subscription",
        "parameters": [
          {
            "name": "passHolderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pass subscription was added"
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/pin/{passId}": {
      "get": {
        "operationId": "pinPass",
        "summary": "Pin a pass",
        "parameters": [
          {
            "name": "passId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pass was pinned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/unpin/{passId}": {
      "get": {
        "operationId": "unpinPass",
        "summary": "Unpin a pass",
        "parameters": [
          {
            "name": "passId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pass was unpinned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/pass/passholders/{passId}": {
      "get": {
        "operationId": "getPassHolders",
        "summary": "Get a passholders",
        "parameters": [
          {
            "name": "passId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pass was unpinned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPassHoldersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "pass"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/custodial": {
      "get": {
        "operationId": "getUserCustodialWallet",
        "summary": "Get user custodial wallet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User custodial wallet retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/default": {
      "get": {
        "operationId": "getDefaultWallet",
        "summary": "Get default wallet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default wallet retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/default/{walletId}": {
      "post": {
        "operationId": "setDefaultWallet",
        "summary": "Set default wallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default wallet set"
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet": {
      "post": {
        "operationId": "createWallet",
        "summary": "Creates authenticated wallet for a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Wallet was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getWallets",
        "summary": "Get wallets for user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Wallets were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/{walletId}": {
      "delete": {
        "operationId": "removeWallet",
        "summary": "Removes authenticated wallet for a user",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet was deleted"
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/auth": {
      "post": {
        "operationId": "authMessage",
        "summary": "Creates wallet auth message to sign",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthWalletRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Wallet Auth Message created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthWalletResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/refresh/{walletId}": {
      "post": {
        "operationId": "refreshWallets",
        "summary": "Refresh tokens owned by a wallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet tokens were updated"
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/wallet/unauthenticated": {
      "post": {
        "operationId": "createUnauthenticatedWallet",
        "summary": "Creates unchecked wallet for a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnauthenticatedWalletRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unchecked wallet was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWalletRequestDto"
                }
              }
            }
          }
        },
        "tags": [
          "wallet"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/profile": {
      "post": {
        "operationId": "createOrUpdateProfile",
        "summary": "Creates a profile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateProfileRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A profile was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "profile"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/profile/usernames": {
      "get": {
        "operationId": "getAllUsernames",
        "summary": "Gets all usernames",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Gets all usernames",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsernamesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "profile"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/profile/get": {
      "post": {
        "operationId": "findProfile",
        "summary": "Gets a profile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProfileRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A profile was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProfileResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/api/profile/{profileId}": {
      "delete": {
        "operationId": "removeProfile",
        "summary": "Deletes a profile",
        "parameters": [
          {
            "name": "profileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A profile was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "profile"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/verification": {
      "post": {
        "operationId": "submitPersonaInquiry",
        "summary": "Submit inquiry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPersonaInquiryRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inquiry was submitted"
          }
        },
        "tags": [
          "verification"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/verification/can": {
      "get": {
        "operationId": "canSubmitPersona",
        "summary": "Check if user can submit inquiry",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Check was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "verification"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/verification/refresh/persona": {
      "post": {
        "operationId": "refreshPersonaVerifications",
        "summary": "Refresh persona KYC verifications for user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Persona KYC verifications for user were refreshed"
          }
        },
        "tags": [
          "verification"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/verification/step": {
      "post": {
        "operationId": "submitCreatorVerificationStep",
        "summary": "Submit creator verification step",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitCreatorVerificationStepRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creator verification step was submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreatorVerificationStepResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "verification"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getCreatorVerificationStep",
        "summary": "Get current creator verification step",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Current creator verification step was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreatorVerificationStepResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "verification"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Passes Backend",
    "description": "Get your pass",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ImpersonateUserRequestDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "secret"
        ]
      },
      "ImpersonateUserResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken"
        ]
      },
      "GetUserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isCreator": {
            "type": "boolean"
          },
          "legalFullName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "birthday": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "username"
        ]
      },
      "SetInitialUserInfoRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "legalFullName": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "birthday": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "legalFullName",
          "countryCode",
          "birthday"
        ]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "verificationToken": {
            "type": "string"
          }
        },
        "required": [
          "verificationToken"
        ]
      },
      "UpdateUsernameRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "SearchCreatorRequestDto": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          }
        },
        "required": [
          "query"
        ]
      },
      "SearchCreatorResponseDto": {
        "type": "object",
        "properties": {
          "creators": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "creators"
        ]
      },
      "RefreshAuthTokenRequestDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "AuthTokenResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "RawFacebookDeletionRequestDto": {
        "type": "object",
        "properties": {
          "signed_request": {
            "type": "string"
          }
        },
        "required": [
          "signed_request"
        ]
      },
      "CreateLocalUserRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LocalUserLoginRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ResetPasswordRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "CreateCommentRequestDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "postId",
          "text"
        ]
      },
      "CommentDto": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "string"
          },
          "postId": {
            "type": "string"
          },
          "commenterId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "commenterUsername": {
            "type": "string"
          },
          "commenterDisplayName": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "commentId",
          "postId",
          "commenterId",
          "text",
          "commenterUsername",
          "commenterDisplayName",
          "createdAt"
        ]
      },
      "GetCommentsForPostResponseDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            }
          }
        },
        "required": [
          "postId",
          "comments"
        ]
      },
      "CreateContentRequestDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "contentType": {
            "type": "string",
            "enum": [
              "image",
              "video",
              "gif",
              "audio"
            ]
          }
        },
        "required": [
          "url",
          "contentType"
        ]
      },
      "GetContentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "signedUrl": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "signedUrl",
          "contentType"
        ]
      },
      "GetSignedUrlResponseDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "ContentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "signedUrl": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "signedUrl",
          "contentType"
        ]
      },
      "GetContentsResponseDto": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDto"
            }
          }
        },
        "required": [
          "contents"
        ]
      },
      "GetCreatorSettingsResponseDto": {
        "type": "object",
        "properties": {
          "minimumTipAmount": {
            "type": "number"
          },
          "payoutFrequency": {
            "type": "string",
            "enum": [
              "manual",
              "two weeks",
              "one week"
            ]
          },
          "welcomeMessage": {
            "type": "string"
          }
        },
        "required": [
          "minimumTipAmount",
          "payoutFrequency"
        ]
      },
      "UpdateCreatorSettingsRequestDto": {
        "type": "object",
        "properties": {
          "minimumTipAmount": {
            "type": "number"
          },
          "payoutFrequency": {
            "type": "string",
            "enum": [
              "manual",
              "two weeks",
              "one week"
            ]
          },
          "welcomeMessage": {
            "type": "string"
          }
        }
      },
      "GetCreatorEarningResponseDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "amount",
          "type",
          "createdAt"
        ]
      },
      "GetCreatorEarningsHistoryRequestDto": {
        "type": "object",
        "properties": {
          "start": {
            "format": "date-time",
            "type": "string"
          },
          "end": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "balance",
              "total",
              "subscription",
              "tips",
              "posts",
              "messages",
              "lifetime",
              "other"
            ]
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ]
      },
      "CreatorEarningDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "amount",
          "type",
          "createdAt"
        ]
      },
      "GetCreatorEarningsResponseDto": {
        "type": "object",
        "properties": {
          "earnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatorEarningDto"
            }
          }
        },
        "required": [
          "earnings"
        ]
      },
      "GetCreatorStatsResponseDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "numFollowers": {
            "type": "number"
          },
          "numLikes": {
            "type": "number"
          }
        },
        "required": [
          "userId",
          "numFollowers",
          "numLikes"
        ]
      },
      "CreateFanWallCommentRequestDto": {
        "type": "object",
        "properties": {
          "creatorId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "creatorId",
          "text"
        ]
      },
      "FanWallCommentDto": {
        "type": "object",
        "properties": {
          "fanWallCommentId": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          },
          "commenterId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "commenterUsername": {
            "type": "string"
          },
          "commenterDisplayName": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "fanWallCommentId",
          "creatorId",
          "commenterId",
          "text",
          "commenterUsername",
          "commenterDisplayName",
          "createdAt"
        ]
      },
      "GetFanWallForCreatorResponseDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FanWallCommentDto"
            }
          }
        },
        "required": [
          "comments"
        ]
      },
      "PostDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "paywall": {
            "type": "boolean"
          },
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDto"
            }
          },
          "numLikes": {
            "type": "number"
          },
          "numComments": {
            "type": "number"
          },
          "numPurchases": {
            "type": "number"
          },
          "isLiked": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "scheduledAt": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "totalTipAmount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "paywall",
          "userId",
          "username",
          "displayName",
          "text",
          "numLikes",
          "numComments",
          "numPurchases",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetFeedResponseDto": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostDto"
            }
          },
          "count": {
            "type": "number"
          },
          "cursor": {
            "type": "string"
          }
        },
        "required": [
          "posts",
          "count",
          "cursor"
        ]
      },
      "CreatePostRequestDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "contentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isMessage": {
            "type": "boolean"
          },
          "price": {
            "type": "number"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "scheduledAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "text",
          "contentIds",
          "passIds",
          "isMessage"
        ]
      },
      "CreatePostResponseDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          }
        },
        "required": [
          "postId"
        ]
      },
      "GetPostResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "paywall": {
            "type": "boolean"
          },
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDto"
            }
          },
          "numLikes": {
            "type": "number"
          },
          "numComments": {
            "type": "number"
          },
          "numPurchases": {
            "type": "number"
          },
          "isLiked": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "scheduledAt": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "totalTipAmount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "paywall",
          "userId",
          "username",
          "displayName",
          "text",
          "numLikes",
          "numComments",
          "numPurchases",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdatePostRequestDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "PayinMethodDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "circle_card",
              "phantom_circle_usdc",
              "metamask_circle_usdc",
              "metamask_circle_eth"
            ]
          },
          "cardId": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "chain": {
            "type": "string",
            "enum": [
              "eth",
              "sol",
              "avax",
              "matic"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "CreatePostAccessRequestDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          },
          "fromDM": {
            "type": "boolean"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          }
        },
        "required": [
          "postId",
          "fromDM"
        ]
      },
      "RegisterPayinResponseDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "payinId",
          "payinMethod",
          "amount"
        ]
      },
      "PayinDataDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "target": {
            "type": "string"
          },
          "blocked": {
            "type": "boolean"
          }
        },
        "required": [
          "amount",
          "blocked"
        ]
      },
      "TipPostRequestDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          }
        },
        "required": [
          "postId",
          "amount"
        ]
      },
      "GetGalleryViewDto": {
        "type": "object",
        "properties": {
          "paid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostDto"
            }
          },
          "unpaid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostDto"
            }
          }
        },
        "required": [
          "paid",
          "unpaid"
        ]
      },
      "CircleEncryptionKeyResponseDto": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "keyId",
          "publicKey"
        ]
      },
      "BillingDetailsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "city",
          "country",
          "line1",
          "postalCode"
        ]
      },
      "CircleMetaDataDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "beneficiaryEmail": {
            "type": "string"
          }
        }
      },
      "CircleCreateCardDto": {
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "type": "string"
          },
          "keyId": {
            "type": "string"
          },
          "encryptedData": {
            "type": "string"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetailsDto"
          },
          "expMonth": {
            "type": "number"
          },
          "expYear": {
            "type": "number"
          },
          "metadata": {
            "$ref": "#/components/schemas/CircleMetaDataDto"
          }
        },
        "required": [
          "idempotencyKey",
          "keyId",
          "encryptedData",
          "billingDetails",
          "expMonth",
          "expYear",
          "metadata"
        ]
      },
      "CircleCreateCardAndExtraRequestDto": {
        "type": "object",
        "properties": {
          "createCardDto": {
            "$ref": "#/components/schemas/CircleCreateCardDto"
          },
          "cardNumber": {
            "type": "string"
          }
        },
        "required": [
          "createCardDto",
          "cardNumber"
        ]
      },
      "CircleStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "circleId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "circleId",
          "status"
        ]
      },
      "CircleCardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "circleId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "firstDigit": {
            "type": "string"
          },
          "fourDigits": {
            "type": "string"
          },
          "expMonth": {
            "type": "number"
          },
          "expYear": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "status",
          "firstDigit",
          "fourDigits",
          "expMonth",
          "expYear",
          "name",
          "active"
        ]
      },
      "GetCircleCardsResponseDto": {
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircleCardDto"
            }
          }
        },
        "required": [
          "cards"
        ]
      },
      "GetCircleCardResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "circleId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "firstDigit": {
            "type": "string"
          },
          "fourDigits": {
            "type": "string"
          },
          "expMonth": {
            "type": "number"
          },
          "expYear": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "status",
          "firstDigit",
          "fourDigits",
          "expMonth",
          "expYear",
          "name",
          "active"
        ]
      },
      "CircleBankAddressDto": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "district": {
            "type": "string"
          }
        },
        "required": [
          "country"
        ]
      },
      "CircleCreateBankRequestDto": {
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "iban": {
            "type": "string"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetailsDto"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/CircleBankAddressDto"
          }
        },
        "required": [
          "idempotencyKey",
          "billingDetails",
          "bankAddress"
        ]
      },
      "CircleBankDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "circleId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "description",
          "country"
        ]
      },
      "GetCircleBanksResponseDto": {
        "type": "object",
        "properties": {
          "banks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircleBankDto"
            }
          }
        },
        "required": [
          "banks"
        ]
      },
      "CircleCardPayinEntryRequestDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "required": [
          "payinId",
          "ip",
          "sessionId"
        ]
      },
      "CircleCardPayinEntryResponseDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CircleStatusResponseDto"
          }
        },
        "required": [
          "payinId",
          "status"
        ]
      },
      "PhantomCircleUSDCEntryRequestDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          }
        },
        "required": [
          "payinId"
        ]
      },
      "PhantomCircleUSDCEntryResponseDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          },
          "tokenAddress": {
            "type": "string"
          },
          "depositAddress": {
            "type": "string"
          },
          "networkUrl": {
            "type": "string"
          }
        },
        "required": [
          "payinId",
          "tokenAddress",
          "depositAddress",
          "networkUrl"
        ]
      },
      "MetamaskCircleUSDCEntryRequestDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          }
        },
        "required": [
          "payinId"
        ]
      },
      "MetamaskCircleUSDCEntryResponseDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          },
          "tokenAddress": {
            "type": "string"
          },
          "depositAddress": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          }
        },
        "required": [
          "payinId",
          "tokenAddress",
          "depositAddress",
          "chainId"
        ]
      },
      "MetamaskCircleETHEntryRequestDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          }
        },
        "required": [
          "payinId"
        ]
      },
      "MetamaskCircleETHEntryResponseDto": {
        "type": "object",
        "properties": {
          "payinId": {
            "type": "string"
          },
          "depositAddress": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          }
        },
        "required": [
          "payinId",
          "depositAddress",
          "chainId"
        ]
      },
      "SetPayinMethodRequestDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "circle_card",
              "phantom_circle_usdc",
              "metamask_circle_usdc",
              "metamask_circle_eth"
            ]
          },
          "cardId": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "chain": {
            "type": "string",
            "enum": [
              "eth",
              "sol",
              "avax",
              "matic"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "GetPayinMethodResponseDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "circle_card",
              "phantom_circle_usdc",
              "metamask_circle_usdc",
              "metamask_circle_eth"
            ]
          },
          "cardId": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "chain": {
            "type": "string",
            "enum": [
              "eth",
              "sol",
              "avax",
              "matic"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "SetPayoutMethodRequestDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "circle_wire",
              "circle_usdc"
            ]
          },
          "bankId": {
            "type": "string"
          },
          "walletId": {
            "type": "string"
          }
        },
        "required": [
          "method"
        ]
      },
      "GetPayoutMethodResponseDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "circle_wire",
              "circle_usdc"
            ]
          },
          "bankId": {
            "type": "string"
          },
          "walletId": {
            "type": "string"
          }
        },
        "required": [
          "method"
        ]
      },
      "GetPayinsRequestDto": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "offset",
          "limit"
        ]
      },
      "PayinDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          },
          "payinStatus": {
            "type": "string",
            "enum": [
              "registered",
              "created",
              "pending",
              "successful",
              "failed",
              "unregistered",
              "action_required",
              "reverted",
              "fail_callback_failed",
              "success_callback_failed",
              "create_callback_failed"
            ]
          },
          "amount": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "callback": {
            "type": "string",
            "enum": [
              "tipped_message",
              "create_nft_lifetime_pass",
              "create_nft_subscription_pass",
              "rewnew_nft_pass",
              "purchase_feed_post",
              "purchase_dm_post",
              "tip_post",
              "example"
            ]
          },
          "card": {
            "$ref": "#/components/schemas/CircleCardDto"
          },
          "transactionHash": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "callbackOutputJSON": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "payinMethod",
          "payinStatus",
          "amount",
          "createdAt",
          "callback"
        ]
      },
      "GetPayinsResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "payins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayinDto"
            }
          }
        },
        "required": [
          "count",
          "payins"
        ]
      },
      "GetPayoutsRequestDto": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "offset",
          "limit"
        ]
      },
      "PayoutMethodDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "circle_wire",
              "circle_usdc"
            ]
          },
          "bankId": {
            "type": "string"
          },
          "walletId": {
            "type": "string"
          }
        },
        "required": [
          "method"
        ]
      },
      "WalletDto": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "custodial": {
            "type": "boolean"
          },
          "authenticated": {
            "type": "boolean"
          }
        },
        "required": [
          "walletId",
          "address",
          "chain",
          "custodial",
          "authenticated"
        ]
      },
      "PayoutDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethodDto"
          },
          "payoutStatus": {
            "type": "string",
            "enum": [
              "created",
              "pending",
              "successful",
              "failed"
            ]
          },
          "amount": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "transactionHash": {
            "type": "string"
          },
          "bank": {
            "$ref": "#/components/schemas/CircleBankDto"
          },
          "wallet": {
            "$ref": "#/components/schemas/WalletDto"
          }
        },
        "required": [
          "id",
          "userId",
          "payoutMethod",
          "payoutStatus",
          "amount",
          "createdAt"
        ]
      },
      "GetPayoutsResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "payouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutDto"
            }
          }
        },
        "required": [
          "count",
          "payouts"
        ]
      },
      "PassHolderDto": {
        "type": "object",
        "properties": {
          "passHolderId": {
            "type": "string"
          },
          "passId": {
            "type": "string"
          },
          "holderId": {
            "type": "string"
          },
          "messages": {
            "type": "object"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "holderUsername": {
            "type": "string"
          },
          "holderDisplayName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "chain": {
            "type": "string",
            "enum": [
              "eth",
              "sol",
              "avax",
              "matic"
            ]
          },
          "tokenId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          },
          "creatorUsername": {
            "type": "string"
          },
          "creatorDisplayName": {
            "type": "string"
          }
        },
        "required": [
          "passHolderId",
          "passId",
          "holderId",
          "address",
          "chain"
        ]
      },
      "PassDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "subscription",
              "lifetime",
              "external"
            ]
          },
          "price": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "totalSupply": {
            "type": "number"
          },
          "remainingSupply": {
            "type": "number"
          },
          "freetrial": {
            "type": "boolean"
          },
          "pinnedAt": {
            "format": "date-time",
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "creatorUsername": {
            "type": "string"
          },
          "creatorDisplayName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "creatorId",
          "title",
          "description",
          "type",
          "price",
          "totalSupply",
          "remainingSupply",
          "freetrial"
        ]
      },
      "SubscriptionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          },
          "subscriptionStatus": {
            "type": "string",
            "enum": [
              "active",
              "expiring",
              "disabled",
              "cancelled"
            ]
          },
          "amount": {
            "type": "number"
          },
          "card": {
            "$ref": "#/components/schemas/CircleCardDto"
          },
          "passHolderId": {
            "type": "string"
          },
          "passHolder": {
            "$ref": "#/components/schemas/PassHolderDto"
          },
          "pass": {
            "$ref": "#/components/schemas/PassDto"
          }
        },
        "required": [
          "id",
          "userId",
          "payinMethod",
          "subscriptionStatus",
          "amount"
        ]
      },
      "GetSubscriptionsResponseDto": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDto"
            }
          }
        },
        "required": [
          "subscriptions"
        ]
      },
      "GetFollowResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "followerId": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "followerId",
          "creatorId"
        ]
      },
      "SearchFollowRequestDto": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          }
        }
      },
      "ListMemberDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isFollowing": {
            "type": "boolean"
          }
        },
        "required": [
          "userId",
          "username",
          "displayName",
          "isFollowing"
        ]
      },
      "GetListMembersResponseDto": {
        "type": "object",
        "properties": {
          "listMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListMemberDto"
            }
          }
        },
        "required": [
          "listMembers"
        ]
      },
      "ReportFanDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "reason"
        ]
      },
      "SendMessageRequestDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channelId": {
            "type": "string"
          },
          "tipAmount": {
            "type": "number"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          }
        },
        "required": [
          "text",
          "attachments",
          "channelId",
          "tipAmount"
        ]
      },
      "MessageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channelId": {
            "type": "string"
          },
          "tipAmount": {
            "type": "number"
          },
          "created_at": {
            "type": "number"
          }
        },
        "required": [
          "text",
          "attachments",
          "channelId"
        ]
      },
      "GetMessagesResponseDto": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDto"
            }
          }
        },
        "required": [
          "messages"
        ]
      },
      "CreateBatchMessageRequestDto": {
        "type": "object",
        "properties": {
          "listIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "postId": {
            "type": "string"
          }
        },
        "required": [
          "listIds",
          "passIds",
          "postId"
        ]
      },
      "TokenResponseDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "GetChannelRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "GetChannelResponseDto": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "blocked": {
            "type": "boolean"
          }
        },
        "required": [
          "channelId",
          "blocked"
        ]
      },
      "GetChannelStatsRequestDto": {
        "type": "object",
        "properties": {
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "channelIds"
        ]
      },
      "ChannelStatDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "totalTipAmount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "channelId",
          "totalTipAmount"
        ]
      },
      "GetChannelStatsResponseDto": {
        "type": "object",
        "properties": {
          "channelStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelStatDto"
            }
          }
        },
        "required": [
          "channelStats"
        ]
      },
      "GetChannelSettingsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "unlimitedMessages": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "channelId",
          "userId",
          "unlimitedMessages"
        ]
      },
      "UpdateChannelSettingsRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "unlimitedMessages": {
            "type": "boolean"
          }
        }
      },
      "CreateListRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "userIds"
        ]
      },
      "AddListMembersRequestDto": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "listId",
          "userIds"
        ]
      },
      "RemoveListMembersRequestDto": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "listId",
          "userIds"
        ]
      },
      "GetListResponseDto": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "normal",
              "followers",
              "following"
            ]
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "listId",
          "name",
          "type",
          "count"
        ]
      },
      "GetListsResponseDto": {
        "type": "object",
        "properties": {
          "lists": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "lists"
        ]
      },
      "GetListMembersRequestto": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          }
        },
        "required": [
          "listId"
        ]
      },
      "EditListNameRequestDto": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "listId",
          "name"
        ]
      },
      "GetNotificationsRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "comment",
              "mention",
              "subscription",
              "payment",
              "other"
            ]
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "offset",
          "limit"
        ]
      },
      "NotificationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          },
          "senderUsername": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "unread",
              "read"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "comment",
              "mention",
              "subscription",
              "payment",
              "other"
            ]
          },
          "message": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "senderName",
          "senderUsername",
          "status",
          "type",
          "message",
          "createdAt"
        ]
      },
      "GetNotificationsResponseDto": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationDto"
            }
          }
        },
        "required": [
          "notifications"
        ]
      },
      "CreatePassRequestDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "totalSupply": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "freetrial": {
            "type": "boolean"
          },
          "messages": {
            "type": "object"
          },
          "chain": {
            "type": "string",
            "enum": [
              "eth",
              "sol",
              "avax",
              "matic"
            ]
          }
        },
        "required": [
          "title",
          "description",
          "type",
          "price",
          "totalSupply",
          "chain"
        ]
      },
      "GetPassesResponseDto": {
        "type": "object",
        "properties": {
          "passes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassDto"
            }
          }
        },
        "required": [
          "passes"
        ]
      },
      "GetPassHoldersResponseDto": {
        "type": "object",
        "properties": {
          "passHolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassHolderDto"
            }
          }
        },
        "required": [
          "passHolders"
        ]
      },
      "GetPassResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "subscription",
              "lifetime",
              "external"
            ]
          },
          "price": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "totalSupply": {
            "type": "number"
          },
          "remainingSupply": {
            "type": "number"
          },
          "freetrial": {
            "type": "boolean"
          },
          "pinnedAt": {
            "format": "date-time",
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "creatorUsername": {
            "type": "string"
          },
          "creatorDisplayName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "creatorId",
          "title",
          "description",
          "type",
          "price",
          "totalSupply",
          "remainingSupply",
          "freetrial"
        ]
      },
      "UpdatePassRequestDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "CreatePassHolderRequestDto": {
        "type": "object",
        "properties": {
          "passId": {
            "type": "string"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          }
        },
        "required": [
          "passId"
        ]
      },
      "RenewPassHolderRequestDto": {
        "type": "object",
        "properties": {
          "passHolderId": {
            "type": "string"
          },
          "payinMethod": {
            "$ref": "#/components/schemas/PayinMethodDto"
          }
        },
        "required": [
          "passHolderId"
        ]
      },
      "GetWalletResponseDto": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "custodial": {
            "type": "boolean"
          },
          "authenticated": {
            "type": "boolean"
          }
        },
        "required": [
          "walletId",
          "address",
          "chain",
          "custodial",
          "authenticated"
        ]
      },
      "CreateWalletRequestDto": {
        "type": "object",
        "properties": {
          "signedMessage": {
            "type": "string"
          },
          "rawMessage": {
            "type": "string"
          },
          "walletAddress": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          }
        },
        "required": [
          "signedMessage",
          "rawMessage",
          "walletAddress",
          "chain"
        ]
      },
      "AuthWalletRequestDto": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          }
        },
        "required": [
          "walletAddress",
          "chain"
        ]
      },
      "AuthWalletResponseDto": {
        "type": "object",
        "properties": {
          "rawMessage": {
            "type": "string"
          },
          "walletAddress": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          }
        },
        "required": [
          "rawMessage",
          "walletAddress",
          "chain"
        ]
      },
      "GetWalletsResponseDto": {
        "type": "object",
        "properties": {
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDto"
            }
          }
        },
        "required": [
          "wallets"
        ]
      },
      "CreateUnauthenticatedWalletRequestDto": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          }
        },
        "required": [
          "walletAddress",
          "chain"
        ]
      },
      "CreateOrUpdateProfileRequestDto": {
        "type": "object",
        "properties": {
          "coverTitle": {
            "type": "string"
          },
          "coverDescription": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "instagramUrl": {
            "type": "string"
          },
          "tiktokUrl": {
            "type": "string"
          },
          "youtubeUrl": {
            "type": "string"
          },
          "discordUrl": {
            "type": "string"
          },
          "twitchUrl": {
            "type": "string"
          }
        }
      },
      "GetUsernamesResponseDto": {
        "type": "object",
        "properties": {
          "usernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "usernames"
        ]
      },
      "GetProfileRequestDto": {
        "type": "object",
        "properties": {
          "creatorId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "profileId": {
            "type": "string"
          }
        }
      },
      "GetProfileResponseDto": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "legalFullName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "coverTitle": {
            "type": "string"
          },
          "coverDescription": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "instagramUrl": {
            "type": "string"
          },
          "tiktokUrl": {
            "type": "string"
          },
          "youtubeUrl": {
            "type": "string"
          },
          "discordUrl": {
            "type": "string"
          },
          "twitchUrl": {
            "type": "string"
          },
          "isKYCVerified": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": [
          "profileId",
          "userId",
          "isActive"
        ]
      },
      "SubmitPersonaInquiryRequestDto": {
        "type": "object",
        "properties": {
          "personaId": {
            "type": "string"
          },
          "personaStatus": {
            "type": "string",
            "enum": [
              "created",
              "pending",
              "completed",
              "failed",
              "expired",
              "needs_review",
              "approved",
              "declined"
            ]
          }
        },
        "required": [
          "personaId",
          "personaStatus"
        ]
      },
      "SubmitCreatorVerificationStepRequestDto": {
        "type": "object",
        "properties": {
          "step": {
            "type": "string",
            "enum": [
              "step 1 profile",
              "step 2 KYC",
              "step 3 payout",
              "step 4 done"
            ]
          }
        },
        "required": [
          "step"
        ]
      },
      "GetCreatorVerificationStepResponseDto": {
        "type": "object",
        "properties": {
          "step": {
            "type": "string",
            "enum": [
              "step 1 profile",
              "step 2 KYC",
              "step 3 payout",
              "step 4 done"
            ]
          }
        },
        "required": [
          "step"
        ]
      }
    }
  }
}